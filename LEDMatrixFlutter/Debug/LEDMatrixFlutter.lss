
LEDMatrixFlutter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000034d0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000144  20000000  000034d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003b8  20000150  00003620  00020144  2**4
                  ALLOC
  3 .stack        00000400  20000508  000039d8  00020144  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004c1d6  00000000  00000000  000201c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000066d2  00000000  00000000  0006c39b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000a267  00000000  00000000  00072a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000850  00000000  00000000  0007ccd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000cd0  00000000  00000000  0007d524  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001a847  00000000  00000000  0007e1f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00016bfc  00000000  00000000  00098a3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00071371  00000000  00000000  000af637  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000014d8  00000000  00000000  001209a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	08 09 00 20 c5 1f 00 00 c1 1f 00 00 c1 1f 00 00     ... ............
	...
      2c:	c1 1f 00 00 00 00 00 00 00 00 00 00 c1 1f 00 00     ................
      3c:	c1 1f 00 00 c1 1f 00 00 c1 1f 00 00 c1 1f 00 00     ................
      4c:	c1 1f 00 00 c1 1f 00 00 c1 1f 00 00 89 06 00 00     ................
      5c:	00 00 00 00 c1 1f 00 00 39 10 00 00 49 10 00 00     ........9...I...
      6c:	59 10 00 00 c1 1f 00 00 8d 17 00 00 9d 17 00 00     Y...............
      7c:	c9 05 00 00 c1 1f 00 00 c1 1f 00 00 c1 1f 00 00     ................

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000150 	.word	0x20000150
      ac:	00000000 	.word	0x00000000
      b0:	000034d0 	.word	0x000034d0

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	20000154 	.word	0x20000154
      e0:	000034d0 	.word	0x000034d0
      e4:	000034d0 	.word	0x000034d0
      e8:	00000000 	.word	0x00000000

000000ec <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
      ec:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
      ee:	2000      	movs	r0, #0
      f0:	4b08      	ldr	r3, [pc, #32]	; (114 <delay_init+0x28>)
      f2:	4798      	blx	r3
      f4:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
      f6:	4c08      	ldr	r4, [pc, #32]	; (118 <delay_init+0x2c>)
      f8:	21fa      	movs	r1, #250	; 0xfa
      fa:	0089      	lsls	r1, r1, #2
      fc:	47a0      	blx	r4
      fe:	4b07      	ldr	r3, [pc, #28]	; (11c <delay_init+0x30>)
     100:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     102:	4907      	ldr	r1, [pc, #28]	; (120 <delay_init+0x34>)
     104:	0028      	movs	r0, r5
     106:	47a0      	blx	r4
     108:	4b06      	ldr	r3, [pc, #24]	; (124 <delay_init+0x38>)
     10a:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     10c:	2205      	movs	r2, #5
     10e:	4b06      	ldr	r3, [pc, #24]	; (128 <delay_init+0x3c>)
     110:	601a      	str	r2, [r3, #0]
}
     112:	bd70      	pop	{r4, r5, r6, pc}
     114:	00001d51 	.word	0x00001d51
     118:	00002ee5 	.word	0x00002ee5
     11c:	20000000 	.word	0x20000000
     120:	000f4240 	.word	0x000f4240
     124:	20000004 	.word	0x20000004
     128:	e000e010 	.word	0xe000e010

0000012c <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     12c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     12e:	4b08      	ldr	r3, [pc, #32]	; (150 <delay_cycles_us+0x24>)
     130:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     132:	4a08      	ldr	r2, [pc, #32]	; (154 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     134:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     136:	2180      	movs	r1, #128	; 0x80
     138:	0249      	lsls	r1, r1, #9
	while (n--) {
     13a:	3801      	subs	r0, #1
     13c:	d307      	bcc.n	14e <delay_cycles_us+0x22>
	if (n > 0) {
     13e:	2c00      	cmp	r4, #0
     140:	d0fb      	beq.n	13a <delay_cycles_us+0xe>
		SysTick->LOAD = n;
     142:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     144:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     146:	6813      	ldr	r3, [r2, #0]
     148:	420b      	tst	r3, r1
     14a:	d0fc      	beq.n	146 <delay_cycles_us+0x1a>
     14c:	e7f5      	b.n	13a <delay_cycles_us+0xe>
	}
}
     14e:	bd30      	pop	{r4, r5, pc}
     150:	20000004 	.word	0x20000004
     154:	e000e010 	.word	0xe000e010

00000158 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     158:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     15a:	2200      	movs	r2, #0
     15c:	2300      	movs	r3, #0
     15e:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     160:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     162:	2100      	movs	r1, #0
     164:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     166:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     168:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     16a:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     16c:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     16e:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     170:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     172:	24c0      	movs	r4, #192	; 0xc0
     174:	0164      	lsls	r4, r4, #5
     176:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     178:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     17a:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     17c:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     17e:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     180:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     182:	242a      	movs	r4, #42	; 0x2a
     184:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     186:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     188:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     18a:	3c06      	subs	r4, #6
     18c:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     18e:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     190:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     192:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     194:	232b      	movs	r3, #43	; 0x2b
     196:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     198:	3301      	adds	r3, #1
     19a:	54c1      	strb	r1, [r0, r3]
}
     19c:	bd10      	pop	{r4, pc}
	...

000001a0 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     1a0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1a2:	46d6      	mov	lr, sl
     1a4:	464f      	mov	r7, r9
     1a6:	4646      	mov	r6, r8
     1a8:	b5c0      	push	{r6, r7, lr}
     1aa:	b096      	sub	sp, #88	; 0x58
     1ac:	0007      	movs	r7, r0
     1ae:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     1b0:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     1b2:	4ac6      	ldr	r2, [pc, #792]	; (4cc <STACK_SIZE+0xcc>)
     1b4:	6a10      	ldr	r0, [r2, #32]
     1b6:	2380      	movs	r3, #128	; 0x80
     1b8:	005b      	lsls	r3, r3, #1
     1ba:	4303      	orrs	r3, r0
     1bc:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     1be:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     1c0:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     1c2:	07db      	lsls	r3, r3, #31
     1c4:	d505      	bpl.n	1d2 <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     1c6:	b016      	add	sp, #88	; 0x58
     1c8:	bc1c      	pop	{r2, r3, r4}
     1ca:	4690      	mov	r8, r2
     1cc:	4699      	mov	r9, r3
     1ce:	46a2      	mov	sl, r4
     1d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     1d2:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     1d4:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     1d6:	079b      	lsls	r3, r3, #30
     1d8:	d4f5      	bmi.n	1c6 <adc_init+0x26>
	module_inst->reference = config->reference;
     1da:	7873      	ldrb	r3, [r6, #1]
     1dc:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     1de:	2b00      	cmp	r3, #0
     1e0:	d104      	bne.n	1ec <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     1e2:	4abb      	ldr	r2, [pc, #748]	; (4d0 <STACK_SIZE+0xd0>)
     1e4:	6c13      	ldr	r3, [r2, #64]	; 0x40
     1e6:	2104      	movs	r1, #4
     1e8:	430b      	orrs	r3, r1
     1ea:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
     1ec:	2300      	movs	r3, #0
     1ee:	60bb      	str	r3, [r7, #8]
     1f0:	60fb      	str	r3, [r7, #12]
     1f2:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
     1f4:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
     1f6:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
     1f8:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
     1fa:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
     1fc:	4bb5      	ldr	r3, [pc, #724]	; (4d4 <STACK_SIZE+0xd4>)
     1fe:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     200:	232a      	movs	r3, #42	; 0x2a
     202:	5cf3      	ldrb	r3, [r6, r3]
     204:	2b00      	cmp	r3, #0
     206:	d105      	bne.n	214 <adc_init+0x74>
     208:	7d33      	ldrb	r3, [r6, #20]
     20a:	2b00      	cmp	r3, #0
     20c:	d102      	bne.n	214 <adc_init+0x74>
		module_inst->software_trigger = true;
     20e:	3301      	adds	r3, #1
     210:	777b      	strb	r3, [r7, #29]
     212:	e001      	b.n	218 <adc_init+0x78>
		module_inst->software_trigger = false;
     214:	2300      	movs	r3, #0
     216:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
     218:	683b      	ldr	r3, [r7, #0]
     21a:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
     21c:	7833      	ldrb	r3, [r6, #0]
     21e:	466a      	mov	r2, sp
     220:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     222:	4669      	mov	r1, sp
     224:	2013      	movs	r0, #19
     226:	4bac      	ldr	r3, [pc, #688]	; (4d8 <STACK_SIZE+0xd8>)
     228:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     22a:	2013      	movs	r0, #19
     22c:	4bab      	ldr	r3, [pc, #684]	; (4dc <STACK_SIZE+0xdc>)
     22e:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     230:	232c      	movs	r3, #44	; 0x2c
     232:	5cf2      	ldrb	r2, [r6, r3]
     234:	2a00      	cmp	r2, #0
     236:	d054      	beq.n	2e2 <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
     238:	3b01      	subs	r3, #1
     23a:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     23c:	7b33      	ldrb	r3, [r6, #12]
     23e:	18eb      	adds	r3, r5, r3
     240:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     242:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     244:	b2c9      	uxtb	r1, r1
     246:	428b      	cmp	r3, r1
     248:	d221      	bcs.n	28e <adc_init+0xee>
     24a:	1952      	adds	r2, r2, r5
     24c:	b2d3      	uxtb	r3, r2
     24e:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     250:	4ba3      	ldr	r3, [pc, #652]	; (4e0 <STACK_SIZE+0xe0>)
     252:	469a      	mov	sl, r3
     254:	e003      	b.n	25e <adc_init+0xbe>
			offset++;
     256:	3501      	adds	r5, #1
     258:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     25a:	454d      	cmp	r5, r9
     25c:	d017      	beq.n	28e <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     25e:	240f      	movs	r4, #15
     260:	402c      	ands	r4, r5
     262:	7b33      	ldrb	r3, [r6, #12]
     264:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     266:	2250      	movs	r2, #80	; 0x50
     268:	499e      	ldr	r1, [pc, #632]	; (4e4 <STACK_SIZE+0xe4>)
     26a:	a802      	add	r0, sp, #8
     26c:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     26e:	2c09      	cmp	r4, #9
     270:	d8f1      	bhi.n	256 <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     272:	00a4      	lsls	r4, r4, #2
     274:	ab02      	add	r3, sp, #8
     276:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     278:	a901      	add	r1, sp, #4
     27a:	2300      	movs	r3, #0
     27c:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     27e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     280:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     282:	3301      	adds	r3, #1
     284:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     286:	b2c0      	uxtb	r0, r0
     288:	4b97      	ldr	r3, [pc, #604]	; (4e8 <STACK_SIZE+0xe8>)
     28a:	4798      	blx	r3
     28c:	e7e3      	b.n	256 <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
     28e:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     290:	2250      	movs	r2, #80	; 0x50
     292:	4994      	ldr	r1, [pc, #592]	; (4e4 <STACK_SIZE+0xe4>)
     294:	a802      	add	r0, sp, #8
     296:	4b92      	ldr	r3, [pc, #584]	; (4e0 <STACK_SIZE+0xe0>)
     298:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     29a:	2c09      	cmp	r4, #9
     29c:	d913      	bls.n	2c6 <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     29e:	7d73      	ldrb	r3, [r6, #21]
     2a0:	009b      	lsls	r3, r3, #2
     2a2:	b2db      	uxtb	r3, r3
     2a4:	4642      	mov	r2, r8
     2a6:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     2a8:	7db3      	ldrb	r3, [r6, #22]
     2aa:	01db      	lsls	r3, r3, #7
     2ac:	7872      	ldrb	r2, [r6, #1]
     2ae:	4313      	orrs	r3, r2
     2b0:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     2b2:	4642      	mov	r2, r8
     2b4:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     2b6:	7933      	ldrb	r3, [r6, #4]
     2b8:	2b34      	cmp	r3, #52	; 0x34
     2ba:	d900      	bls.n	2be <adc_init+0x11e>
     2bc:	e17b      	b.n	5b6 <STACK_SIZE+0x1b6>
     2be:	009b      	lsls	r3, r3, #2
     2c0:	4a8a      	ldr	r2, [pc, #552]	; (4ec <STACK_SIZE+0xec>)
     2c2:	58d3      	ldr	r3, [r2, r3]
     2c4:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2c6:	00a4      	lsls	r4, r4, #2
     2c8:	ab02      	add	r3, sp, #8
     2ca:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2cc:	a901      	add	r1, sp, #4
     2ce:	2300      	movs	r3, #0
     2d0:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     2d2:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2d4:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     2d6:	3301      	adds	r3, #1
     2d8:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     2da:	b2c0      	uxtb	r0, r0
     2dc:	4b82      	ldr	r3, [pc, #520]	; (4e8 <STACK_SIZE+0xe8>)
     2de:	4798      	blx	r3
     2e0:	e7dd      	b.n	29e <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
     2e2:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     2e4:	2250      	movs	r2, #80	; 0x50
     2e6:	497f      	ldr	r1, [pc, #508]	; (4e4 <STACK_SIZE+0xe4>)
     2e8:	a802      	add	r0, sp, #8
     2ea:	4b7d      	ldr	r3, [pc, #500]	; (4e0 <STACK_SIZE+0xe0>)
     2ec:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     2ee:	2c09      	cmp	r4, #9
     2f0:	d915      	bls.n	31e <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
     2f2:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     2f4:	2250      	movs	r2, #80	; 0x50
     2f6:	497b      	ldr	r1, [pc, #492]	; (4e4 <STACK_SIZE+0xe4>)
     2f8:	a802      	add	r0, sp, #8
     2fa:	4b79      	ldr	r3, [pc, #484]	; (4e0 <STACK_SIZE+0xe0>)
     2fc:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     2fe:	2c09      	cmp	r4, #9
     300:	d8cd      	bhi.n	29e <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     302:	00a4      	lsls	r4, r4, #2
     304:	ab02      	add	r3, sp, #8
     306:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     308:	a901      	add	r1, sp, #4
     30a:	2300      	movs	r3, #0
     30c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     30e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     310:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     312:	3301      	adds	r3, #1
     314:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     316:	b2c0      	uxtb	r0, r0
     318:	4b73      	ldr	r3, [pc, #460]	; (4e8 <STACK_SIZE+0xe8>)
     31a:	4798      	blx	r3
     31c:	e7bf      	b.n	29e <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     31e:	00a4      	lsls	r4, r4, #2
     320:	ab02      	add	r3, sp, #8
     322:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     324:	a901      	add	r1, sp, #4
     326:	2300      	movs	r3, #0
     328:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     32a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     32c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     32e:	3301      	adds	r3, #1
     330:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     332:	b2c0      	uxtb	r0, r0
     334:	4b6c      	ldr	r3, [pc, #432]	; (4e8 <STACK_SIZE+0xe8>)
     336:	4798      	blx	r3
     338:	e7db      	b.n	2f2 <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     33a:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     33c:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     33e:	2102      	movs	r1, #2
     340:	e01a      	b.n	378 <adc_init+0x1d8>
		adjres = config->divide_result;
     342:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     344:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     346:	2410      	movs	r4, #16
     348:	e016      	b.n	378 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     34a:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     34c:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     34e:	2101      	movs	r1, #1
     350:	e012      	b.n	378 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     352:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     354:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     356:	2100      	movs	r1, #0
     358:	e00e      	b.n	378 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     35a:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     35c:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     35e:	2100      	movs	r1, #0
     360:	e00a      	b.n	378 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     362:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     364:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     366:	2100      	movs	r1, #0
     368:	e006      	b.n	378 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     36a:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     36c:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     36e:	2100      	movs	r1, #0
     370:	e002      	b.n	378 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     372:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     374:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     376:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     378:	0109      	lsls	r1, r1, #4
     37a:	2270      	movs	r2, #112	; 0x70
     37c:	400a      	ands	r2, r1
     37e:	4313      	orrs	r3, r2
     380:	4642      	mov	r2, r8
     382:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     384:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     386:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     388:	2b3f      	cmp	r3, #63	; 0x3f
     38a:	d900      	bls.n	38e <adc_init+0x1ee>
     38c:	e71b      	b.n	1c6 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     38e:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     390:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     392:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     394:	b25b      	sxtb	r3, r3
     396:	2b00      	cmp	r3, #0
     398:	dbfb      	blt.n	392 <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     39a:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     39c:	8872      	ldrh	r2, [r6, #2]
     39e:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     3a0:	2224      	movs	r2, #36	; 0x24
     3a2:	5cb2      	ldrb	r2, [r6, r2]
     3a4:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     3a6:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     3a8:	7d32      	ldrb	r2, [r6, #20]
     3aa:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     3ac:	4313      	orrs	r3, r2
     3ae:	7cb2      	ldrb	r2, [r6, #18]
     3b0:	0052      	lsls	r2, r2, #1
     3b2:	4313      	orrs	r3, r2
     3b4:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     3b6:	4642      	mov	r2, r8
     3b8:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     3ba:	7e33      	ldrb	r3, [r6, #24]
     3bc:	2b00      	cmp	r3, #0
     3be:	d020      	beq.n	402 <STACK_SIZE+0x2>
		switch (resolution) {
     3c0:	2c10      	cmp	r4, #16
     3c2:	d100      	bne.n	3c6 <adc_init+0x226>
     3c4:	e0d9      	b.n	57a <STACK_SIZE+0x17a>
     3c6:	d800      	bhi.n	3ca <adc_init+0x22a>
     3c8:	e098      	b.n	4fc <STACK_SIZE+0xfc>
     3ca:	2c20      	cmp	r4, #32
     3cc:	d100      	bne.n	3d0 <adc_init+0x230>
     3ce:	e0b6      	b.n	53e <STACK_SIZE+0x13e>
     3d0:	2c30      	cmp	r4, #48	; 0x30
     3d2:	d116      	bne.n	402 <STACK_SIZE+0x2>
			if (config->differential_mode &&
     3d4:	7cf2      	ldrb	r2, [r6, #19]
     3d6:	2a00      	cmp	r2, #0
     3d8:	d00a      	beq.n	3f0 <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
     3da:	69f2      	ldr	r2, [r6, #28]
     3dc:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     3de:	2017      	movs	r0, #23
			if (config->differential_mode &&
     3e0:	2aff      	cmp	r2, #255	; 0xff
     3e2:	d900      	bls.n	3e6 <adc_init+0x246>
     3e4:	e6ef      	b.n	1c6 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     3e6:	6a32      	ldr	r2, [r6, #32]
     3e8:	3280      	adds	r2, #128	; 0x80
     3ea:	2aff      	cmp	r2, #255	; 0xff
     3ec:	d900      	bls.n	3f0 <adc_init+0x250>
     3ee:	e6ea      	b.n	1c6 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     3f0:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     3f2:	69f2      	ldr	r2, [r6, #28]
     3f4:	2aff      	cmp	r2, #255	; 0xff
     3f6:	dd00      	ble.n	3fa <adc_init+0x25a>
     3f8:	e6e5      	b.n	1c6 <adc_init+0x26>
     3fa:	6a32      	ldr	r2, [r6, #32]
     3fc:	2aff      	cmp	r2, #255	; 0xff
     3fe:	dd00      	ble.n	402 <STACK_SIZE+0x2>
     400:	e6e1      	b.n	1c6 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     402:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     404:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     406:	b252      	sxtb	r2, r2
     408:	2a00      	cmp	r2, #0
     40a:	dbfb      	blt.n	404 <STACK_SIZE+0x4>
	adc_module->WINCTRL.reg = config->window.window_mode;
     40c:	4642      	mov	r2, r8
     40e:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     410:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     412:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     414:	b25b      	sxtb	r3, r3
     416:	2b00      	cmp	r3, #0
     418:	dbfb      	blt.n	412 <STACK_SIZE+0x12>
	adc_module->WINLT.reg =
     41a:	8bb3      	ldrh	r3, [r6, #28]
     41c:	4642      	mov	r2, r8
     41e:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     420:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     422:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     424:	b25b      	sxtb	r3, r3
     426:	2b00      	cmp	r3, #0
     428:	dbfb      	blt.n	422 <STACK_SIZE+0x22>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     42a:	8c33      	ldrh	r3, [r6, #32]
     42c:	4642      	mov	r2, r8
     42e:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     430:	232c      	movs	r3, #44	; 0x2c
     432:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     434:	2b00      	cmp	r3, #0
     436:	d005      	beq.n	444 <STACK_SIZE+0x44>
		inputs_to_scan--;
     438:	3b01      	subs	r3, #1
     43a:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     43c:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     43e:	2b0f      	cmp	r3, #15
     440:	d900      	bls.n	444 <STACK_SIZE+0x44>
     442:	e6c0      	b.n	1c6 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     444:	222b      	movs	r2, #43	; 0x2b
     446:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     448:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     44a:	290f      	cmp	r1, #15
     44c:	d900      	bls.n	450 <STACK_SIZE+0x50>
     44e:	e6ba      	b.n	1c6 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     450:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     452:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     454:	b252      	sxtb	r2, r2
     456:	2a00      	cmp	r2, #0
     458:	dbfb      	blt.n	452 <STACK_SIZE+0x52>
			config->negative_input |
     45a:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     45c:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     45e:	4302      	orrs	r2, r0
     460:	68b0      	ldr	r0, [r6, #8]
     462:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     464:	0509      	lsls	r1, r1, #20
			config->negative_input |
     466:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     468:	041b      	lsls	r3, r3, #16
			config->negative_input |
     46a:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     46c:	4642      	mov	r2, r8
     46e:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     470:	232a      	movs	r3, #42	; 0x2a
     472:	5cf3      	ldrb	r3, [r6, r3]
     474:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     476:	230f      	movs	r3, #15
     478:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     47a:	3315      	adds	r3, #21
     47c:	5cf3      	ldrb	r3, [r6, r3]
     47e:	2b00      	cmp	r3, #0
     480:	d012      	beq.n	4a8 <STACK_SIZE+0xa8>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     482:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     484:	4a1a      	ldr	r2, [pc, #104]	; (4f0 <STACK_SIZE+0xf0>)
			return STATUS_ERR_INVALID_ARG;
     486:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     488:	4293      	cmp	r3, r2
     48a:	d900      	bls.n	48e <STACK_SIZE+0x8e>
     48c:	e69b      	b.n	1c6 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     48e:	4642      	mov	r2, r8
     490:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     492:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     494:	2380      	movs	r3, #128	; 0x80
     496:	011b      	lsls	r3, r3, #4
     498:	18d3      	adds	r3, r2, r3
     49a:	4915      	ldr	r1, [pc, #84]	; (4f0 <STACK_SIZE+0xf0>)
     49c:	b29b      	uxth	r3, r3
     49e:	428b      	cmp	r3, r1
     4a0:	d900      	bls.n	4a4 <STACK_SIZE+0xa4>
     4a2:	e690      	b.n	1c6 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     4a4:	4643      	mov	r3, r8
     4a6:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     4a8:	4b12      	ldr	r3, [pc, #72]	; (4f4 <STACK_SIZE+0xf4>)
     4aa:	681b      	ldr	r3, [r3, #0]
     4ac:	015b      	lsls	r3, r3, #5
     4ae:	22e0      	movs	r2, #224	; 0xe0
     4b0:	00d2      	lsls	r2, r2, #3
     4b2:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     4b4:	4a10      	ldr	r2, [pc, #64]	; (4f8 <STACK_SIZE+0xf8>)
     4b6:	6851      	ldr	r1, [r2, #4]
     4b8:	0149      	lsls	r1, r1, #5
     4ba:	6812      	ldr	r2, [r2, #0]
     4bc:	0ed2      	lsrs	r2, r2, #27
     4be:	430a      	orrs	r2, r1
     4c0:	b2d2      	uxtb	r2, r2
			) |
     4c2:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     4c4:	4642      	mov	r2, r8
     4c6:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     4c8:	2000      	movs	r0, #0
     4ca:	e67c      	b.n	1c6 <adc_init+0x26>
     4cc:	40000400 	.word	0x40000400
     4d0:	40000800 	.word	0x40000800
     4d4:	200002b8 	.word	0x200002b8
     4d8:	00001e69 	.word	0x00001e69
     4dc:	00001ddd 	.word	0x00001ddd
     4e0:	0000322d 	.word	0x0000322d
     4e4:	00003408 	.word	0x00003408
     4e8:	00001f61 	.word	0x00001f61
     4ec:	00003334 	.word	0x00003334
     4f0:	00000fff 	.word	0x00000fff
     4f4:	00806024 	.word	0x00806024
     4f8:	00806020 	.word	0x00806020
		switch (resolution) {
     4fc:	2c00      	cmp	r4, #0
     4fe:	d000      	beq.n	502 <STACK_SIZE+0x102>
     500:	e77f      	b.n	402 <STACK_SIZE+0x2>
			if (config->differential_mode &&
     502:	7cf2      	ldrb	r2, [r6, #19]
     504:	2a00      	cmp	r2, #0
     506:	d00f      	beq.n	528 <STACK_SIZE+0x128>
					(config->window.window_lower_value > 2047 ||
     508:	69f2      	ldr	r2, [r6, #28]
     50a:	2180      	movs	r1, #128	; 0x80
     50c:	0109      	lsls	r1, r1, #4
     50e:	468c      	mov	ip, r1
     510:	4462      	add	r2, ip
			if (config->differential_mode &&
     512:	492a      	ldr	r1, [pc, #168]	; (5bc <STACK_SIZE+0x1bc>)
				return STATUS_ERR_INVALID_ARG;
     514:	2017      	movs	r0, #23
			if (config->differential_mode &&
     516:	428a      	cmp	r2, r1
     518:	d900      	bls.n	51c <STACK_SIZE+0x11c>
     51a:	e654      	b.n	1c6 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     51c:	6a32      	ldr	r2, [r6, #32]
     51e:	4462      	add	r2, ip
     520:	4926      	ldr	r1, [pc, #152]	; (5bc <STACK_SIZE+0x1bc>)
     522:	428a      	cmp	r2, r1
     524:	d900      	bls.n	528 <STACK_SIZE+0x128>
     526:	e64e      	b.n	1c6 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     528:	4a24      	ldr	r2, [pc, #144]	; (5bc <STACK_SIZE+0x1bc>)
				return STATUS_ERR_INVALID_ARG;
     52a:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     52c:	69f1      	ldr	r1, [r6, #28]
     52e:	4291      	cmp	r1, r2
     530:	dd00      	ble.n	534 <STACK_SIZE+0x134>
     532:	e648      	b.n	1c6 <adc_init+0x26>
     534:	6a31      	ldr	r1, [r6, #32]
     536:	4291      	cmp	r1, r2
     538:	dd00      	ble.n	53c <STACK_SIZE+0x13c>
     53a:	e644      	b.n	1c6 <adc_init+0x26>
     53c:	e761      	b.n	402 <STACK_SIZE+0x2>
			if (config->differential_mode &&
     53e:	7cf2      	ldrb	r2, [r6, #19]
     540:	2a00      	cmp	r2, #0
     542:	d00f      	beq.n	564 <STACK_SIZE+0x164>
					(config->window.window_lower_value > 511 ||
     544:	69f2      	ldr	r2, [r6, #28]
     546:	2180      	movs	r1, #128	; 0x80
     548:	0089      	lsls	r1, r1, #2
     54a:	468c      	mov	ip, r1
     54c:	4462      	add	r2, ip
			if (config->differential_mode &&
     54e:	491c      	ldr	r1, [pc, #112]	; (5c0 <STACK_SIZE+0x1c0>)
				return STATUS_ERR_INVALID_ARG;
     550:	2017      	movs	r0, #23
			if (config->differential_mode &&
     552:	428a      	cmp	r2, r1
     554:	d900      	bls.n	558 <STACK_SIZE+0x158>
     556:	e636      	b.n	1c6 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     558:	6a32      	ldr	r2, [r6, #32]
     55a:	4462      	add	r2, ip
     55c:	4918      	ldr	r1, [pc, #96]	; (5c0 <STACK_SIZE+0x1c0>)
     55e:	428a      	cmp	r2, r1
     560:	d900      	bls.n	564 <STACK_SIZE+0x164>
     562:	e630      	b.n	1c6 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     564:	4a16      	ldr	r2, [pc, #88]	; (5c0 <STACK_SIZE+0x1c0>)
				return STATUS_ERR_INVALID_ARG;
     566:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     568:	69f1      	ldr	r1, [r6, #28]
     56a:	4291      	cmp	r1, r2
     56c:	dd00      	ble.n	570 <STACK_SIZE+0x170>
     56e:	e62a      	b.n	1c6 <adc_init+0x26>
     570:	6a31      	ldr	r1, [r6, #32]
     572:	4291      	cmp	r1, r2
     574:	dd00      	ble.n	578 <STACK_SIZE+0x178>
     576:	e626      	b.n	1c6 <adc_init+0x26>
     578:	e743      	b.n	402 <STACK_SIZE+0x2>
			if (config->differential_mode &&
     57a:	7cf2      	ldrb	r2, [r6, #19]
     57c:	2a00      	cmp	r2, #0
     57e:	d00f      	beq.n	5a0 <STACK_SIZE+0x1a0>
					(config->window.window_lower_value > 32767 ||
     580:	69f2      	ldr	r2, [r6, #28]
     582:	2180      	movs	r1, #128	; 0x80
     584:	0209      	lsls	r1, r1, #8
     586:	468c      	mov	ip, r1
     588:	4462      	add	r2, ip
			if (config->differential_mode &&
     58a:	490e      	ldr	r1, [pc, #56]	; (5c4 <STACK_SIZE+0x1c4>)
				return STATUS_ERR_INVALID_ARG;
     58c:	2017      	movs	r0, #23
			if (config->differential_mode &&
     58e:	428a      	cmp	r2, r1
     590:	d900      	bls.n	594 <STACK_SIZE+0x194>
     592:	e618      	b.n	1c6 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     594:	6a32      	ldr	r2, [r6, #32]
     596:	4462      	add	r2, ip
     598:	490a      	ldr	r1, [pc, #40]	; (5c4 <STACK_SIZE+0x1c4>)
     59a:	428a      	cmp	r2, r1
     59c:	d900      	bls.n	5a0 <STACK_SIZE+0x1a0>
     59e:	e612      	b.n	1c6 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     5a0:	4a08      	ldr	r2, [pc, #32]	; (5c4 <STACK_SIZE+0x1c4>)
				return STATUS_ERR_INVALID_ARG;
     5a2:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     5a4:	69f1      	ldr	r1, [r6, #28]
     5a6:	4291      	cmp	r1, r2
     5a8:	dd00      	ble.n	5ac <STACK_SIZE+0x1ac>
     5aa:	e60c      	b.n	1c6 <adc_init+0x26>
     5ac:	6a31      	ldr	r1, [r6, #32]
     5ae:	4291      	cmp	r1, r2
     5b0:	dd00      	ble.n	5b4 <STACK_SIZE+0x1b4>
     5b2:	e608      	b.n	1c6 <adc_init+0x26>
     5b4:	e725      	b.n	402 <STACK_SIZE+0x2>
		return STATUS_ERR_INVALID_ARG;
     5b6:	2017      	movs	r0, #23
     5b8:	e605      	b.n	1c6 <adc_init+0x26>
     5ba:	46c0      	nop			; (mov r8, r8)
     5bc:	00000fff 	.word	0x00000fff
     5c0:	000003ff 	.word	0x000003ff
     5c4:	0000ffff 	.word	0x0000ffff

000005c8 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     5c8:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     5ca:	4b2e      	ldr	r3, [pc, #184]	; (684 <ADC_Handler+0xbc>)
     5cc:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg;
     5ce:	6823      	ldr	r3, [r4, #0]
     5d0:	7e1d      	ldrb	r5, [r3, #24]
     5d2:	b2ed      	uxtb	r5, r5
	if (flags & ADC_INTFLAG_RESRDY) {
     5d4:	07ea      	lsls	r2, r5, #31
     5d6:	d505      	bpl.n	5e4 <ADC_Handler+0x1c>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
     5d8:	7ee2      	ldrb	r2, [r4, #27]
     5da:	07d2      	lsls	r2, r2, #31
     5dc:	d502      	bpl.n	5e4 <ADC_Handler+0x1c>
     5de:	7ea2      	ldrb	r2, [r4, #26]
     5e0:	07d2      	lsls	r2, r2, #31
     5e2:	d416      	bmi.n	612 <ADC_Handler+0x4a>
	if (flags & ADC_INTFLAG_WINMON) {
     5e4:	076b      	lsls	r3, r5, #29
     5e6:	d508      	bpl.n	5fa <ADC_Handler+0x32>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     5e8:	2304      	movs	r3, #4
     5ea:	6822      	ldr	r2, [r4, #0]
     5ec:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     5ee:	7ee3      	ldrb	r3, [r4, #27]
     5f0:	079b      	lsls	r3, r3, #30
     5f2:	d502      	bpl.n	5fa <ADC_Handler+0x32>
     5f4:	7ea3      	ldrb	r3, [r4, #26]
     5f6:	079b      	lsls	r3, r3, #30
     5f8:	d43c      	bmi.n	674 <ADC_Handler+0xac>
	if (flags & ADC_INTFLAG_OVERRUN) {
     5fa:	07ab      	lsls	r3, r5, #30
     5fc:	d508      	bpl.n	610 <ADC_Handler+0x48>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     5fe:	2302      	movs	r3, #2
     600:	6822      	ldr	r2, [r4, #0]
     602:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     604:	7ee3      	ldrb	r3, [r4, #27]
     606:	075b      	lsls	r3, r3, #29
     608:	d502      	bpl.n	610 <ADC_Handler+0x48>
     60a:	7ea3      	ldrb	r3, [r4, #26]
     60c:	075b      	lsls	r3, r3, #29
     60e:	d435      	bmi.n	67c <ADC_Handler+0xb4>
	_adc_interrupt_handler(0);
}
     610:	bd70      	pop	{r4, r5, r6, pc}
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     612:	2201      	movs	r2, #1
     614:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
     616:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     618:	7e53      	ldrb	r3, [r2, #25]
			while (adc_is_syncing(module)) {
     61a:	b25b      	sxtb	r3, r3
     61c:	2b00      	cmp	r3, #0
     61e:	dbfb      	blt.n	618 <ADC_Handler+0x50>
			*(module->job_buffer++) = module->hw->RESULT.reg;
     620:	6961      	ldr	r1, [r4, #20]
     622:	1c8b      	adds	r3, r1, #2
     624:	6163      	str	r3, [r4, #20]
     626:	8b53      	ldrh	r3, [r2, #26]
     628:	b29b      	uxth	r3, r3
     62a:	800b      	strh	r3, [r1, #0]
			if (--module->remaining_conversions > 0) {
     62c:	8b23      	ldrh	r3, [r4, #24]
     62e:	3b01      	subs	r3, #1
     630:	b29b      	uxth	r3, r3
     632:	8323      	strh	r3, [r4, #24]
     634:	2b00      	cmp	r3, #0
     636:	d011      	beq.n	65c <ADC_Handler+0x94>
				if (module->software_trigger == true) {
     638:	7f63      	ldrb	r3, [r4, #29]
     63a:	2b00      	cmp	r3, #0
     63c:	d0d2      	beq.n	5e4 <ADC_Handler+0x1c>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     63e:	6822      	ldr	r2, [r4, #0]
     640:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     642:	b25b      	sxtb	r3, r3
     644:	2b00      	cmp	r3, #0
     646:	dbfb      	blt.n	640 <ADC_Handler+0x78>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     648:	7b13      	ldrb	r3, [r2, #12]
     64a:	2102      	movs	r1, #2
     64c:	430b      	orrs	r3, r1
     64e:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     650:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     652:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     654:	b25b      	sxtb	r3, r3
     656:	2b00      	cmp	r3, #0
     658:	dbfb      	blt.n	652 <ADC_Handler+0x8a>
     65a:	e7c3      	b.n	5e4 <ADC_Handler+0x1c>
				if (module->job_status == STATUS_BUSY) {
     65c:	7f23      	ldrb	r3, [r4, #28]
     65e:	2b05      	cmp	r3, #5
     660:	d1c0      	bne.n	5e4 <ADC_Handler+0x1c>
					module->job_status = STATUS_OK;
     662:	2300      	movs	r3, #0
     664:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     666:	3301      	adds	r3, #1
     668:	6822      	ldr	r2, [r4, #0]
     66a:	7593      	strb	r3, [r2, #22]
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     66c:	0020      	movs	r0, r4
     66e:	68a3      	ldr	r3, [r4, #8]
     670:	4798      	blx	r3
     672:	e7b7      	b.n	5e4 <ADC_Handler+0x1c>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     674:	0020      	movs	r0, r4
     676:	68e3      	ldr	r3, [r4, #12]
     678:	4798      	blx	r3
     67a:	e7be      	b.n	5fa <ADC_Handler+0x32>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     67c:	6923      	ldr	r3, [r4, #16]
     67e:	0020      	movs	r0, r4
     680:	4798      	blx	r3
}
     682:	e7c5      	b.n	610 <ADC_Handler+0x48>
     684:	200002b8 	.word	0x200002b8

00000688 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
     688:	b510      	push	{r4, lr}
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     68a:	4b26      	ldr	r3, [pc, #152]	; (724 <DMAC_Handler+0x9c>)
     68c:	4798      	blx	r3
	uint32_t total_size;

	system_interrupt_enter_critical_section();

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
     68e:	4926      	ldr	r1, [pc, #152]	; (728 <DMAC_Handler+0xa0>)
     690:	8c0b      	ldrh	r3, [r1, #32]
     692:	2207      	movs	r2, #7

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
     694:	4013      	ands	r3, r2
     696:	009b      	lsls	r3, r3, #2
     698:	4824      	ldr	r0, [pc, #144]	; (72c <DMAC_Handler+0xa4>)
     69a:	5818      	ldr	r0, [r3, r0]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     69c:	7803      	ldrb	r3, [r0, #0]
     69e:	401a      	ands	r2, r3
     6a0:	233f      	movs	r3, #63	; 0x3f
     6a2:	54ca      	strb	r2, [r1, r3]
	isr = DMAC->CHINTFLAG.reg;
     6a4:	330f      	adds	r3, #15
     6a6:	5cca      	ldrb	r2, [r1, r3]
     6a8:	b2d2      	uxtb	r2, r2

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
     6aa:	7803      	ldrb	r3, [r0, #0]
     6ac:	011b      	lsls	r3, r3, #4
     6ae:	4920      	ldr	r1, [pc, #128]	; (730 <DMAC_Handler+0xa8>)
     6b0:	18c9      	adds	r1, r1, r3
     6b2:	8849      	ldrh	r1, [r1, #2]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
     6b4:	4c1f      	ldr	r4, [pc, #124]	; (734 <DMAC_Handler+0xac>)
     6b6:	18e3      	adds	r3, r4, r3
     6b8:	885b      	ldrh	r3, [r3, #2]
	resource->transfered_size = total_size - write_size;
     6ba:	1acb      	subs	r3, r1, r3
     6bc:	6143      	str	r3, [r0, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
     6be:	07d3      	lsls	r3, r2, #31
     6c0:	d50f      	bpl.n	6e2 <DMAC_Handler+0x5a>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
     6c2:	2101      	movs	r1, #1
     6c4:	234e      	movs	r3, #78	; 0x4e
     6c6:	4a18      	ldr	r2, [pc, #96]	; (728 <DMAC_Handler+0xa0>)
     6c8:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
     6ca:	3b3e      	subs	r3, #62	; 0x3e
     6cc:	7443      	strb	r3, [r0, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
     6ce:	7c03      	ldrb	r3, [r0, #16]
     6d0:	07db      	lsls	r3, r3, #31
     6d2:	d503      	bpl.n	6dc <DMAC_Handler+0x54>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
     6d4:	6843      	ldr	r3, [r0, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
     6d6:	2b00      	cmp	r3, #0
     6d8:	d000      	beq.n	6dc <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
     6da:	4798      	blx	r3
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     6dc:	4b16      	ldr	r3, [pc, #88]	; (738 <DMAC_Handler+0xb0>)
     6de:	4798      	blx	r3
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
		}
	}

	system_interrupt_leave_critical_section();
}
     6e0:	bd10      	pop	{r4, pc}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
     6e2:	0793      	lsls	r3, r2, #30
     6e4:	d50d      	bpl.n	702 <DMAC_Handler+0x7a>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
     6e6:	2102      	movs	r1, #2
     6e8:	234e      	movs	r3, #78	; 0x4e
     6ea:	4a0f      	ldr	r2, [pc, #60]	; (728 <DMAC_Handler+0xa0>)
     6ec:	54d1      	strb	r1, [r2, r3]
		resource->job_status = STATUS_OK;
     6ee:	2300      	movs	r3, #0
     6f0:	7443      	strb	r3, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
     6f2:	7c03      	ldrb	r3, [r0, #16]
     6f4:	079b      	lsls	r3, r3, #30
     6f6:	d5f1      	bpl.n	6dc <DMAC_Handler+0x54>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
     6f8:	6883      	ldr	r3, [r0, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
     6fa:	2b00      	cmp	r3, #0
     6fc:	d0ee      	beq.n	6dc <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
     6fe:	4798      	blx	r3
     700:	e7ec      	b.n	6dc <DMAC_Handler+0x54>
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
     702:	0753      	lsls	r3, r2, #29
     704:	d5ea      	bpl.n	6dc <DMAC_Handler+0x54>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
     706:	2104      	movs	r1, #4
     708:	234e      	movs	r3, #78	; 0x4e
     70a:	4a07      	ldr	r2, [pc, #28]	; (728 <DMAC_Handler+0xa0>)
     70c:	54d1      	strb	r1, [r2, r3]
		resource->job_status = STATUS_SUSPEND;
     70e:	3b48      	subs	r3, #72	; 0x48
     710:	7443      	strb	r3, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
     712:	7c03      	ldrb	r3, [r0, #16]
     714:	075b      	lsls	r3, r3, #29
     716:	d5e1      	bpl.n	6dc <DMAC_Handler+0x54>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
     718:	68c3      	ldr	r3, [r0, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
     71a:	2b00      	cmp	r3, #0
     71c:	d0de      	beq.n	6dc <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
     71e:	4798      	blx	r3
     720:	e7dc      	b.n	6dc <DMAC_Handler+0x54>
     722:	46c0      	nop			; (mov r8, r8)
     724:	000017d5 	.word	0x000017d5
     728:	41004800 	.word	0x41004800
     72c:	2000016c 	.word	0x2000016c
     730:	200002c0 	.word	0x200002c0
     734:	20000180 	.word	0x20000180
     738:	00001815 	.word	0x00001815

0000073c <dma_get_config_defaults>:
 */
void dma_get_config_defaults(struct dma_resource_config *config)
{
	Assert(config);
	/* Set as priority 0 */
	config->priority = DMA_PRIORITY_LEVEL_0;
     73c:	2300      	movs	r3, #0
     73e:	7003      	strb	r3, [r0, #0]
	/* Only software/event trigger */
	config->peripheral_trigger = 0;
     740:	7043      	strb	r3, [r0, #1]
	/* Transaction trigger */
	config->trigger_action = DMA_TRIGGER_ACTION_TRANSACTION;
     742:	2203      	movs	r2, #3
     744:	7082      	strb	r2, [r0, #2]

	/* Event configurations, no event input/output */
	config->event_config.input_action = DMA_EVENT_INPUT_NOACT;
     746:	70c3      	strb	r3, [r0, #3]
	config->event_config.event_output_enable = false;
     748:	7103      	strb	r3, [r0, #4]
#ifdef FEATURE_DMA_CHANNEL_STANDBY
	config->run_in_standby = false;
#endif
}
     74a:	4770      	bx	lr

0000074c <dma_allocate>:
 * \retval STATUS_OK The DMA resource was allocated successfully
 * \retval STATUS_ERR_NOT_FOUND DMA resource allocation failed
 */
enum status_code dma_allocate(struct dma_resource *resource,
		struct dma_resource_config *config)
{
     74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     74e:	46ce      	mov	lr, r9
     750:	4647      	mov	r7, r8
     752:	b580      	push	{r7, lr}
     754:	0005      	movs	r5, r0
     756:	000e      	movs	r6, r1
	cpu_irq_enter_critical();
     758:	4b45      	ldr	r3, [pc, #276]	; (870 <dma_allocate+0x124>)
     75a:	4798      	blx	r3

	Assert(resource);

	system_interrupt_enter_critical_section();

	if (!_dma_inst._dma_init) {
     75c:	4b45      	ldr	r3, [pc, #276]	; (874 <dma_allocate+0x128>)
     75e:	781b      	ldrb	r3, [r3, #0]
     760:	2b00      	cmp	r3, #0
     762:	d118      	bne.n	796 <dma_allocate+0x4a>
	PM->AHBMASK.reg |= ahb_mask;
     764:	4b44      	ldr	r3, [pc, #272]	; (878 <dma_allocate+0x12c>)
     766:	695a      	ldr	r2, [r3, #20]
     768:	2120      	movs	r1, #32
     76a:	430a      	orrs	r2, r1
     76c:	615a      	str	r2, [r3, #20]
			PM->APBBMASK.reg |= mask;
     76e:	69da      	ldr	r2, [r3, #28]
     770:	3910      	subs	r1, #16
     772:	430a      	orrs	r2, r1
     774:	61da      	str	r2, [r3, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB,
				PM_APBBMASK_DMAC);
#endif

		/* Perform a software reset before enable DMA controller */
		DMAC->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
     776:	4b41      	ldr	r3, [pc, #260]	; (87c <dma_allocate+0x130>)
     778:	881a      	ldrh	r2, [r3, #0]
     77a:	390e      	subs	r1, #14
     77c:	438a      	bics	r2, r1
     77e:	801a      	strh	r2, [r3, #0]
		DMAC->CTRL.reg = DMAC_CTRL_SWRST;
     780:	2201      	movs	r2, #1
     782:	801a      	strh	r2, [r3, #0]

		/* Setup descriptor base address and write back section base
		 * address */
		DMAC->BASEADDR.reg = (uint32_t)descriptor_section;
     784:	4a3e      	ldr	r2, [pc, #248]	; (880 <dma_allocate+0x134>)
     786:	635a      	str	r2, [r3, #52]	; 0x34
		DMAC->WRBADDR.reg = (uint32_t)_write_back_section;
     788:	4a3e      	ldr	r2, [pc, #248]	; (884 <dma_allocate+0x138>)
     78a:	639a      	str	r2, [r3, #56]	; 0x38

		/* Enable all priority level at the same time */
		DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
     78c:	4a3e      	ldr	r2, [pc, #248]	; (888 <dma_allocate+0x13c>)
     78e:	801a      	strh	r2, [r3, #0]

		_dma_inst._dma_init = true;
     790:	4b38      	ldr	r3, [pc, #224]	; (874 <dma_allocate+0x128>)
     792:	2201      	movs	r2, #1
     794:	701a      	strb	r2, [r3, #0]
     796:	4b36      	ldr	r3, [pc, #216]	; (870 <dma_allocate+0x124>)
     798:	4798      	blx	r3
	tmp = _dma_inst.allocated_channels;
     79a:	4b36      	ldr	r3, [pc, #216]	; (874 <dma_allocate+0x128>)
     79c:	685b      	ldr	r3, [r3, #4]
		if (!(tmp & 0x00000001)) {
     79e:	07da      	lsls	r2, r3, #31
     7a0:	d50f      	bpl.n	7c2 <dma_allocate+0x76>
		tmp = tmp >> 1;
     7a2:	085b      	lsrs	r3, r3, #1
	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
     7a4:	2401      	movs	r4, #1
		if (!(tmp & 0x00000001)) {
     7a6:	2201      	movs	r2, #1
     7a8:	421a      	tst	r2, r3
     7aa:	d00b      	beq.n	7c4 <dma_allocate+0x78>
		tmp = tmp >> 1;
     7ac:	085b      	lsrs	r3, r3, #1
	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
     7ae:	3401      	adds	r4, #1
     7b0:	b2e4      	uxtb	r4, r4
     7b2:	2c05      	cmp	r4, #5
     7b4:	d1f8      	bne.n	7a8 <dma_allocate+0x5c>
	cpu_irq_leave_critical();
     7b6:	4b35      	ldr	r3, [pc, #212]	; (88c <dma_allocate+0x140>)
     7b8:	4798      	blx	r3
     7ba:	4b34      	ldr	r3, [pc, #208]	; (88c <dma_allocate+0x140>)
     7bc:	4798      	blx	r3

	/* If no channel available, return not found */
	if (new_channel == DMA_INVALID_CHANNEL) {
		system_interrupt_leave_critical_section();

		return STATUS_ERR_NOT_FOUND;
     7be:	2014      	movs	r0, #20
     7c0:	e051      	b.n	866 <dma_allocate+0x11a>
	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
     7c2:	2400      	movs	r4, #0
			_dma_inst.allocated_channels |= 1 << count;
     7c4:	4a2b      	ldr	r2, [pc, #172]	; (874 <dma_allocate+0x128>)
     7c6:	6851      	ldr	r1, [r2, #4]
     7c8:	2301      	movs	r3, #1
     7ca:	40a3      	lsls	r3, r4
     7cc:	430b      	orrs	r3, r1
     7ce:	6053      	str	r3, [r2, #4]
			_dma_inst.free_channels--;
     7d0:	7a13      	ldrb	r3, [r2, #8]
     7d2:	3b01      	subs	r3, #1
     7d4:	7213      	strb	r3, [r2, #8]
     7d6:	4b2d      	ldr	r3, [pc, #180]	; (88c <dma_allocate+0x140>)
     7d8:	4798      	blx	r3
	if (new_channel == DMA_INVALID_CHANNEL) {
     7da:	2cff      	cmp	r4, #255	; 0xff
     7dc:	d0ed      	beq.n	7ba <dma_allocate+0x6e>
	}

	/* Set the channel */
	resource->channel_id = new_channel;
     7de:	702c      	strb	r4, [r5, #0]

	/** Perform a reset for the allocated channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     7e0:	2307      	movs	r3, #7
     7e2:	4698      	mov	r8, r3
     7e4:	401c      	ands	r4, r3
     7e6:	4f25      	ldr	r7, [pc, #148]	; (87c <dma_allocate+0x130>)
     7e8:	3338      	adds	r3, #56	; 0x38
     7ea:	4699      	mov	r9, r3
     7ec:	54fc      	strb	r4, [r7, r3]
	DMAC->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
     7ee:	3301      	adds	r3, #1
     7f0:	5cfa      	ldrb	r2, [r7, r3]
     7f2:	2102      	movs	r1, #2
     7f4:	438a      	bics	r2, r1
     7f6:	54fa      	strb	r2, [r7, r3]
	DMAC->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
     7f8:	2401      	movs	r4, #1
     7fa:	54fc      	strb	r4, [r7, r3]
	cpu_irq_enter_critical();
     7fc:	4b1c      	ldr	r3, [pc, #112]	; (870 <dma_allocate+0x124>)
     7fe:	4798      	blx	r3
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     800:	782b      	ldrb	r3, [r5, #0]
     802:	4642      	mov	r2, r8
     804:	4013      	ands	r3, r2
     806:	464a      	mov	r2, r9
     808:	54bb      	strb	r3, [r7, r2]
	DMAC->SWTRIGCTRL.reg &= (uint32_t)(~(1 << resource->channel_id));
     80a:	693b      	ldr	r3, [r7, #16]
     80c:	782a      	ldrb	r2, [r5, #0]
     80e:	4094      	lsls	r4, r2
     810:	43a3      	bics	r3, r4
     812:	613b      	str	r3, [r7, #16]
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
     814:	7832      	ldrb	r2, [r6, #0]
     816:	0152      	lsls	r2, r2, #5
     818:	2360      	movs	r3, #96	; 0x60
     81a:	4013      	ands	r3, r2
			DMAC_CHCTRLB_TRIGSRC(resource_config->peripheral_trigger) | \
     81c:	7872      	ldrb	r2, [r6, #1]
     81e:	0212      	lsls	r2, r2, #8
     820:	21f8      	movs	r1, #248	; 0xf8
     822:	0149      	lsls	r1, r1, #5
     824:	400a      	ands	r2, r1
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
     826:	4313      	orrs	r3, r2
			DMAC_CHCTRLB_TRIGACT(resource_config->trigger_action);
     828:	78b2      	ldrb	r2, [r6, #2]
     82a:	0592      	lsls	r2, r2, #22
     82c:	21c0      	movs	r1, #192	; 0xc0
     82e:	0409      	lsls	r1, r1, #16
     830:	400a      	ands	r2, r1
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
     832:	4313      	orrs	r3, r2
	if(resource_config->event_config.input_action){
     834:	78f1      	ldrb	r1, [r6, #3]
     836:	2900      	cmp	r1, #0
     838:	d004      	beq.n	844 <dma_allocate+0xf8>
	temp_CHCTRLB_reg |= DMAC_CHCTRLB_EVIE | DMAC_CHCTRLB_EVACT(
     83a:	2207      	movs	r2, #7
     83c:	400a      	ands	r2, r1
     83e:	2108      	movs	r1, #8
     840:	430a      	orrs	r2, r1
     842:	4313      	orrs	r3, r2
	if (resource_config->event_config.event_output_enable) {
     844:	7932      	ldrb	r2, [r6, #4]
     846:	2a00      	cmp	r2, #0
     848:	d001      	beq.n	84e <dma_allocate+0x102>
		temp_CHCTRLB_reg |= DMAC_CHCTRLB_EVOE;
     84a:	2210      	movs	r2, #16
     84c:	4313      	orrs	r3, r2
	DMAC->CHCTRLB.reg = temp_CHCTRLB_reg;
     84e:	4a0b      	ldr	r2, [pc, #44]	; (87c <dma_allocate+0x130>)
     850:	6453      	str	r3, [r2, #68]	; 0x44
	cpu_irq_leave_critical();
     852:	4c0e      	ldr	r4, [pc, #56]	; (88c <dma_allocate+0x140>)
     854:	47a0      	blx	r4
#endif

	/** Configure the DMA control,channel registers and descriptors here */
	_dma_set_config(resource, config);

	resource->descriptor = NULL;
     856:	2300      	movs	r3, #0
     858:	61ab      	str	r3, [r5, #24]

	/* Log the DMA resource into the internal DMA resource pool */
	_dma_active_resource[resource->channel_id] = resource;
     85a:	782b      	ldrb	r3, [r5, #0]
     85c:	009b      	lsls	r3, r3, #2
     85e:	4a0c      	ldr	r2, [pc, #48]	; (890 <dma_allocate+0x144>)
     860:	509d      	str	r5, [r3, r2]
     862:	47a0      	blx	r4

	system_interrupt_leave_critical_section();

	return STATUS_OK;
     864:	2000      	movs	r0, #0
}
     866:	bc0c      	pop	{r2, r3}
     868:	4690      	mov	r8, r2
     86a:	4699      	mov	r9, r3
     86c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     86e:	46c0      	nop			; (mov r8, r8)
     870:	000017d5 	.word	0x000017d5
     874:	20000008 	.word	0x20000008
     878:	40000400 	.word	0x40000400
     87c:	41004800 	.word	0x41004800
     880:	200002c0 	.word	0x200002c0
     884:	20000180 	.word	0x20000180
     888:	00000f02 	.word	0x00000f02
     88c:	00001815 	.word	0x00001815
     890:	2000016c 	.word	0x2000016c

00000894 <dma_start_transfer_job>:
 * \retval STATUS_OK The transfer was started successfully
 * \retval STATUS_BUSY The DMA resource was busy and the transfer was not started
 * \retval STATUS_ERR_INVALID_ARG Transfer size is 0 and transfer was not started
 */
enum status_code dma_start_transfer_job(struct dma_resource *resource)
{
     894:	b570      	push	{r4, r5, r6, lr}
     896:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     898:	4b19      	ldr	r3, [pc, #100]	; (900 <dma_start_transfer_job+0x6c>)
     89a:	4798      	blx	r3
	Assert(resource->channel_id != DMA_INVALID_CHANNEL);

	system_interrupt_enter_critical_section();

	/* Check if resource was busy */
	if (resource->job_status == STATUS_BUSY) {
     89c:	7c63      	ldrb	r3, [r4, #17]
     89e:	2b05      	cmp	r3, #5
     8a0:	d008      	beq.n	8b4 <dma_start_transfer_job+0x20>
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
	}

	/* Check if transfer size is valid */
	if (resource->descriptor->BTCNT.reg == 0) {
     8a2:	69a3      	ldr	r3, [r4, #24]
     8a4:	885b      	ldrh	r3, [r3, #2]
     8a6:	b29b      	uxth	r3, r3
     8a8:	2b00      	cmp	r3, #0
     8aa:	d107      	bne.n	8bc <dma_start_transfer_job+0x28>
	cpu_irq_leave_critical();
     8ac:	4b15      	ldr	r3, [pc, #84]	; (904 <dma_start_transfer_job+0x70>)
     8ae:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_ERR_INVALID_ARG;
     8b0:	2017      	movs	r0, #23
	DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;

	system_interrupt_leave_critical_section();

	return STATUS_OK;
}
     8b2:	bd70      	pop	{r4, r5, r6, pc}
     8b4:	4b13      	ldr	r3, [pc, #76]	; (904 <dma_start_transfer_job+0x70>)
     8b6:	4798      	blx	r3
		return STATUS_BUSY;
     8b8:	2005      	movs	r0, #5
     8ba:	e7fa      	b.n	8b2 <dma_start_transfer_job+0x1e>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     8bc:	2640      	movs	r6, #64	; 0x40
     8be:	4b12      	ldr	r3, [pc, #72]	; (908 <dma_start_transfer_job+0x74>)
     8c0:	601e      	str	r6, [r3, #0]
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     8c2:	7822      	ldrb	r2, [r4, #0]
     8c4:	2307      	movs	r3, #7
     8c6:	401a      	ands	r2, r3
     8c8:	4d10      	ldr	r5, [pc, #64]	; (90c <dma_start_transfer_job+0x78>)
     8ca:	213f      	movs	r1, #63	; 0x3f
     8cc:	546a      	strb	r2, [r5, r1]
	DMAC->CHINTENSET.reg = (DMAC_CHINTENSET_MASK & g_chan_interrupt_flag[resource->channel_id]);
     8ce:	7822      	ldrb	r2, [r4, #0]
     8d0:	490f      	ldr	r1, [pc, #60]	; (910 <dma_start_transfer_job+0x7c>)
     8d2:	5c8a      	ldrb	r2, [r1, r2]
     8d4:	4013      	ands	r3, r2
     8d6:	224d      	movs	r2, #77	; 0x4d
     8d8:	54ab      	strb	r3, [r5, r2]
	resource->job_status = STATUS_BUSY;
     8da:	2305      	movs	r3, #5
     8dc:	7463      	strb	r3, [r4, #17]
	memcpy(&descriptor_section[resource->channel_id], resource->descriptor,
     8de:	7820      	ldrb	r0, [r4, #0]
     8e0:	0100      	lsls	r0, r0, #4
     8e2:	4b0c      	ldr	r3, [pc, #48]	; (914 <dma_start_transfer_job+0x80>)
     8e4:	18c0      	adds	r0, r0, r3
     8e6:	69a1      	ldr	r1, [r4, #24]
     8e8:	3a3d      	subs	r2, #61	; 0x3d
     8ea:	4b0b      	ldr	r3, [pc, #44]	; (918 <dma_start_transfer_job+0x84>)
     8ec:	4798      	blx	r3
	DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
     8ee:	5dab      	ldrb	r3, [r5, r6]
     8f0:	2202      	movs	r2, #2
     8f2:	4313      	orrs	r3, r2
     8f4:	55ab      	strb	r3, [r5, r6]
	cpu_irq_leave_critical();
     8f6:	4b03      	ldr	r3, [pc, #12]	; (904 <dma_start_transfer_job+0x70>)
     8f8:	4798      	blx	r3
	return STATUS_OK;
     8fa:	2000      	movs	r0, #0
     8fc:	e7d9      	b.n	8b2 <dma_start_transfer_job+0x1e>
     8fe:	46c0      	nop			; (mov r8, r8)
     900:	000017d5 	.word	0x000017d5
     904:	00001815 	.word	0x00001815
     908:	e000e100 	.word	0xe000e100
     90c:	41004800 	.word	0x41004800
     910:	200001d0 	.word	0x200001d0
     914:	200002c0 	.word	0x200002c0
     918:	0000322d 	.word	0x0000322d

0000091c <dma_descriptor_create>:
 * \param[in] config Pointer to the descriptor configuration structure
 *
 */
void dma_descriptor_create(DmacDescriptor* descriptor,
	struct dma_descriptor_config *config)
{
     91c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Set block transfer control */
	descriptor->BTCTRL.bit.VALID = config->descriptor_valid;
     91e:	780a      	ldrb	r2, [r1, #0]
     920:	8803      	ldrh	r3, [r0, #0]
     922:	2601      	movs	r6, #1
     924:	4032      	ands	r2, r6
     926:	2401      	movs	r4, #1
     928:	43a3      	bics	r3, r4
     92a:	4313      	orrs	r3, r2
     92c:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.EVOSEL = config->event_output_selection;
     92e:	784b      	ldrb	r3, [r1, #1]
     930:	8804      	ldrh	r4, [r0, #0]
     932:	2703      	movs	r7, #3
     934:	403b      	ands	r3, r7
     936:	005b      	lsls	r3, r3, #1
     938:	2206      	movs	r2, #6
     93a:	4394      	bics	r4, r2
     93c:	431c      	orrs	r4, r3
     93e:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.BLOCKACT = config->block_action;
     940:	788d      	ldrb	r5, [r1, #2]
     942:	8804      	ldrh	r4, [r0, #0]
     944:	403d      	ands	r5, r7
     946:	00ed      	lsls	r5, r5, #3
     948:	2318      	movs	r3, #24
     94a:	439c      	bics	r4, r3
     94c:	432c      	orrs	r4, r5
     94e:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.BEATSIZE = config->beat_size;
     950:	78ca      	ldrb	r2, [r1, #3]
     952:	8803      	ldrh	r3, [r0, #0]
     954:	403a      	ands	r2, r7
     956:	0212      	lsls	r2, r2, #8
     958:	4c16      	ldr	r4, [pc, #88]	; (9b4 <dma_descriptor_create+0x98>)
     95a:	4023      	ands	r3, r4
     95c:	4313      	orrs	r3, r2
     95e:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.SRCINC = config->src_increment_enable;
     960:	790b      	ldrb	r3, [r1, #4]
     962:	8804      	ldrh	r4, [r0, #0]
     964:	4033      	ands	r3, r6
     966:	029b      	lsls	r3, r3, #10
     968:	4a13      	ldr	r2, [pc, #76]	; (9b8 <dma_descriptor_create+0x9c>)
     96a:	4014      	ands	r4, r2
     96c:	431c      	orrs	r4, r3
     96e:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.DSTINC = config->dst_increment_enable;
     970:	794d      	ldrb	r5, [r1, #5]
     972:	8804      	ldrh	r4, [r0, #0]
     974:	4035      	ands	r5, r6
     976:	02ed      	lsls	r5, r5, #11
     978:	4b10      	ldr	r3, [pc, #64]	; (9bc <dma_descriptor_create+0xa0>)
     97a:	401c      	ands	r4, r3
     97c:	432c      	orrs	r4, r5
     97e:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.STEPSEL = config->step_selection;
     980:	798a      	ldrb	r2, [r1, #6]
     982:	8803      	ldrh	r3, [r0, #0]
     984:	4032      	ands	r2, r6
     986:	0312      	lsls	r2, r2, #12
     988:	4c0d      	ldr	r4, [pc, #52]	; (9c0 <dma_descriptor_create+0xa4>)
     98a:	4023      	ands	r3, r4
     98c:	4313      	orrs	r3, r2
     98e:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.STEPSIZE = config->step_size;
     990:	79cb      	ldrb	r3, [r1, #7]
     992:	2207      	movs	r2, #7
     994:	401a      	ands	r2, r3
     996:	8803      	ldrh	r3, [r0, #0]
     998:	0352      	lsls	r2, r2, #13
     99a:	04db      	lsls	r3, r3, #19
     99c:	0cdb      	lsrs	r3, r3, #19
     99e:	4313      	orrs	r3, r2
     9a0:	8003      	strh	r3, [r0, #0]

	/* Set transfer size, source address and destination address */
	descriptor->BTCNT.reg = config->block_transfer_count;
     9a2:	890b      	ldrh	r3, [r1, #8]
     9a4:	8043      	strh	r3, [r0, #2]
	descriptor->SRCADDR.reg = config->source_address;
     9a6:	68cb      	ldr	r3, [r1, #12]
     9a8:	6043      	str	r3, [r0, #4]
	descriptor->DSTADDR.reg = config->destination_address;
     9aa:	690b      	ldr	r3, [r1, #16]
     9ac:	6083      	str	r3, [r0, #8]

	/* Set next transfer descriptor address */
	descriptor->DESCADDR.reg = config->next_descriptor_address;
     9ae:	694b      	ldr	r3, [r1, #20]
     9b0:	60c3      	str	r3, [r0, #12]
}
     9b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9b4:	fffffcff 	.word	0xfffffcff
     9b8:	fffffbff 	.word	0xfffffbff
     9bc:	fffff7ff 	.word	0xfffff7ff
     9c0:	ffffefff 	.word	0xffffefff

000009c4 <dma_add_descriptor>:
enum status_code dma_add_descriptor(struct dma_resource *resource,
		DmacDescriptor* descriptor)
{
	DmacDescriptor* desc = resource->descriptor;

	if (resource->job_status == STATUS_BUSY) {
     9c4:	7c42      	ldrb	r2, [r0, #17]
		return STATUS_BUSY;
     9c6:	2305      	movs	r3, #5
	if (resource->job_status == STATUS_BUSY) {
     9c8:	2a05      	cmp	r2, #5
     9ca:	d00b      	beq.n	9e4 <dma_add_descriptor+0x20>
	DmacDescriptor* desc = resource->descriptor;
     9cc:	6983      	ldr	r3, [r0, #24]
	}

	/* Look up for an empty space for the descriptor */
	if (desc == NULL) {
     9ce:	2b00      	cmp	r3, #0
     9d0:	d00a      	beq.n	9e8 <dma_add_descriptor+0x24>
		resource->descriptor = descriptor;
	} else {
		/* Looking for end of descriptor link */
		while(desc->DESCADDR.reg != 0) {
     9d2:	68da      	ldr	r2, [r3, #12]
     9d4:	2a00      	cmp	r2, #0
     9d6:	d003      	beq.n	9e0 <dma_add_descriptor+0x1c>
			desc = (DmacDescriptor*)(desc->DESCADDR.reg);
     9d8:	68db      	ldr	r3, [r3, #12]
		while(desc->DESCADDR.reg != 0) {
     9da:	68da      	ldr	r2, [r3, #12]
     9dc:	2a00      	cmp	r2, #0
     9de:	d1fb      	bne.n	9d8 <dma_add_descriptor+0x14>
		}

		/* Set to the end of descriptor list */
		desc->DESCADDR.reg = (uint32_t)descriptor;
     9e0:	60d9      	str	r1, [r3, #12]
	}

	return STATUS_OK;
     9e2:	2300      	movs	r3, #0
}
     9e4:	0018      	movs	r0, r3
     9e6:	4770      	bx	lr
		resource->descriptor = descriptor;
     9e8:	6181      	str	r1, [r0, #24]
	return STATUS_OK;
     9ea:	2300      	movs	r3, #0
     9ec:	e7fa      	b.n	9e4 <dma_add_descriptor+0x20>
	...

000009f0 <i2c_slave_init>:
 */
enum status_code i2c_slave_init(
		struct i2c_slave_module *const module,
		Sercom *const hw,
		const struct i2c_slave_config *const config)
{
     9f0:	b5f0      	push	{r4, r5, r6, r7, lr}
     9f2:	46ce      	mov	lr, r9
     9f4:	4647      	mov	r7, r8
     9f6:	b580      	push	{r7, lr}
     9f8:	b083      	sub	sp, #12
     9fa:	0005      	movs	r5, r0
     9fc:	000c      	movs	r4, r1
     9fe:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     a00:	6029      	str	r1, [r5, #0]

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);

	/* Check if module is enabled */
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_ENABLE) {
     a02:	680b      	ldr	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     a04:	201c      	movs	r0, #28
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_ENABLE) {
     a06:	079b      	lsls	r3, r3, #30
     a08:	d504      	bpl.n	a14 <i2c_slave_init+0x24>
	/* Set SERCOM module to operate in I2C slave mode */
	i2c_hw->CTRLA.reg = SERCOM_I2CS_CTRLA_MODE(0x4);

	/* Set config and return status */
	return _i2c_slave_set_config(module, config);
}
     a0a:	b003      	add	sp, #12
     a0c:	bc0c      	pop	{r2, r3}
     a0e:	4690      	mov	r8, r2
     a10:	4699      	mov	r9, r3
     a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_SWRST) {
     a14:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     a16:	3817      	subs	r0, #23
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_SWRST) {
     a18:	07db      	lsls	r3, r3, #31
     a1a:	d4f6      	bmi.n	a0a <i2c_slave_init+0x1a>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     a1c:	0008      	movs	r0, r1
     a1e:	4b4d      	ldr	r3, [pc, #308]	; (b54 <i2c_slave_init+0x164>)
     a20:	4699      	mov	r9, r3
     a22:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
     a24:	4a4c      	ldr	r2, [pc, #304]	; (b58 <i2c_slave_init+0x168>)
     a26:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     a28:	1c83      	adds	r3, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     a2a:	2701      	movs	r7, #1
     a2c:	46b8      	mov	r8, r7
     a2e:	409f      	lsls	r7, r3
     a30:	003b      	movs	r3, r7
     a32:	430b      	orrs	r3, r1
     a34:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     a36:	a901      	add	r1, sp, #4
     a38:	7e73      	ldrb	r3, [r6, #25]
     a3a:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     a3c:	300e      	adds	r0, #14
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     a3e:	b2c3      	uxtb	r3, r0
     a40:	001f      	movs	r7, r3
     a42:	0018      	movs	r0, r3
     a44:	4b45      	ldr	r3, [pc, #276]	; (b5c <i2c_slave_init+0x16c>)
     a46:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     a48:	0038      	movs	r0, r7
     a4a:	4b45      	ldr	r3, [pc, #276]	; (b60 <i2c_slave_init+0x170>)
     a4c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     a4e:	7e70      	ldrb	r0, [r6, #25]
     a50:	2100      	movs	r1, #0
     a52:	4b44      	ldr	r3, [pc, #272]	; (b64 <i2c_slave_init+0x174>)
     a54:	4798      	blx	r3
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     a56:	6828      	ldr	r0, [r5, #0]
     a58:	47c8      	blx	r9
     a5a:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _i2c_slave_interrupt_handler);
     a5c:	4942      	ldr	r1, [pc, #264]	; (b68 <i2c_slave_init+0x178>)
     a5e:	4b43      	ldr	r3, [pc, #268]	; (b6c <i2c_slave_init+0x17c>)
     a60:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     a62:	00bf      	lsls	r7, r7, #2
     a64:	4b42      	ldr	r3, [pc, #264]	; (b70 <i2c_slave_init+0x180>)
     a66:	50fd      	str	r5, [r7, r3]
	module->registered_callback = 0;
     a68:	2300      	movs	r3, #0
     a6a:	2224      	movs	r2, #36	; 0x24
     a6c:	54ab      	strb	r3, [r5, r2]
	module->enabled_callback = 0;
     a6e:	3201      	adds	r2, #1
     a70:	54ab      	strb	r3, [r5, r2]
	module->buffer_length = 0;
     a72:	84eb      	strh	r3, [r5, #38]	; 0x26
	module->nack_on_address = config->enable_nack_on_address;
     a74:	7e33      	ldrb	r3, [r6, #24]
     a76:	726b      	strb	r3, [r5, #9]
	i2c_hw->CTRLA.reg = SERCOM_I2CS_CTRLA_MODE(0x4);
     a78:	2310      	movs	r3, #16
     a7a:	6023      	str	r3, [r4, #0]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     a7c:	682c      	ldr	r4, [r5, #0]
	module->buffer_timeout = config->buffer_timeout;
     a7e:	8933      	ldrh	r3, [r6, #8]
     a80:	80eb      	strh	r3, [r5, #6]
	module->ten_bit_address = config->ten_bit_address;
     a82:	7c33      	ldrb	r3, [r6, #16]
     a84:	722b      	strb	r3, [r5, #8]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     a86:	2380      	movs	r3, #128	; 0x80
     a88:	466a      	mov	r2, sp
     a8a:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     a8c:	2300      	movs	r3, #0
     a8e:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     a90:	466b      	mov	r3, sp
     a92:	4642      	mov	r2, r8
     a94:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     a96:	2300      	movs	r3, #0
     a98:	466a      	mov	r2, sp
     a9a:	70d3      	strb	r3, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     a9c:	69f0      	ldr	r0, [r6, #28]
	uint32_t pad1 = config->pinmux_pad1;
     a9e:	6a35      	ldr	r5, [r6, #32]
	if (pad0 == PINMUX_DEFAULT) {
     aa0:	2800      	cmp	r0, #0
     aa2:	d04b      	beq.n	b3c <i2c_slave_init+0x14c>
	pin_conf.mux_position = pad0 & 0xFFFF;
     aa4:	466b      	mov	r3, sp
     aa6:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     aa8:	2302      	movs	r3, #2
     aaa:	466a      	mov	r2, sp
     aac:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     aae:	0c00      	lsrs	r0, r0, #16
     ab0:	b2c0      	uxtb	r0, r0
     ab2:	4669      	mov	r1, sp
     ab4:	4b2f      	ldr	r3, [pc, #188]	; (b74 <i2c_slave_init+0x184>)
     ab6:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     ab8:	2d00      	cmp	r5, #0
     aba:	d044      	beq.n	b46 <i2c_slave_init+0x156>
	pin_conf.mux_position = pad1 & 0xFFFF;
     abc:	466b      	mov	r3, sp
     abe:	701d      	strb	r5, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     ac0:	2302      	movs	r3, #2
     ac2:	466a      	mov	r2, sp
     ac4:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     ac6:	0c2d      	lsrs	r5, r5, #16
     ac8:	b2e8      	uxtb	r0, r5
     aca:	4669      	mov	r1, sp
     acc:	4b29      	ldr	r3, [pc, #164]	; (b74 <i2c_slave_init+0x184>)
     ace:	4798      	blx	r3
	if (config->run_in_standby || system_is_debugger_present()) {
     ad0:	7eb3      	ldrb	r3, [r6, #26]
		tmp_ctrla = SERCOM_I2CS_CTRLA_RUNSTDBY;
     ad2:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     ad4:	2b00      	cmp	r3, #0
     ad6:	d104      	bne.n	ae2 <i2c_slave_init+0xf2>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     ad8:	4b27      	ldr	r3, [pc, #156]	; (b78 <i2c_slave_init+0x188>)
     ada:	789b      	ldrb	r3, [r3, #2]
     adc:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CS_CTRLA_RUNSTDBY;
     ade:	0fdb      	lsrs	r3, r3, #31
     ae0:	01da      	lsls	r2, r3, #7
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_SLAVE_SPEED_HIGH_SPEED)) {
     ae2:	2325      	movs	r3, #37	; 0x25
     ae4:	5cf3      	ldrb	r3, [r6, r3]
     ae6:	2b00      	cmp	r3, #0
     ae8:	d104      	bne.n	af4 <i2c_slave_init+0x104>
     aea:	2380      	movs	r3, #128	; 0x80
     aec:	049b      	lsls	r3, r3, #18
     aee:	6971      	ldr	r1, [r6, #20]
     af0:	4299      	cmp	r1, r3
     af2:	d102      	bne.n	afa <i2c_slave_init+0x10a>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     af4:	2380      	movs	r3, #128	; 0x80
     af6:	051b      	lsls	r3, r3, #20
     af8:	431a      	orrs	r2, r3
	i2c_hw->CTRLA.reg |= tmp_ctrla;
     afa:	6820      	ldr	r0, [r4, #0]
     afc:	6873      	ldr	r3, [r6, #4]
     afe:	6971      	ldr	r1, [r6, #20]
     b00:	430b      	orrs	r3, r1
			(config->scl_low_timeout << SERCOM_I2CS_CTRLA_LOWTOUTEN_Pos) |
     b02:	2124      	movs	r1, #36	; 0x24
     b04:	5c71      	ldrb	r1, [r6, r1]
     b06:	0789      	lsls	r1, r1, #30
	i2c_hw->CTRLA.reg |= tmp_ctrla;
     b08:	430b      	orrs	r3, r1
			(config->slave_scl_low_extend_timeout << SERCOM_I2CS_CTRLA_SEXTTOEN_Pos));
     b0a:	2126      	movs	r1, #38	; 0x26
     b0c:	5c71      	ldrb	r1, [r6, r1]
     b0e:	05c9      	lsls	r1, r1, #23
	i2c_hw->CTRLA.reg |= tmp_ctrla;
     b10:	430b      	orrs	r3, r1
     b12:	4303      	orrs	r3, r0
     b14:	4313      	orrs	r3, r2
     b16:	6023      	str	r3, [r4, #0]
	i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_SMEN | config->address_mode;
     b18:	8972      	ldrh	r2, [r6, #10]
     b1a:	2380      	movs	r3, #128	; 0x80
     b1c:	005b      	lsls	r3, r3, #1
     b1e:	4313      	orrs	r3, r2
     b20:	6063      	str	r3, [r4, #4]
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
     b22:	89b3      	ldrh	r3, [r6, #12]
     b24:	005b      	lsls	r3, r3, #1
			config->address_mask << SERCOM_I2CS_ADDR_ADDRMASK_Pos |
     b26:	89f2      	ldrh	r2, [r6, #14]
     b28:	0452      	lsls	r2, r2, #17
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
     b2a:	4313      	orrs	r3, r2
			config->enable_general_call_address << SERCOM_I2CS_ADDR_GENCEN_Pos;
     b2c:	7c72      	ldrb	r2, [r6, #17]
			config->ten_bit_address << SERCOM_I2CS_ADDR_TENBITEN_Pos |
     b2e:	4313      	orrs	r3, r2
     b30:	7c32      	ldrb	r2, [r6, #16]
     b32:	03d2      	lsls	r2, r2, #15
     b34:	4313      	orrs	r3, r2
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
     b36:	6263      	str	r3, [r4, #36]	; 0x24
	return _i2c_slave_set_config(module, config);
     b38:	2000      	movs	r0, #0
     b3a:	e766      	b.n	a0a <i2c_slave_init+0x1a>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     b3c:	2100      	movs	r1, #0
     b3e:	0020      	movs	r0, r4
     b40:	4b0e      	ldr	r3, [pc, #56]	; (b7c <i2c_slave_init+0x18c>)
     b42:	4798      	blx	r3
     b44:	e7ae      	b.n	aa4 <i2c_slave_init+0xb4>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     b46:	2101      	movs	r1, #1
     b48:	0020      	movs	r0, r4
     b4a:	4b0c      	ldr	r3, [pc, #48]	; (b7c <i2c_slave_init+0x18c>)
     b4c:	4798      	blx	r3
     b4e:	0005      	movs	r5, r0
     b50:	e7b4      	b.n	abc <i2c_slave_init+0xcc>
     b52:	46c0      	nop			; (mov r8, r8)
     b54:	00000fa1 	.word	0x00000fa1
     b58:	40000400 	.word	0x40000400
     b5c:	00001e69 	.word	0x00001e69
     b60:	00001ddd 	.word	0x00001ddd
     b64:	00000e95 	.word	0x00000e95
     b68:	00000bed 	.word	0x00000bed
     b6c:	00000fdd 	.word	0x00000fdd
     b70:	20000310 	.word	0x20000310
     b74:	00001f61 	.word	0x00001f61
     b78:	41002000 	.word	0x41002000
     b7c:	00000ee1 	.word	0x00000ee1

00000b80 <i2c_slave_register_callback>:
 */
void i2c_slave_register_callback(
		struct i2c_slave_module *const module,
		i2c_slave_callback_t callback,
		enum i2c_slave_callback callback_type)
{
     b80:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback. */
	module->callbacks[callback_type] = callback;
     b82:	1c93      	adds	r3, r2, #2
     b84:	009b      	lsls	r3, r3, #2
     b86:	18c3      	adds	r3, r0, r3
     b88:	6059      	str	r1, [r3, #4]

	/* Set corresponding bit to set callback as initiated. */
	module->registered_callback |= (1 << callback_type);
     b8a:	2424      	movs	r4, #36	; 0x24
     b8c:	5d03      	ldrb	r3, [r0, r4]
     b8e:	2101      	movs	r1, #1
     b90:	4091      	lsls	r1, r2
     b92:	430b      	orrs	r3, r1
     b94:	b2db      	uxtb	r3, r3
     b96:	5503      	strb	r3, [r0, r4]
}
     b98:	bd10      	pop	{r4, pc}

00000b9a <i2c_slave_read_packet_job>:
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy doing async operation. */
	if (module->buffer_remaining > 0) {
     b9a:	8d02      	ldrh	r2, [r0, #40]	; 0x28
		return STATUS_BUSY;
     b9c:	2305      	movs	r3, #5
	if (module->buffer_remaining > 0) {
     b9e:	2a00      	cmp	r2, #0
     ba0:	d001      	beq.n	ba6 <i2c_slave_read_packet_job+0xc>
	i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH |
			SERCOM_I2CS_INTFLAG_DRDY | SERCOM_I2CS_INTFLAG_PREC;

	/* Read will begin when master initiates the transfer */
	return STATUS_OK;
}
     ba2:	0018      	movs	r0, r3
     ba4:	4770      	bx	lr
	module->buffer           = packet->data;
     ba6:	684b      	ldr	r3, [r1, #4]
     ba8:	62c3      	str	r3, [r0, #44]	; 0x2c
	module->buffer_remaining = packet->data_length;
     baa:	880b      	ldrh	r3, [r1, #0]
     bac:	8503      	strh	r3, [r0, #40]	; 0x28
	module->buffer_length    = packet->data_length;
     bae:	880b      	ldrh	r3, [r1, #0]
     bb0:	84c3      	strh	r3, [r0, #38]	; 0x26
	module->status           = STATUS_BUSY;
     bb2:	3205      	adds	r2, #5
     bb4:	2331      	movs	r3, #49	; 0x31
     bb6:	54c2      	strb	r2, [r0, r3]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     bb8:	6803      	ldr	r3, [r0, #0]
	i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH |
     bba:	3202      	adds	r2, #2
     bbc:	759a      	strb	r2, [r3, #22]
	return STATUS_OK;
     bbe:	2300      	movs	r3, #0
     bc0:	e7ef      	b.n	ba2 <i2c_slave_read_packet_job+0x8>

00000bc2 <i2c_slave_write_packet_job>:
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy doing async operation. */
	if (module->buffer_remaining > 0) {
     bc2:	8d02      	ldrh	r2, [r0, #40]	; 0x28
		return STATUS_BUSY;
     bc4:	2305      	movs	r3, #5
	if (module->buffer_remaining > 0) {
     bc6:	2a00      	cmp	r2, #0
     bc8:	d001      	beq.n	bce <i2c_slave_write_packet_job+0xc>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
	i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH |
			SERCOM_I2CS_INTFLAG_DRDY | SERCOM_I2CS_INTFLAG_PREC;

	return STATUS_OK;
}
     bca:	0018      	movs	r0, r3
     bcc:	4770      	bx	lr
	module->buffer           = packet->data;
     bce:	684b      	ldr	r3, [r1, #4]
     bd0:	62c3      	str	r3, [r0, #44]	; 0x2c
	module->buffer_remaining = packet->data_length;
     bd2:	880b      	ldrh	r3, [r1, #0]
     bd4:	8503      	strh	r3, [r0, #40]	; 0x28
	module->buffer_length    = packet->data_length;
     bd6:	880b      	ldrh	r3, [r1, #0]
     bd8:	84c3      	strh	r3, [r0, #38]	; 0x26
	module->status           = STATUS_BUSY;
     bda:	3205      	adds	r2, #5
     bdc:	2331      	movs	r3, #49	; 0x31
     bde:	54c2      	strb	r2, [r0, r3]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     be0:	6803      	ldr	r3, [r0, #0]
	i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH |
     be2:	3202      	adds	r2, #2
     be4:	759a      	strb	r2, [r3, #22]
	return STATUS_OK;
     be6:	2300      	movs	r3, #0
     be8:	e7ef      	b.n	bca <i2c_slave_write_packet_job+0x8>
	...

00000bec <_i2c_slave_interrupt_handler>:
 *
 * \param[in] instance Sercom instance that triggered the interrupt
 */
void _i2c_slave_interrupt_handler(
		uint8_t instance)
{
     bec:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling. */
	struct i2c_slave_module *module =
     bee:	0080      	lsls	r0, r0, #2
     bf0:	4b9b      	ldr	r3, [pc, #620]	; (e60 <_i2c_slave_interrupt_handler+0x274>)
     bf2:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_slave_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     bf4:	6825      	ldr	r5, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask = module->enabled_callback;
     bf6:	2325      	movs	r3, #37	; 0x25
     bf8:	5ce3      	ldrb	r3, [r4, r3]
	callback_mask &= module->registered_callback;
     bfa:	2224      	movs	r2, #36	; 0x24
     bfc:	5ca6      	ldrb	r6, [r4, r2]
     bfe:	401e      	ands	r6, r3


	if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_AMATCH) {
     c00:	7e2b      	ldrb	r3, [r5, #24]
     c02:	079b      	lsls	r3, r3, #30
     c04:	d400      	bmi.n	c08 <_i2c_slave_interrupt_handler+0x1c>
     c06:	e095      	b.n	d34 <_i2c_slave_interrupt_handler+0x148>
	/* Address match */
		/* Check if last transfer is done - repeated start */
		if (module->buffer_length != module->buffer_remaining &&
     c08:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     c0a:	b29b      	uxth	r3, r3
     c0c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
     c0e:	4293      	cmp	r3, r2
     c10:	d00d      	beq.n	c2e <_i2c_slave_interrupt_handler+0x42>
				module->transfer_direction == I2C_TRANSFER_WRITE) {
     c12:	2330      	movs	r3, #48	; 0x30
     c14:	5ce3      	ldrb	r3, [r4, r3]
		if (module->buffer_length != module->buffer_remaining &&
     c16:	2b00      	cmp	r3, #0
     c18:	d109      	bne.n	c2e <_i2c_slave_interrupt_handler+0x42>

			module->status = STATUS_OK;
     c1a:	2231      	movs	r2, #49	; 0x31
     c1c:	54a3      	strb	r3, [r4, r2]
			module->buffer_length = 0;
     c1e:	84e3      	strh	r3, [r4, #38]	; 0x26
			module->buffer_remaining = 0;
     c20:	8523      	strh	r3, [r4, #40]	; 0x28

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_COMPLETE))) {
     c22:	07b3      	lsls	r3, r6, #30
     c24:	d50b      	bpl.n	c3e <_i2c_slave_interrupt_handler+0x52>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_COMPLETE](module);
     c26:	6923      	ldr	r3, [r4, #16]
     c28:	0020      	movs	r0, r4
     c2a:	4798      	blx	r3
     c2c:	e007      	b.n	c3e <_i2c_slave_interrupt_handler+0x52>
			}
		} else if (module->buffer_length != module->buffer_remaining &&
     c2e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     c30:	b29b      	uxth	r3, r3
     c32:	429a      	cmp	r2, r3
     c34:	d003      	beq.n	c3e <_i2c_slave_interrupt_handler+0x52>
				module->transfer_direction == I2C_TRANSFER_READ) {
     c36:	2330      	movs	r3, #48	; 0x30
     c38:	5ce3      	ldrb	r3, [r4, r3]
		} else if (module->buffer_length != module->buffer_remaining &&
     c3a:	2b01      	cmp	r3, #1
     c3c:	d022      	beq.n	c84 <_i2c_slave_interrupt_handler+0x98>
			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))) {
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
			}
		}

		if (i2c_hw->STATUS.reg & (SERCOM_I2CS_STATUS_BUSERR |
     c3e:	8b6a      	ldrh	r2, [r5, #26]
     c40:	2343      	movs	r3, #67	; 0x43
     c42:	421a      	tst	r2, r3
     c44:	d004      	beq.n	c50 <_i2c_slave_interrupt_handler+0x64>
				SERCOM_I2CS_STATUS_COLL | SERCOM_I2CS_STATUS_LOWTOUT)) {
			/* An error occurred in last packet transfer */
			module->status = STATUS_ERR_IO;
     c46:	2210      	movs	r2, #16
     c48:	3b12      	subs	r3, #18
     c4a:	54e2      	strb	r2, [r4, r3]

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER))) {
     c4c:	06b3      	lsls	r3, r6, #26
     c4e:	d424      	bmi.n	c9a <_i2c_slave_interrupt_handler+0xae>
				module->callbacks[I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER](module);
			}
		}
		if (module->nack_on_address) {
     c50:	7a63      	ldrb	r3, [r4, #9]
     c52:	2b00      	cmp	r3, #0
     c54:	d125      	bne.n	ca2 <_i2c_slave_interrupt_handler+0xb6>
			/* NACK address, workaround 13574 */
			_i2c_slave_set_ctrlb_ackact(module, false);
		} else if (i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_DIR) {
     c56:	8b6b      	ldrh	r3, [r5, #26]
     c58:	071b      	lsls	r3, r3, #28
     c5a:	d54a      	bpl.n	cf2 <_i2c_slave_interrupt_handler+0x106>
			/* Set transfer direction in module instance */
			module->transfer_direction = I2C_TRANSFER_READ;
     c5c:	2201      	movs	r2, #1
     c5e:	2330      	movs	r3, #48	; 0x30
     c60:	54e2      	strb	r2, [r4, r3]

			/* Read request from master */
			if (callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST)) {
     c62:	0773      	lsls	r3, r6, #29
     c64:	d438      	bmi.n	cd8 <_i2c_slave_interrupt_handler+0xec>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_REQUEST](module);
			}

			if (module->buffer_length == 0) {
     c66:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     c68:	b29b      	uxth	r3, r3
     c6a:	2b00      	cmp	r3, #0
     c6c:	d138      	bne.n	ce0 <_i2c_slave_interrupt_handler+0xf4>
		bool send_ack)
{
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     c6e:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     c70:	4b7c      	ldr	r3, [pc, #496]	; (e64 <_i2c_slave_interrupt_handler+0x278>)
     c72:	4798      	blx	r3

#if (SAMD20 || SAMD21 || SAMD09 || SAMD10 || SAMD11 || SAML21 || SAMDA1 ||  \
		SAML22 || SAMC20 || SAMC21 || SAMHA1 || SAMR30)
	/* Workaround, Following two write are atomic */
	system_interrupt_enter_critical_section();
	i2c_hw->STATUS.reg = 0;
     c74:	2300      	movs	r3, #0
     c76:	836b      	strh	r3, [r5, #26]

	if (send_ack == true) {
		i2c_hw->CTRLB.reg = 0;
	}
	else {
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     c78:	2380      	movs	r3, #128	; 0x80
     c7a:	02db      	lsls	r3, r3, #11
     c7c:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     c7e:	4b7a      	ldr	r3, [pc, #488]	; (e68 <_i2c_slave_interrupt_handler+0x27c>)
     c80:	4798      	blx	r3
     c82:	e018      	b.n	cb6 <_i2c_slave_interrupt_handler+0xca>
			module->status = STATUS_OK;
     c84:	2300      	movs	r3, #0
     c86:	2231      	movs	r2, #49	; 0x31
     c88:	54a3      	strb	r3, [r4, r2]
			module->buffer_length = 0;
     c8a:	84e3      	strh	r3, [r4, #38]	; 0x26
			module->buffer_remaining = 0;
     c8c:	8523      	strh	r3, [r4, #40]	; 0x28
			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))) {
     c8e:	07f3      	lsls	r3, r6, #31
     c90:	d5d5      	bpl.n	c3e <_i2c_slave_interrupt_handler+0x52>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
     c92:	68e3      	ldr	r3, [r4, #12]
     c94:	0020      	movs	r0, r4
     c96:	4798      	blx	r3
     c98:	e7d1      	b.n	c3e <_i2c_slave_interrupt_handler+0x52>
				module->callbacks[I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER](module);
     c9a:	6a23      	ldr	r3, [r4, #32]
     c9c:	0020      	movs	r0, r4
     c9e:	4798      	blx	r3
     ca0:	e7d6      	b.n	c50 <_i2c_slave_interrupt_handler+0x64>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     ca2:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     ca4:	4b6f      	ldr	r3, [pc, #444]	; (e64 <_i2c_slave_interrupt_handler+0x278>)
     ca6:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     ca8:	2300      	movs	r3, #0
     caa:	836b      	strh	r3, [r5, #26]
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     cac:	2380      	movs	r3, #128	; 0x80
     cae:	02db      	lsls	r3, r3, #11
     cb0:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     cb2:	4b6d      	ldr	r3, [pc, #436]	; (e68 <_i2c_slave_interrupt_handler+0x27c>)
     cb4:	4798      	blx	r3
		struct i2c_slave_module *const module)
{
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     cb6:	6823      	ldr	r3, [r4, #0]
	/*
	 * Below code instead i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_CMD(0x3);
	 * CMD=0x3 clears all interrupts, so to keep the result similar
	 * PREC is cleared if it was set
	 */
	if (i2c_hw->INTFLAG.bit.PREC) {
     cb8:	7e1a      	ldrb	r2, [r3, #24]
     cba:	07d2      	lsls	r2, r2, #31
     cbc:	d501      	bpl.n	cc2 <_i2c_slave_interrupt_handler+0xd6>
		i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
     cbe:	2201      	movs	r2, #1
     cc0:	761a      	strb	r2, [r3, #24]
	}
	i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_AMATCH;
     cc2:	2202      	movs	r2, #2
     cc4:	761a      	strb	r2, [r3, #24]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     cc6:	6824      	ldr	r4, [r4, #0]
	cpu_irq_enter_critical();
     cc8:	4b66      	ldr	r3, [pc, #408]	; (e64 <_i2c_slave_interrupt_handler+0x278>)
     cca:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     ccc:	2300      	movs	r3, #0
     cce:	8363      	strh	r3, [r4, #26]
		i2c_hw->CTRLB.reg = 0;
     cd0:	6063      	str	r3, [r4, #4]
	cpu_irq_leave_critical();
     cd2:	4b65      	ldr	r3, [pc, #404]	; (e68 <_i2c_slave_interrupt_handler+0x27c>)
     cd4:	4798      	blx	r3
			} else {
				_i2c_slave_write(module);
			}
		}
	}
}
     cd6:	bd70      	pop	{r4, r5, r6, pc}
				module->callbacks[I2C_SLAVE_CALLBACK_READ_REQUEST](module);
     cd8:	6963      	ldr	r3, [r4, #20]
     cda:	0020      	movs	r0, r4
     cdc:	4798      	blx	r3
     cde:	e7c2      	b.n	c66 <_i2c_slave_interrupt_handler+0x7a>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     ce0:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     ce2:	4b60      	ldr	r3, [pc, #384]	; (e64 <_i2c_slave_interrupt_handler+0x278>)
     ce4:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     ce6:	2300      	movs	r3, #0
     ce8:	836b      	strh	r3, [r5, #26]
		i2c_hw->CTRLB.reg = 0;
     cea:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     cec:	4b5e      	ldr	r3, [pc, #376]	; (e68 <_i2c_slave_interrupt_handler+0x27c>)
     cee:	4798      	blx	r3
     cf0:	e7e1      	b.n	cb6 <_i2c_slave_interrupt_handler+0xca>
			module->transfer_direction = I2C_TRANSFER_WRITE;
     cf2:	2200      	movs	r2, #0
     cf4:	2330      	movs	r3, #48	; 0x30
     cf6:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_REQUEST)) {
     cf8:	0733      	lsls	r3, r6, #28
     cfa:	d40e      	bmi.n	d1a <_i2c_slave_interrupt_handler+0x12e>
			if (module->buffer_length == 0) {
     cfc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     cfe:	b29b      	uxth	r3, r3
     d00:	2b00      	cmp	r3, #0
     d02:	d10e      	bne.n	d22 <_i2c_slave_interrupt_handler+0x136>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     d04:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     d06:	4b57      	ldr	r3, [pc, #348]	; (e64 <_i2c_slave_interrupt_handler+0x278>)
     d08:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     d0a:	2300      	movs	r3, #0
     d0c:	836b      	strh	r3, [r5, #26]
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     d0e:	2380      	movs	r3, #128	; 0x80
     d10:	02db      	lsls	r3, r3, #11
     d12:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     d14:	4b54      	ldr	r3, [pc, #336]	; (e68 <_i2c_slave_interrupt_handler+0x27c>)
     d16:	4798      	blx	r3
     d18:	e7cd      	b.n	cb6 <_i2c_slave_interrupt_handler+0xca>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_REQUEST](module);
     d1a:	69a3      	ldr	r3, [r4, #24]
     d1c:	0020      	movs	r0, r4
     d1e:	4798      	blx	r3
     d20:	e7ec      	b.n	cfc <_i2c_slave_interrupt_handler+0x110>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     d22:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     d24:	4b4f      	ldr	r3, [pc, #316]	; (e64 <_i2c_slave_interrupt_handler+0x278>)
     d26:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     d28:	2300      	movs	r3, #0
     d2a:	836b      	strh	r3, [r5, #26]
		i2c_hw->CTRLB.reg = 0;
     d2c:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     d2e:	4b4e      	ldr	r3, [pc, #312]	; (e68 <_i2c_slave_interrupt_handler+0x27c>)
     d30:	4798      	blx	r3
     d32:	e7c0      	b.n	cb6 <_i2c_slave_interrupt_handler+0xca>
	} else if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC) {
     d34:	7e2b      	ldrb	r3, [r5, #24]
     d36:	07db      	lsls	r3, r3, #31
     d38:	d52e      	bpl.n	d98 <_i2c_slave_interrupt_handler+0x1ac>
		i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
     d3a:	2301      	movs	r3, #1
     d3c:	762b      	strb	r3, [r5, #24]
		i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_PREC | SERCOM_I2CS_INTFLAG_DRDY;
     d3e:	3304      	adds	r3, #4
     d40:	752b      	strb	r3, [r5, #20]
		if (!((module->enabled_callback & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST))
     d42:	3320      	adds	r3, #32
     d44:	5ce3      	ldrb	r3, [r4, r3]
     d46:	075b      	lsls	r3, r3, #29
     d48:	d405      	bmi.n	d56 <_i2c_slave_interrupt_handler+0x16a>
				|| (module->enabled_callback == (1 << I2C_SLAVE_CALLBACK_WRITE_REQUEST)))) {
     d4a:	2325      	movs	r3, #37	; 0x25
     d4c:	5ce3      	ldrb	r3, [r4, r3]
		if (!((module->enabled_callback & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST))
     d4e:	2b08      	cmp	r3, #8
     d50:	d001      	beq.n	d56 <_i2c_slave_interrupt_handler+0x16a>
			i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_AMATCH;
     d52:	2302      	movs	r3, #2
     d54:	752b      	strb	r3, [r5, #20]
		if (!(module->status == STATUS_ERR_OVERFLOW || module->status == STATUS_ERR_IO)) {
     d56:	2331      	movs	r3, #49	; 0x31
     d58:	5ce3      	ldrb	r3, [r4, r3]
     d5a:	2b1e      	cmp	r3, #30
     d5c:	d0bb      	beq.n	cd6 <_i2c_slave_interrupt_handler+0xea>
     d5e:	2331      	movs	r3, #49	; 0x31
     d60:	5ce3      	ldrb	r3, [r4, r3]
     d62:	2b10      	cmp	r3, #16
     d64:	d0b7      	beq.n	cd6 <_i2c_slave_interrupt_handler+0xea>
			module->status = STATUS_OK;
     d66:	2300      	movs	r3, #0
     d68:	2231      	movs	r2, #49	; 0x31
     d6a:	54a3      	strb	r3, [r4, r2]
			module->buffer_length = 0;
     d6c:	84e3      	strh	r3, [r4, #38]	; 0x26
			module->buffer_remaining = 0;
     d6e:	8523      	strh	r3, [r4, #40]	; 0x28
			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_COMPLETE))
     d70:	07b3      	lsls	r3, r6, #30
     d72:	d503      	bpl.n	d7c <_i2c_slave_interrupt_handler+0x190>
					&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     d74:	2330      	movs	r3, #48	; 0x30
     d76:	5ce3      	ldrb	r3, [r4, r3]
     d78:	2b00      	cmp	r3, #0
     d7a:	d009      	beq.n	d90 <_i2c_slave_interrupt_handler+0x1a4>
			} else if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))
     d7c:	07f3      	lsls	r3, r6, #31
     d7e:	d5aa      	bpl.n	cd6 <_i2c_slave_interrupt_handler+0xea>
					&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     d80:	2330      	movs	r3, #48	; 0x30
     d82:	5ce3      	ldrb	r3, [r4, r3]
     d84:	2b01      	cmp	r3, #1
     d86:	d1a6      	bne.n	cd6 <_i2c_slave_interrupt_handler+0xea>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
     d88:	68e3      	ldr	r3, [r4, #12]
     d8a:	0020      	movs	r0, r4
     d8c:	4798      	blx	r3
     d8e:	e7a2      	b.n	cd6 <_i2c_slave_interrupt_handler+0xea>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_COMPLETE](module);
     d90:	6923      	ldr	r3, [r4, #16]
     d92:	0020      	movs	r0, r4
     d94:	4798      	blx	r3
     d96:	e79e      	b.n	cd6 <_i2c_slave_interrupt_handler+0xea>
	} else if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY) {
     d98:	7e2b      	ldrb	r3, [r5, #24]
     d9a:	075b      	lsls	r3, r3, #29
     d9c:	d59b      	bpl.n	cd6 <_i2c_slave_interrupt_handler+0xea>
		if (module->buffer_remaining <= 0 ||
     d9e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     da0:	2b00      	cmp	r3, #0
     da2:	d01e      	beq.n	de2 <_i2c_slave_interrupt_handler+0x1f6>
				(module->transfer_direction == I2C_TRANSFER_READ &&
     da4:	2230      	movs	r2, #48	; 0x30
     da6:	5ca2      	ldrb	r2, [r4, r2]
		if (module->buffer_remaining <= 0 ||
     da8:	2a01      	cmp	r2, #1
     daa:	d013      	beq.n	dd4 <_i2c_slave_interrupt_handler+0x1e8>
		} else if (module->buffer_length > 0 && module->buffer_remaining > 0) {
     dac:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     dae:	b29b      	uxth	r3, r3
     db0:	2b00      	cmp	r3, #0
     db2:	d100      	bne.n	db6 <_i2c_slave_interrupt_handler+0x1ca>
     db4:	e78f      	b.n	cd6 <_i2c_slave_interrupt_handler+0xea>
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     db6:	2330      	movs	r3, #48	; 0x30
     db8:	5ce3      	ldrb	r3, [r4, r3]
     dba:	2b00      	cmp	r3, #0
     dbc:	d044      	beq.n	e48 <_i2c_slave_interrupt_handler+0x25c>
	i2c_hw->DATA.reg = *(module->buffer++);
     dbe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     dc0:	1c5a      	adds	r2, r3, #1
     dc2:	62e2      	str	r2, [r4, #44]	; 0x2c
     dc4:	781b      	ldrb	r3, [r3, #0]
     dc6:	b2db      	uxtb	r3, r3
     dc8:	2228      	movs	r2, #40	; 0x28
     dca:	54ab      	strb	r3, [r5, r2]
	module->buffer_remaining--;
     dcc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     dce:	3b01      	subs	r3, #1
     dd0:	8523      	strh	r3, [r4, #40]	; 0x28
}
     dd2:	e780      	b.n	cd6 <_i2c_slave_interrupt_handler+0xea>
				(module->buffer_length > module->buffer_remaining) &&
     dd4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
     dd6:	b292      	uxth	r2, r2
				(module->transfer_direction == I2C_TRANSFER_READ &&
     dd8:	4293      	cmp	r3, r2
     dda:	d2e7      	bcs.n	dac <_i2c_slave_interrupt_handler+0x1c0>
				(i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_RXNACK))) {
     ddc:	8b6b      	ldrh	r3, [r5, #26]
				(module->buffer_length > module->buffer_remaining) &&
     dde:	075b      	lsls	r3, r3, #29
     de0:	d5e4      	bpl.n	dac <_i2c_slave_interrupt_handler+0x1c0>
			module->buffer_remaining = 0;
     de2:	2300      	movs	r3, #0
     de4:	8523      	strh	r3, [r4, #40]	; 0x28
			module->buffer_length = 0;
     de6:	84e3      	strh	r3, [r4, #38]	; 0x26
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     de8:	3330      	adds	r3, #48	; 0x30
     dea:	5ce3      	ldrb	r3, [r4, r3]
     dec:	2b00      	cmp	r3, #0
     dee:	d117      	bne.n	e20 <_i2c_slave_interrupt_handler+0x234>
	cpu_irq_enter_critical();
     df0:	4b1c      	ldr	r3, [pc, #112]	; (e64 <_i2c_slave_interrupt_handler+0x278>)
     df2:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     df4:	2300      	movs	r3, #0
     df6:	836b      	strh	r3, [r5, #26]
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     df8:	2380      	movs	r3, #128	; 0x80
     dfa:	02db      	lsls	r3, r3, #11
     dfc:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     dfe:	4b1a      	ldr	r3, [pc, #104]	; (e68 <_i2c_slave_interrupt_handler+0x27c>)
     e00:	4798      	blx	r3
				i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x2);
     e02:	686a      	ldr	r2, [r5, #4]
     e04:	2380      	movs	r3, #128	; 0x80
     e06:	029b      	lsls	r3, r3, #10
     e08:	4313      	orrs	r3, r2
     e0a:	606b      	str	r3, [r5, #4]
				module->status = STATUS_ERR_OVERFLOW;
     e0c:	221e      	movs	r2, #30
     e0e:	2331      	movs	r3, #49	; 0x31
     e10:	54e2      	strb	r2, [r4, r3]
				if (callback_mask & (1 << I2C_SLAVE_CALLBACK_ERROR)) {
     e12:	06f3      	lsls	r3, r6, #27
     e14:	d400      	bmi.n	e18 <_i2c_slave_interrupt_handler+0x22c>
     e16:	e75e      	b.n	cd6 <_i2c_slave_interrupt_handler+0xea>
					module->callbacks[I2C_SLAVE_CALLBACK_ERROR](module);
     e18:	69e3      	ldr	r3, [r4, #28]
     e1a:	0020      	movs	r0, r4
     e1c:	4798      	blx	r3
     e1e:	e75a      	b.n	cd6 <_i2c_slave_interrupt_handler+0xea>
	cpu_irq_enter_critical();
     e20:	4b10      	ldr	r3, [pc, #64]	; (e64 <_i2c_slave_interrupt_handler+0x278>)
     e22:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     e24:	2300      	movs	r3, #0
     e26:	836b      	strh	r3, [r5, #26]
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     e28:	2380      	movs	r3, #128	; 0x80
     e2a:	02db      	lsls	r3, r3, #11
     e2c:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     e2e:	4b0e      	ldr	r3, [pc, #56]	; (e68 <_i2c_slave_interrupt_handler+0x27c>)
     e30:	4798      	blx	r3
				i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x2);
     e32:	686a      	ldr	r2, [r5, #4]
     e34:	2380      	movs	r3, #128	; 0x80
     e36:	029b      	lsls	r3, r3, #10
     e38:	4313      	orrs	r3, r2
     e3a:	606b      	str	r3, [r5, #4]
				module->status = STATUS_OK;
     e3c:	2331      	movs	r3, #49	; 0x31
     e3e:	2200      	movs	r2, #0
     e40:	54e2      	strb	r2, [r4, r3]
				i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_DRDY;
     e42:	3b2d      	subs	r3, #45	; 0x2d
     e44:	752b      	strb	r3, [r5, #20]
     e46:	e746      	b.n	cd6 <_i2c_slave_interrupt_handler+0xea>
	*(module->buffer++) = i2c_hw->DATA.reg;
     e48:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     e4a:	1c53      	adds	r3, r2, #1
     e4c:	62e3      	str	r3, [r4, #44]	; 0x2c
     e4e:	2328      	movs	r3, #40	; 0x28
     e50:	5ceb      	ldrb	r3, [r5, r3]
     e52:	b2db      	uxtb	r3, r3
     e54:	7013      	strb	r3, [r2, #0]
	module->buffer_remaining--;
     e56:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     e58:	3b01      	subs	r3, #1
     e5a:	8523      	strh	r3, [r4, #40]	; 0x28
     e5c:	e73b      	b.n	cd6 <_i2c_slave_interrupt_handler+0xea>
     e5e:	46c0      	nop			; (mov r8, r8)
     e60:	20000310 	.word	0x20000310
     e64:	000017d5 	.word	0x000017d5
     e68:	00001815 	.word	0x00001815

00000e6c <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     e6c:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     e6e:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     e70:	2340      	movs	r3, #64	; 0x40
     e72:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     e74:	4281      	cmp	r1, r0
     e76:	d202      	bcs.n	e7e <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     e78:	0018      	movs	r0, r3
     e7a:	bd10      	pop	{r4, pc}
		baud_calculated++;
     e7c:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     e7e:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     e80:	1c63      	adds	r3, r4, #1
     e82:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     e84:	4288      	cmp	r0, r1
     e86:	d9f9      	bls.n	e7c <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     e88:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     e8a:	2cff      	cmp	r4, #255	; 0xff
     e8c:	d8f4      	bhi.n	e78 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     e8e:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     e90:	2300      	movs	r3, #0
     e92:	e7f1      	b.n	e78 <_sercom_get_sync_baud_val+0xc>

00000e94 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     e94:	b510      	push	{r4, lr}
     e96:	b082      	sub	sp, #8
     e98:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     e9a:	4b0e      	ldr	r3, [pc, #56]	; (ed4 <sercom_set_gclk_generator+0x40>)
     e9c:	781b      	ldrb	r3, [r3, #0]
     e9e:	2b00      	cmp	r3, #0
     ea0:	d007      	beq.n	eb2 <sercom_set_gclk_generator+0x1e>
     ea2:	2900      	cmp	r1, #0
     ea4:	d105      	bne.n	eb2 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     ea6:	4b0b      	ldr	r3, [pc, #44]	; (ed4 <sercom_set_gclk_generator+0x40>)
     ea8:	785b      	ldrb	r3, [r3, #1]
     eaa:	4283      	cmp	r3, r0
     eac:	d010      	beq.n	ed0 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     eae:	201d      	movs	r0, #29
     eb0:	e00c      	b.n	ecc <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     eb2:	a901      	add	r1, sp, #4
     eb4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     eb6:	200d      	movs	r0, #13
     eb8:	4b07      	ldr	r3, [pc, #28]	; (ed8 <sercom_set_gclk_generator+0x44>)
     eba:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     ebc:	200d      	movs	r0, #13
     ebe:	4b07      	ldr	r3, [pc, #28]	; (edc <sercom_set_gclk_generator+0x48>)
     ec0:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     ec2:	4b04      	ldr	r3, [pc, #16]	; (ed4 <sercom_set_gclk_generator+0x40>)
     ec4:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     ec6:	2201      	movs	r2, #1
     ec8:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     eca:	2000      	movs	r0, #0
}
     ecc:	b002      	add	sp, #8
     ece:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     ed0:	2000      	movs	r0, #0
     ed2:	e7fb      	b.n	ecc <sercom_set_gclk_generator+0x38>
     ed4:	200001d8 	.word	0x200001d8
     ed8:	00001e69 	.word	0x00001e69
     edc:	00001ddd 	.word	0x00001ddd

00000ee0 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     ee0:	4b20      	ldr	r3, [pc, #128]	; (f64 <_sercom_get_default_pad+0x84>)
     ee2:	4298      	cmp	r0, r3
     ee4:	d017      	beq.n	f16 <_sercom_get_default_pad+0x36>
     ee6:	4b20      	ldr	r3, [pc, #128]	; (f68 <_sercom_get_default_pad+0x88>)
     ee8:	4298      	cmp	r0, r3
     eea:	d024      	beq.n	f36 <_sercom_get_default_pad+0x56>
     eec:	4b1f      	ldr	r3, [pc, #124]	; (f6c <_sercom_get_default_pad+0x8c>)
     eee:	4298      	cmp	r0, r3
     ef0:	d001      	beq.n	ef6 <_sercom_get_default_pad+0x16>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     ef2:	2000      	movs	r0, #0
}
     ef4:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ef6:	2901      	cmp	r1, #1
     ef8:	d007      	beq.n	f0a <_sercom_get_default_pad+0x2a>
     efa:	2900      	cmp	r1, #0
     efc:	d02b      	beq.n	f56 <_sercom_get_default_pad+0x76>
     efe:	2902      	cmp	r1, #2
     f00:	d005      	beq.n	f0e <_sercom_get_default_pad+0x2e>
     f02:	2903      	cmp	r1, #3
     f04:	d005      	beq.n	f12 <_sercom_get_default_pad+0x32>
	return 0;
     f06:	2000      	movs	r0, #0
     f08:	e7f4      	b.n	ef4 <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f0a:	4819      	ldr	r0, [pc, #100]	; (f70 <_sercom_get_default_pad+0x90>)
     f0c:	e7f2      	b.n	ef4 <_sercom_get_default_pad+0x14>
     f0e:	4819      	ldr	r0, [pc, #100]	; (f74 <_sercom_get_default_pad+0x94>)
     f10:	e7f0      	b.n	ef4 <_sercom_get_default_pad+0x14>
     f12:	4819      	ldr	r0, [pc, #100]	; (f78 <_sercom_get_default_pad+0x98>)
     f14:	e7ee      	b.n	ef4 <_sercom_get_default_pad+0x14>
     f16:	2901      	cmp	r1, #1
     f18:	d007      	beq.n	f2a <_sercom_get_default_pad+0x4a>
     f1a:	2900      	cmp	r1, #0
     f1c:	d01d      	beq.n	f5a <_sercom_get_default_pad+0x7a>
     f1e:	2902      	cmp	r1, #2
     f20:	d005      	beq.n	f2e <_sercom_get_default_pad+0x4e>
     f22:	2903      	cmp	r1, #3
     f24:	d005      	beq.n	f32 <_sercom_get_default_pad+0x52>
	return 0;
     f26:	2000      	movs	r0, #0
     f28:	e7e4      	b.n	ef4 <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f2a:	4814      	ldr	r0, [pc, #80]	; (f7c <_sercom_get_default_pad+0x9c>)
     f2c:	e7e2      	b.n	ef4 <_sercom_get_default_pad+0x14>
     f2e:	4814      	ldr	r0, [pc, #80]	; (f80 <_sercom_get_default_pad+0xa0>)
     f30:	e7e0      	b.n	ef4 <_sercom_get_default_pad+0x14>
     f32:	4814      	ldr	r0, [pc, #80]	; (f84 <_sercom_get_default_pad+0xa4>)
     f34:	e7de      	b.n	ef4 <_sercom_get_default_pad+0x14>
     f36:	2901      	cmp	r1, #1
     f38:	d007      	beq.n	f4a <_sercom_get_default_pad+0x6a>
     f3a:	2900      	cmp	r1, #0
     f3c:	d00f      	beq.n	f5e <_sercom_get_default_pad+0x7e>
     f3e:	2902      	cmp	r1, #2
     f40:	d005      	beq.n	f4e <_sercom_get_default_pad+0x6e>
     f42:	2903      	cmp	r1, #3
     f44:	d005      	beq.n	f52 <_sercom_get_default_pad+0x72>
	return 0;
     f46:	2000      	movs	r0, #0
     f48:	e7d4      	b.n	ef4 <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f4a:	480f      	ldr	r0, [pc, #60]	; (f88 <_sercom_get_default_pad+0xa8>)
     f4c:	e7d2      	b.n	ef4 <_sercom_get_default_pad+0x14>
     f4e:	480f      	ldr	r0, [pc, #60]	; (f8c <_sercom_get_default_pad+0xac>)
     f50:	e7d0      	b.n	ef4 <_sercom_get_default_pad+0x14>
     f52:	480f      	ldr	r0, [pc, #60]	; (f90 <_sercom_get_default_pad+0xb0>)
     f54:	e7ce      	b.n	ef4 <_sercom_get_default_pad+0x14>
     f56:	480f      	ldr	r0, [pc, #60]	; (f94 <_sercom_get_default_pad+0xb4>)
     f58:	e7cc      	b.n	ef4 <_sercom_get_default_pad+0x14>
     f5a:	480f      	ldr	r0, [pc, #60]	; (f98 <_sercom_get_default_pad+0xb8>)
     f5c:	e7ca      	b.n	ef4 <_sercom_get_default_pad+0x14>
     f5e:	480f      	ldr	r0, [pc, #60]	; (f9c <_sercom_get_default_pad+0xbc>)
     f60:	e7c8      	b.n	ef4 <_sercom_get_default_pad+0x14>
     f62:	46c0      	nop			; (mov r8, r8)
     f64:	42000c00 	.word	0x42000c00
     f68:	42001000 	.word	0x42001000
     f6c:	42000800 	.word	0x42000800
     f70:	00050003 	.word	0x00050003
     f74:	00060003 	.word	0x00060003
     f78:	00070003 	.word	0x00070003
     f7c:	00170002 	.word	0x00170002
     f80:	001e0003 	.word	0x001e0003
     f84:	001f0003 	.word	0x001f0003
     f88:	00170003 	.word	0x00170003
     f8c:	00100003 	.word	0x00100003
     f90:	00190003 	.word	0x00190003
     f94:	00040003 	.word	0x00040003
     f98:	00160002 	.word	0x00160002
     f9c:	00160003 	.word	0x00160003

00000fa0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     fa0:	b530      	push	{r4, r5, lr}
     fa2:	b085      	sub	sp, #20
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     fa4:	aa01      	add	r2, sp, #4
     fa6:	4b0b      	ldr	r3, [pc, #44]	; (fd4 <_sercom_get_sercom_inst_index+0x34>)
     fa8:	cb32      	ldmia	r3!, {r1, r4, r5}
     faa:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     fac:	0003      	movs	r3, r0
     fae:	9a01      	ldr	r2, [sp, #4]
     fb0:	4282      	cmp	r2, r0
     fb2:	d00c      	beq.n	fce <_sercom_get_sercom_inst_index+0x2e>
     fb4:	9a02      	ldr	r2, [sp, #8]
     fb6:	4282      	cmp	r2, r0
     fb8:	d007      	beq.n	fca <_sercom_get_sercom_inst_index+0x2a>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     fba:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     fbc:	9a03      	ldr	r2, [sp, #12]
     fbe:	429a      	cmp	r2, r3
     fc0:	d001      	beq.n	fc6 <_sercom_get_sercom_inst_index+0x26>
}
     fc2:	b005      	add	sp, #20
     fc4:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     fc6:	3002      	adds	r0, #2
     fc8:	e002      	b.n	fd0 <_sercom_get_sercom_inst_index+0x30>
     fca:	2001      	movs	r0, #1
     fcc:	e000      	b.n	fd0 <_sercom_get_sercom_inst_index+0x30>
     fce:	2000      	movs	r0, #0
			return i;
     fd0:	b2c0      	uxtb	r0, r0
     fd2:	e7f6      	b.n	fc2 <_sercom_get_sercom_inst_index+0x22>
     fd4:	00003458 	.word	0x00003458

00000fd8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     fd8:	4770      	bx	lr
	...

00000fdc <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     fdc:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     fde:	4b0a      	ldr	r3, [pc, #40]	; (1008 <_sercom_set_handler+0x2c>)
     fe0:	781b      	ldrb	r3, [r3, #0]
     fe2:	2b00      	cmp	r3, #0
     fe4:	d10c      	bne.n	1000 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     fe6:	4c09      	ldr	r4, [pc, #36]	; (100c <_sercom_set_handler+0x30>)
     fe8:	4d09      	ldr	r5, [pc, #36]	; (1010 <_sercom_set_handler+0x34>)
     fea:	6025      	str	r5, [r4, #0]
			_sercom_instances[i] = NULL;
     fec:	4b09      	ldr	r3, [pc, #36]	; (1014 <_sercom_set_handler+0x38>)
     fee:	2200      	movs	r2, #0
     ff0:	601a      	str	r2, [r3, #0]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     ff2:	6065      	str	r5, [r4, #4]
			_sercom_instances[i] = NULL;
     ff4:	605a      	str	r2, [r3, #4]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     ff6:	60a5      	str	r5, [r4, #8]
			_sercom_instances[i] = NULL;
     ff8:	609a      	str	r2, [r3, #8]
		}

		_handler_table_initialized = true;
     ffa:	3201      	adds	r2, #1
     ffc:	4b02      	ldr	r3, [pc, #8]	; (1008 <_sercom_set_handler+0x2c>)
     ffe:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1000:	0080      	lsls	r0, r0, #2
    1002:	4b02      	ldr	r3, [pc, #8]	; (100c <_sercom_set_handler+0x30>)
    1004:	50c1      	str	r1, [r0, r3]
}
    1006:	bd30      	pop	{r4, r5, pc}
    1008:	200001da 	.word	0x200001da
    100c:	200001dc 	.word	0x200001dc
    1010:	00000fd9 	.word	0x00000fd9
    1014:	20000310 	.word	0x20000310

00001018 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1018:	b510      	push	{r4, lr}
    101a:	b082      	sub	sp, #8
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    101c:	ac01      	add	r4, sp, #4
    101e:	2309      	movs	r3, #9
    1020:	7023      	strb	r3, [r4, #0]
    1022:	3301      	adds	r3, #1
    1024:	7063      	strb	r3, [r4, #1]
    1026:	3301      	adds	r3, #1
    1028:	70a3      	strb	r3, [r4, #2]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    102a:	4b02      	ldr	r3, [pc, #8]	; (1034 <_sercom_get_interrupt_vector+0x1c>)
    102c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    102e:	5620      	ldrsb	r0, [r4, r0]
}
    1030:	b002      	add	sp, #8
    1032:	bd10      	pop	{r4, pc}
    1034:	00000fa1 	.word	0x00000fa1

00001038 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1038:	b510      	push	{r4, lr}
    103a:	4b02      	ldr	r3, [pc, #8]	; (1044 <SERCOM0_Handler+0xc>)
    103c:	681b      	ldr	r3, [r3, #0]
    103e:	2000      	movs	r0, #0
    1040:	4798      	blx	r3
    1042:	bd10      	pop	{r4, pc}
    1044:	200001dc 	.word	0x200001dc

00001048 <SERCOM1_Handler>:
    1048:	b510      	push	{r4, lr}
    104a:	4b02      	ldr	r3, [pc, #8]	; (1054 <SERCOM1_Handler+0xc>)
    104c:	685b      	ldr	r3, [r3, #4]
    104e:	2001      	movs	r0, #1
    1050:	4798      	blx	r3
    1052:	bd10      	pop	{r4, pc}
    1054:	200001dc 	.word	0x200001dc

00001058 <SERCOM2_Handler>:
    1058:	b510      	push	{r4, lr}
    105a:	4b02      	ldr	r3, [pc, #8]	; (1064 <SERCOM2_Handler+0xc>)
    105c:	689b      	ldr	r3, [r3, #8]
    105e:	2002      	movs	r0, #2
    1060:	4798      	blx	r3
    1062:	bd10      	pop	{r4, pc}
    1064:	200001dc 	.word	0x200001dc

00001068 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    1068:	b5f0      	push	{r4, r5, r6, r7, lr}
    106a:	b08b      	sub	sp, #44	; 0x2c
    106c:	0005      	movs	r5, r0
    106e:	000c      	movs	r4, r1
    1070:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    1072:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1074:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    1076:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1078:	079b      	lsls	r3, r3, #30
    107a:	d501      	bpl.n	1080 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    107c:	b00b      	add	sp, #44	; 0x2c
    107e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1080:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    1082:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1084:	07db      	lsls	r3, r3, #31
    1086:	d4f9      	bmi.n	107c <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1088:	0008      	movs	r0, r1
    108a:	4b6f      	ldr	r3, [pc, #444]	; (1248 <spi_init+0x1e0>)
    108c:	4798      	blx	r3
    108e:	4a6f      	ldr	r2, [pc, #444]	; (124c <spi_init+0x1e4>)
    1090:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1092:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1094:	2301      	movs	r3, #1
    1096:	40bb      	lsls	r3, r7
    1098:	430b      	orrs	r3, r1
    109a:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    109c:	a909      	add	r1, sp, #36	; 0x24
    109e:	2724      	movs	r7, #36	; 0x24
    10a0:	5df3      	ldrb	r3, [r6, r7]
    10a2:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    10a4:	300e      	adds	r0, #14
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    10a6:	b2c3      	uxtb	r3, r0
    10a8:	9301      	str	r3, [sp, #4]
    10aa:	0018      	movs	r0, r3
    10ac:	4b68      	ldr	r3, [pc, #416]	; (1250 <spi_init+0x1e8>)
    10ae:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    10b0:	9801      	ldr	r0, [sp, #4]
    10b2:	4b68      	ldr	r3, [pc, #416]	; (1254 <spi_init+0x1ec>)
    10b4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    10b6:	5df0      	ldrb	r0, [r6, r7]
    10b8:	2100      	movs	r1, #0
    10ba:	4b67      	ldr	r3, [pc, #412]	; (1258 <spi_init+0x1f0>)
    10bc:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    10be:	7833      	ldrb	r3, [r6, #0]
    10c0:	2b01      	cmp	r3, #1
    10c2:	d03f      	beq.n	1144 <spi_init+0xdc>
	if (config->mode == SPI_MODE_SLAVE) {
    10c4:	7833      	ldrb	r3, [r6, #0]
    10c6:	2b00      	cmp	r3, #0
    10c8:	d103      	bne.n	10d2 <spi_init+0x6a>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    10ca:	6823      	ldr	r3, [r4, #0]
    10cc:	2208      	movs	r2, #8
    10ce:	4313      	orrs	r3, r2
    10d0:	6023      	str	r3, [r4, #0]
    10d2:	002b      	movs	r3, r5
    10d4:	330c      	adds	r3, #12
    10d6:	0029      	movs	r1, r5
    10d8:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    10da:	2200      	movs	r2, #0
    10dc:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    10de:	428b      	cmp	r3, r1
    10e0:	d1fc      	bne.n	10dc <spi_init+0x74>
	module->tx_buffer_ptr              = NULL;
    10e2:	2300      	movs	r3, #0
    10e4:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    10e6:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    10e8:	2400      	movs	r4, #0
    10ea:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    10ec:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    10ee:	3336      	adds	r3, #54	; 0x36
    10f0:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    10f2:	3301      	adds	r3, #1
    10f4:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    10f6:	3301      	adds	r3, #1
    10f8:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    10fa:	3b35      	subs	r3, #53	; 0x35
    10fc:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    10fe:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    1100:	6828      	ldr	r0, [r5, #0]
    1102:	4b51      	ldr	r3, [pc, #324]	; (1248 <spi_init+0x1e0>)
    1104:	4798      	blx	r3
    1106:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    1108:	4954      	ldr	r1, [pc, #336]	; (125c <spi_init+0x1f4>)
    110a:	4b55      	ldr	r3, [pc, #340]	; (1260 <spi_init+0x1f8>)
    110c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    110e:	00bf      	lsls	r7, r7, #2
    1110:	4b54      	ldr	r3, [pc, #336]	; (1264 <spi_init+0x1fc>)
    1112:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1114:	682f      	ldr	r7, [r5, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1116:	ab04      	add	r3, sp, #16
    1118:	2280      	movs	r2, #128	; 0x80
    111a:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    111c:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    111e:	3a7f      	subs	r2, #127	; 0x7f
    1120:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1122:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    1124:	7833      	ldrb	r3, [r6, #0]
    1126:	2b00      	cmp	r3, #0
    1128:	d102      	bne.n	1130 <spi_init+0xc8>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    112a:	2200      	movs	r2, #0
    112c:	ab04      	add	r3, sp, #16
    112e:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1130:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1132:	9305      	str	r3, [sp, #20]
    1134:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1136:	9306      	str	r3, [sp, #24]
    1138:	6b33      	ldr	r3, [r6, #48]	; 0x30
    113a:	9307      	str	r3, [sp, #28]
    113c:	6b73      	ldr	r3, [r6, #52]	; 0x34
    113e:	9308      	str	r3, [sp, #32]
    1140:	2400      	movs	r4, #0
    1142:	e00b      	b.n	115c <spi_init+0xf4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    1144:	6823      	ldr	r3, [r4, #0]
    1146:	220c      	movs	r2, #12
    1148:	4313      	orrs	r3, r2
    114a:	6023      	str	r3, [r4, #0]
    114c:	e7ba      	b.n	10c4 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    114e:	0038      	movs	r0, r7
    1150:	4b45      	ldr	r3, [pc, #276]	; (1268 <spi_init+0x200>)
    1152:	4798      	blx	r3
    1154:	e00a      	b.n	116c <spi_init+0x104>
    1156:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1158:	2c04      	cmp	r4, #4
    115a:	d010      	beq.n	117e <spi_init+0x116>
    115c:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    115e:	00a3      	lsls	r3, r4, #2
    1160:	aa02      	add	r2, sp, #8
    1162:	200c      	movs	r0, #12
    1164:	1812      	adds	r2, r2, r0
    1166:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    1168:	2800      	cmp	r0, #0
    116a:	d0f0      	beq.n	114e <spi_init+0xe6>
		if (current_pinmux != PINMUX_UNUSED) {
    116c:	1c43      	adds	r3, r0, #1
    116e:	d0f2      	beq.n	1156 <spi_init+0xee>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1170:	a904      	add	r1, sp, #16
    1172:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1174:	0c00      	lsrs	r0, r0, #16
    1176:	b2c0      	uxtb	r0, r0
    1178:	4b3c      	ldr	r3, [pc, #240]	; (126c <spi_init+0x204>)
    117a:	4798      	blx	r3
    117c:	e7eb      	b.n	1156 <spi_init+0xee>
	module->mode             = config->mode;
    117e:	7833      	ldrb	r3, [r6, #0]
    1180:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    1182:	7c33      	ldrb	r3, [r6, #16]
    1184:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    1186:	7cb3      	ldrb	r3, [r6, #18]
    1188:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    118a:	7d33      	ldrb	r3, [r6, #20]
    118c:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    118e:	2200      	movs	r2, #0
    1190:	ab02      	add	r3, sp, #8
    1192:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    1194:	7833      	ldrb	r3, [r6, #0]
    1196:	2b01      	cmp	r3, #1
    1198:	d012      	beq.n	11c0 <spi_init+0x158>
	if (config->mode == SPI_MODE_SLAVE) {
    119a:	7833      	ldrb	r3, [r6, #0]
    119c:	2b00      	cmp	r3, #0
    119e:	d126      	bne.n	11ee <spi_init+0x186>
		ctrla = config->mode_specific.slave.frame_format;
    11a0:	69b0      	ldr	r0, [r6, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    11a2:	8bb2      	ldrh	r2, [r6, #28]
		spi_module->ADDR.reg |=
    11a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    11a6:	7ff1      	ldrb	r1, [r6, #31]
    11a8:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    11aa:	7fb4      	ldrb	r4, [r6, #30]
    11ac:	4321      	orrs	r1, r4
		spi_module->ADDR.reg |=
    11ae:	4319      	orrs	r1, r3
    11b0:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    11b2:	2320      	movs	r3, #32
    11b4:	5cf3      	ldrb	r3, [r6, r3]
    11b6:	2b00      	cmp	r3, #0
    11b8:	d01b      	beq.n	11f2 <spi_init+0x18a>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    11ba:	2340      	movs	r3, #64	; 0x40
    11bc:	431a      	orrs	r2, r3
    11be:	e018      	b.n	11f2 <spi_init+0x18a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    11c0:	6828      	ldr	r0, [r5, #0]
    11c2:	4b21      	ldr	r3, [pc, #132]	; (1248 <spi_init+0x1e0>)
    11c4:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    11c6:	300e      	adds	r0, #14
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    11c8:	b2c0      	uxtb	r0, r0
    11ca:	4b29      	ldr	r3, [pc, #164]	; (1270 <spi_init+0x208>)
    11cc:	4798      	blx	r3
    11ce:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    11d0:	ab02      	add	r3, sp, #8
    11d2:	1d9a      	adds	r2, r3, #6
    11d4:	69b0      	ldr	r0, [r6, #24]
    11d6:	4b27      	ldr	r3, [pc, #156]	; (1274 <spi_init+0x20c>)
    11d8:	4798      	blx	r3
    11da:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    11dc:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    11de:	2b00      	cmp	r3, #0
    11e0:	d000      	beq.n	11e4 <spi_init+0x17c>
    11e2:	e74b      	b.n	107c <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    11e4:	ab02      	add	r3, sp, #8
    11e6:	3306      	adds	r3, #6
    11e8:	781b      	ldrb	r3, [r3, #0]
    11ea:	733b      	strb	r3, [r7, #12]
    11ec:	e7d5      	b.n	119a <spi_init+0x132>
	uint32_t ctrlb = 0;
    11ee:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    11f0:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    11f2:	6873      	ldr	r3, [r6, #4]
    11f4:	68b1      	ldr	r1, [r6, #8]
    11f6:	430b      	orrs	r3, r1
    11f8:	68f1      	ldr	r1, [r6, #12]
    11fa:	430b      	orrs	r3, r1
    11fc:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    11fe:	7c31      	ldrb	r1, [r6, #16]
    1200:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    1202:	7c71      	ldrb	r1, [r6, #17]
    1204:	2900      	cmp	r1, #0
    1206:	d103      	bne.n	1210 <spi_init+0x1a8>
    1208:	491b      	ldr	r1, [pc, #108]	; (1278 <spi_init+0x210>)
    120a:	7889      	ldrb	r1, [r1, #2]
    120c:	0789      	lsls	r1, r1, #30
    120e:	d501      	bpl.n	1214 <spi_init+0x1ac>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1210:	2180      	movs	r1, #128	; 0x80
    1212:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    1214:	7cb1      	ldrb	r1, [r6, #18]
    1216:	2900      	cmp	r1, #0
    1218:	d002      	beq.n	1220 <spi_init+0x1b8>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    121a:	2180      	movs	r1, #128	; 0x80
    121c:	0289      	lsls	r1, r1, #10
    121e:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    1220:	7cf1      	ldrb	r1, [r6, #19]
    1222:	2900      	cmp	r1, #0
    1224:	d002      	beq.n	122c <spi_init+0x1c4>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    1226:	2180      	movs	r1, #128	; 0x80
    1228:	0089      	lsls	r1, r1, #2
    122a:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    122c:	7d31      	ldrb	r1, [r6, #20]
    122e:	2900      	cmp	r1, #0
    1230:	d002      	beq.n	1238 <spi_init+0x1d0>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1232:	2180      	movs	r1, #128	; 0x80
    1234:	0189      	lsls	r1, r1, #6
    1236:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    1238:	6839      	ldr	r1, [r7, #0]
    123a:	430b      	orrs	r3, r1
    123c:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    123e:	687b      	ldr	r3, [r7, #4]
    1240:	431a      	orrs	r2, r3
    1242:	607a      	str	r2, [r7, #4]
	return STATUS_OK;
    1244:	2000      	movs	r0, #0
    1246:	e719      	b.n	107c <spi_init+0x14>
    1248:	00000fa1 	.word	0x00000fa1
    124c:	40000400 	.word	0x40000400
    1250:	00001e69 	.word	0x00001e69
    1254:	00001ddd 	.word	0x00001ddd
    1258:	00000e95 	.word	0x00000e95
    125c:	0000127d 	.word	0x0000127d
    1260:	00000fdd 	.word	0x00000fdd
    1264:	20000310 	.word	0x20000310
    1268:	00000ee1 	.word	0x00000ee1
    126c:	00001f61 	.word	0x00001f61
    1270:	00001e85 	.word	0x00001e85
    1274:	00000e6d 	.word	0x00000e6d
    1278:	41002000 	.word	0x41002000

0000127c <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    127c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    127e:	0080      	lsls	r0, r0, #2
    1280:	4b85      	ldr	r3, [pc, #532]	; (1498 <_spi_interrupt_handler+0x21c>)
    1282:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1284:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    1286:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    1288:	5ce3      	ldrb	r3, [r4, r3]
    128a:	2236      	movs	r2, #54	; 0x36
    128c:	5ca7      	ldrb	r7, [r4, r2]
    128e:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    1290:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    1292:	7db5      	ldrb	r5, [r6, #22]
    1294:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    1296:	07eb      	lsls	r3, r5, #31
    1298:	d52e      	bpl.n	12f8 <_spi_interrupt_handler+0x7c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    129a:	7963      	ldrb	r3, [r4, #5]
    129c:	2b01      	cmp	r3, #1
    129e:	d025      	beq.n	12ec <_spi_interrupt_handler+0x70>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    12a0:	2b00      	cmp	r3, #0
    12a2:	d129      	bne.n	12f8 <_spi_interrupt_handler+0x7c>
			(module->dir != SPI_DIRECTION_READ))
    12a4:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    12a6:	2b00      	cmp	r3, #0
    12a8:	d026      	beq.n	12f8 <_spi_interrupt_handler+0x7c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    12aa:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    12ac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    12ae:	7813      	ldrb	r3, [r2, #0]
    12b0:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    12b2:	1c50      	adds	r0, r2, #1
    12b4:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    12b6:	79a0      	ldrb	r0, [r4, #6]
    12b8:	2801      	cmp	r0, #1
    12ba:	d100      	bne.n	12be <_spi_interrupt_handler+0x42>
    12bc:	e069      	b.n	1392 <_spi_interrupt_handler+0x116>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    12be:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    12c0:	05db      	lsls	r3, r3, #23
    12c2:	0ddb      	lsrs	r3, r3, #23
    12c4:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    12c6:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    12c8:	3b01      	subs	r3, #1
    12ca:	b29b      	uxth	r3, r3
    12cc:	86a3      	strh	r3, [r4, #52]	; 0x34
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    12ce:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    12d0:	b29b      	uxth	r3, r3
    12d2:	2b00      	cmp	r3, #0
    12d4:	d110      	bne.n	12f8 <_spi_interrupt_handler+0x7c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    12d6:	3301      	adds	r3, #1
    12d8:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    12da:	7a63      	ldrb	r3, [r4, #9]
    12dc:	2b01      	cmp	r3, #1
    12de:	d10b      	bne.n	12f8 <_spi_interrupt_handler+0x7c>
    12e0:	79e3      	ldrb	r3, [r4, #7]
    12e2:	2b00      	cmp	r3, #0
    12e4:	d108      	bne.n	12f8 <_spi_interrupt_handler+0x7c>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    12e6:	3302      	adds	r3, #2
    12e8:	75b3      	strb	r3, [r6, #22]
    12ea:	e005      	b.n	12f8 <_spi_interrupt_handler+0x7c>
			(module->dir == SPI_DIRECTION_READ)) {
    12ec:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    12ee:	2b00      	cmp	r3, #0
    12f0:	d03e      	beq.n	1370 <_spi_interrupt_handler+0xf4>
			(module->dir != SPI_DIRECTION_READ))
    12f2:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    12f4:	2b00      	cmp	r3, #0
    12f6:	d1d8      	bne.n	12aa <_spi_interrupt_handler+0x2e>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    12f8:	076b      	lsls	r3, r5, #29
    12fa:	d511      	bpl.n	1320 <_spi_interrupt_handler+0xa4>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    12fc:	8b73      	ldrh	r3, [r6, #26]
    12fe:	075b      	lsls	r3, r3, #29
    1300:	d551      	bpl.n	13a6 <_spi_interrupt_handler+0x12a>
			if (module->dir != SPI_DIRECTION_WRITE) {
    1302:	7a63      	ldrb	r3, [r4, #9]
    1304:	2b01      	cmp	r3, #1
    1306:	d008      	beq.n	131a <_spi_interrupt_handler+0x9e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    1308:	221e      	movs	r2, #30
    130a:	2338      	movs	r3, #56	; 0x38
    130c:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    130e:	3b35      	subs	r3, #53	; 0x35
    1310:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    1312:	3302      	adds	r3, #2
    1314:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    1316:	073b      	lsls	r3, r7, #28
    1318:	d441      	bmi.n	139e <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    131a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    131c:	2304      	movs	r3, #4
    131e:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    1320:	07ab      	lsls	r3, r5, #30
    1322:	d515      	bpl.n	1350 <_spi_interrupt_handler+0xd4>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    1324:	7963      	ldrb	r3, [r4, #5]
    1326:	2b00      	cmp	r3, #0
    1328:	d10e      	bne.n	1348 <_spi_interrupt_handler+0xcc>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    132a:	3307      	adds	r3, #7
    132c:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    132e:	3b05      	subs	r3, #5
    1330:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    1332:	3301      	adds	r3, #1
    1334:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    1336:	2300      	movs	r3, #0
    1338:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    133a:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    133c:	3338      	adds	r3, #56	; 0x38
    133e:	2200      	movs	r2, #0
    1340:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    1342:	06fb      	lsls	r3, r7, #27
    1344:	d500      	bpl.n	1348 <_spi_interrupt_handler+0xcc>
    1346:	e07f      	b.n	1448 <_spi_interrupt_handler+0x1cc>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1348:	7963      	ldrb	r3, [r4, #5]
    134a:	2b01      	cmp	r3, #1
    134c:	d100      	bne.n	1350 <_spi_interrupt_handler+0xd4>
    134e:	e07f      	b.n	1450 <_spi_interrupt_handler+0x1d4>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    1350:	072b      	lsls	r3, r5, #28
    1352:	d508      	bpl.n	1366 <_spi_interrupt_handler+0xea>
			if (module->mode == SPI_MODE_SLAVE) {
    1354:	7963      	ldrb	r3, [r4, #5]
    1356:	2b00      	cmp	r3, #0
    1358:	d105      	bne.n	1366 <_spi_interrupt_handler+0xea>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    135a:	3308      	adds	r3, #8
    135c:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    135e:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    1360:	06bb      	lsls	r3, r7, #26
    1362:	d500      	bpl.n	1366 <_spi_interrupt_handler+0xea>
    1364:	e08a      	b.n	147c <_spi_interrupt_handler+0x200>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    1366:	b26d      	sxtb	r5, r5
    1368:	2d00      	cmp	r5, #0
    136a:	da00      	bge.n	136e <_spi_interrupt_handler+0xf2>
    136c:	e08a      	b.n	1484 <_spi_interrupt_handler+0x208>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    136e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	spi_hw->DATA.reg = dummy_write;
    1370:	4b4a      	ldr	r3, [pc, #296]	; (149c <_spi_interrupt_handler+0x220>)
    1372:	881b      	ldrh	r3, [r3, #0]
    1374:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    1376:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1378:	3b01      	subs	r3, #1
    137a:	b29b      	uxth	r3, r3
    137c:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    137e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1380:	b29b      	uxth	r3, r3
    1382:	2b00      	cmp	r3, #0
    1384:	d101      	bne.n	138a <_spi_interrupt_handler+0x10e>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1386:	3301      	adds	r3, #1
    1388:	7533      	strb	r3, [r6, #20]
		|| ((module->mode == SPI_MODE_MASTER) &&
    138a:	7963      	ldrb	r3, [r4, #5]
		if (0
    138c:	2b01      	cmp	r3, #1
    138e:	d0b0      	beq.n	12f2 <_spi_interrupt_handler+0x76>
    1390:	e786      	b.n	12a0 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    1392:	7850      	ldrb	r0, [r2, #1]
    1394:	0200      	lsls	r0, r0, #8
    1396:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    1398:	3202      	adds	r2, #2
    139a:	62e2      	str	r2, [r4, #44]	; 0x2c
    139c:	e790      	b.n	12c0 <_spi_interrupt_handler+0x44>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    139e:	0020      	movs	r0, r4
    13a0:	69a3      	ldr	r3, [r4, #24]
    13a2:	4798      	blx	r3
    13a4:	e7b9      	b.n	131a <_spi_interrupt_handler+0x9e>
			if (module->dir == SPI_DIRECTION_WRITE) {
    13a6:	7a63      	ldrb	r3, [r4, #9]
    13a8:	2b01      	cmp	r3, #1
    13aa:	d027      	beq.n	13fc <_spi_interrupt_handler+0x180>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    13ac:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    13ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    13b0:	05db      	lsls	r3, r3, #23
    13b2:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    13b4:	b2da      	uxtb	r2, r3
    13b6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    13b8:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    13ba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    13bc:	1c51      	adds	r1, r2, #1
    13be:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    13c0:	79a1      	ldrb	r1, [r4, #6]
    13c2:	2901      	cmp	r1, #1
    13c4:	d033      	beq.n	142e <_spi_interrupt_handler+0x1b2>
	module->remaining_rx_buffer_length--;
    13c6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    13c8:	3b01      	subs	r3, #1
    13ca:	b29b      	uxth	r3, r3
    13cc:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    13ce:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    13d0:	b29b      	uxth	r3, r3
    13d2:	2b00      	cmp	r3, #0
    13d4:	d1a4      	bne.n	1320 <_spi_interrupt_handler+0xa4>
					module->status = STATUS_OK;
    13d6:	2200      	movs	r2, #0
    13d8:	3338      	adds	r3, #56	; 0x38
    13da:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    13dc:	3b34      	subs	r3, #52	; 0x34
    13de:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    13e0:	7a63      	ldrb	r3, [r4, #9]
    13e2:	2b02      	cmp	r3, #2
    13e4:	d029      	beq.n	143a <_spi_interrupt_handler+0x1be>
					} else if (module->dir == SPI_DIRECTION_READ) {
    13e6:	7a63      	ldrb	r3, [r4, #9]
    13e8:	2b00      	cmp	r3, #0
    13ea:	d000      	beq.n	13ee <_spi_interrupt_handler+0x172>
    13ec:	e798      	b.n	1320 <_spi_interrupt_handler+0xa4>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    13ee:	07bb      	lsls	r3, r7, #30
    13f0:	d400      	bmi.n	13f4 <_spi_interrupt_handler+0x178>
    13f2:	e795      	b.n	1320 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    13f4:	0020      	movs	r0, r4
    13f6:	6923      	ldr	r3, [r4, #16]
    13f8:	4798      	blx	r3
    13fa:	e791      	b.n	1320 <_spi_interrupt_handler+0xa4>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    13fc:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    13fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    1400:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1402:	3b01      	subs	r3, #1
    1404:	b29b      	uxth	r3, r3
    1406:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    1408:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    140a:	b29b      	uxth	r3, r3
    140c:	2b00      	cmp	r3, #0
    140e:	d000      	beq.n	1412 <_spi_interrupt_handler+0x196>
    1410:	e786      	b.n	1320 <_spi_interrupt_handler+0xa4>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1412:	3304      	adds	r3, #4
    1414:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    1416:	2200      	movs	r2, #0
    1418:	3334      	adds	r3, #52	; 0x34
    141a:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    141c:	3b35      	subs	r3, #53	; 0x35
    141e:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    1420:	07fb      	lsls	r3, r7, #31
    1422:	d400      	bmi.n	1426 <_spi_interrupt_handler+0x1aa>
    1424:	e77c      	b.n	1320 <_spi_interrupt_handler+0xa4>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    1426:	0020      	movs	r0, r4
    1428:	68e3      	ldr	r3, [r4, #12]
    142a:	4798      	blx	r3
    142c:	e778      	b.n	1320 <_spi_interrupt_handler+0xa4>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    142e:	0a1b      	lsrs	r3, r3, #8
    1430:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    1432:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1434:	3301      	adds	r3, #1
    1436:	62a3      	str	r3, [r4, #40]	; 0x28
    1438:	e7c5      	b.n	13c6 <_spi_interrupt_handler+0x14a>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    143a:	077b      	lsls	r3, r7, #29
    143c:	d400      	bmi.n	1440 <_spi_interrupt_handler+0x1c4>
    143e:	e76f      	b.n	1320 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    1440:	0020      	movs	r0, r4
    1442:	6963      	ldr	r3, [r4, #20]
    1444:	4798      	blx	r3
    1446:	e76b      	b.n	1320 <_spi_interrupt_handler+0xa4>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    1448:	0020      	movs	r0, r4
    144a:	69e3      	ldr	r3, [r4, #28]
    144c:	4798      	blx	r3
    144e:	e77b      	b.n	1348 <_spi_interrupt_handler+0xcc>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1450:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    1452:	2b01      	cmp	r3, #1
    1454:	d000      	beq.n	1458 <_spi_interrupt_handler+0x1dc>
    1456:	e786      	b.n	1366 <_spi_interrupt_handler+0xea>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1458:	79e3      	ldrb	r3, [r4, #7]
    145a:	2b00      	cmp	r3, #0
    145c:	d000      	beq.n	1460 <_spi_interrupt_handler+0x1e4>
    145e:	e782      	b.n	1366 <_spi_interrupt_handler+0xea>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1460:	3302      	adds	r3, #2
    1462:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    1464:	3301      	adds	r3, #1
    1466:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    1468:	2200      	movs	r2, #0
    146a:	3335      	adds	r3, #53	; 0x35
    146c:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    146e:	07fb      	lsls	r3, r7, #31
    1470:	d400      	bmi.n	1474 <_spi_interrupt_handler+0x1f8>
    1472:	e76d      	b.n	1350 <_spi_interrupt_handler+0xd4>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    1474:	0020      	movs	r0, r4
    1476:	68e3      	ldr	r3, [r4, #12]
    1478:	4798      	blx	r3
    147a:	e769      	b.n	1350 <_spi_interrupt_handler+0xd4>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    147c:	0020      	movs	r0, r4
    147e:	6a23      	ldr	r3, [r4, #32]
    1480:	4798      	blx	r3
    1482:	e770      	b.n	1366 <_spi_interrupt_handler+0xea>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1484:	2380      	movs	r3, #128	; 0x80
    1486:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1488:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    148a:	067b      	lsls	r3, r7, #25
    148c:	d400      	bmi.n	1490 <_spi_interrupt_handler+0x214>
    148e:	e76e      	b.n	136e <_spi_interrupt_handler+0xf2>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    1490:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1492:	0020      	movs	r0, r4
    1494:	4798      	blx	r3
}
    1496:	e76a      	b.n	136e <_spi_interrupt_handler+0xf2>
    1498:	20000310 	.word	0x20000310
    149c:	2000031c 	.word	0x2000031c

000014a0 <_tc_get_inst_index>:
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    14a0:	4b06      	ldr	r3, [pc, #24]	; (14bc <_tc_get_inst_index+0x1c>)
    14a2:	4298      	cmp	r0, r3
    14a4:	d008      	beq.n	14b8 <_tc_get_inst_index+0x18>
    14a6:	4a06      	ldr	r2, [pc, #24]	; (14c0 <_tc_get_inst_index+0x20>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    14a8:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    14aa:	4290      	cmp	r0, r2
    14ac:	d001      	beq.n	14b2 <_tc_get_inst_index+0x12>
}
    14ae:	0018      	movs	r0, r3
    14b0:	4770      	bx	lr
    14b2:	3301      	adds	r3, #1
			return i;
    14b4:	b2db      	uxtb	r3, r3
    14b6:	e7fa      	b.n	14ae <_tc_get_inst_index+0xe>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    14b8:	2300      	movs	r3, #0
    14ba:	e7fb      	b.n	14b4 <_tc_get_inst_index+0x14>
    14bc:	42001800 	.word	0x42001800
    14c0:	42001c00 	.word	0x42001c00

000014c4 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    14c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    14c6:	b085      	sub	sp, #20
    14c8:	0004      	movs	r4, r0
    14ca:	000d      	movs	r5, r1
    14cc:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    14ce:	0008      	movs	r0, r1
    14d0:	4b82      	ldr	r3, [pc, #520]	; (16dc <tc_init+0x218>)
    14d2:	4798      	blx	r3
    14d4:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    14d6:	ab03      	add	r3, sp, #12
    14d8:	2212      	movs	r2, #18
    14da:	701a      	strb	r2, [r3, #0]
    14dc:	705a      	strb	r2, [r3, #1]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    14de:	ab02      	add	r3, sp, #8
    14e0:	322e      	adds	r2, #46	; 0x2e
    14e2:	801a      	strh	r2, [r3, #0]
    14e4:	3240      	adds	r2, #64	; 0x40
    14e6:	805a      	strh	r2, [r3, #2]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    14e8:	2300      	movs	r3, #0
    14ea:	60a3      	str	r3, [r4, #8]
    14ec:	60e3      	str	r3, [r4, #12]
    14ee:	6123      	str	r3, [r4, #16]
    14f0:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    14f2:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    14f4:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    14f6:	0082      	lsls	r2, r0, #2
    14f8:	4b79      	ldr	r3, [pc, #484]	; (16e0 <tc_init+0x21c>)
    14fa:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    14fc:	6025      	str	r5, [r4, #0]
#if SAMD09 || SAMD10 || SAMD11 || SAMHA1
	/* Check if even numbered TC modules are being configured in 32-bit
	 * counter size. Only odd numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    14fe:	78b3      	ldrb	r3, [r6, #2]
    1500:	2b08      	cmp	r3, #8
    1502:	d006      	beq.n	1512 <tc_init+0x4e>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    1504:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1506:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1508:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    150a:	07db      	lsls	r3, r3, #31
    150c:	d505      	bpl.n	151a <tc_init+0x56>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    150e:	b005      	add	sp, #20
    1510:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    1512:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1514:	07fa      	lsls	r2, r7, #31
    1516:	d4fa      	bmi.n	150e <tc_init+0x4a>
    1518:	e7f4      	b.n	1504 <tc_init+0x40>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    151a:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
    151c:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    151e:	06db      	lsls	r3, r3, #27
    1520:	d4f5      	bmi.n	150e <tc_init+0x4a>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    1522:	882b      	ldrh	r3, [r5, #0]
    1524:	079b      	lsls	r3, r3, #30
    1526:	d4f2      	bmi.n	150e <tc_init+0x4a>
	if (config->pwm_channel[0].enabled) {
    1528:	7c33      	ldrb	r3, [r6, #16]
    152a:	2b00      	cmp	r3, #0
    152c:	d000      	beq.n	1530 <tc_init+0x6c>
    152e:	e07a      	b.n	1626 <tc_init+0x162>
	if (config->pwm_channel[1].enabled) {
    1530:	7f33      	ldrb	r3, [r6, #28]
    1532:	2b00      	cmp	r3, #0
    1534:	d000      	beq.n	1538 <tc_init+0x74>
    1536:	e082      	b.n	163e <tc_init+0x17a>
    1538:	496a      	ldr	r1, [pc, #424]	; (16e4 <tc_init+0x220>)
    153a:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
    153c:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    153e:	ab02      	add	r3, sp, #8
    1540:	5ad3      	ldrh	r3, [r2, r3]
    1542:	4303      	orrs	r3, r0
    1544:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    1546:	78b3      	ldrb	r3, [r6, #2]
    1548:	2b08      	cmp	r3, #8
    154a:	d100      	bne.n	154e <tc_init+0x8a>
    154c:	e087      	b.n	165e <tc_init+0x19a>
	gclk_chan_config.source_generator = config->clock_source;
    154e:	7833      	ldrb	r3, [r6, #0]
    1550:	466a      	mov	r2, sp
    1552:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1554:	ab03      	add	r3, sp, #12
    1556:	5ddf      	ldrb	r7, [r3, r7]
    1558:	4669      	mov	r1, sp
    155a:	0038      	movs	r0, r7
    155c:	4b62      	ldr	r3, [pc, #392]	; (16e8 <tc_init+0x224>)
    155e:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    1560:	0038      	movs	r0, r7
    1562:	4b62      	ldr	r3, [pc, #392]	; (16ec <tc_init+0x228>)
    1564:	4798      	blx	r3
	ctrla_tmp =
    1566:	8931      	ldrh	r1, [r6, #8]
    1568:	88b3      	ldrh	r3, [r6, #4]
    156a:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    156c:	78b1      	ldrb	r1, [r6, #2]
    156e:	79b2      	ldrb	r2, [r6, #6]
    1570:	4311      	orrs	r1, r2
	ctrla_tmp =
    1572:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    1574:	7873      	ldrb	r3, [r6, #1]
    1576:	2b00      	cmp	r3, #0
    1578:	d002      	beq.n	1580 <tc_init+0xbc>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    157a:	2380      	movs	r3, #128	; 0x80
    157c:	011b      	lsls	r3, r3, #4
    157e:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1580:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1582:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1584:	b25b      	sxtb	r3, r3
    1586:	2b00      	cmp	r3, #0
    1588:	dbfb      	blt.n	1582 <tc_init+0xbe>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    158a:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
    158c:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    158e:	1e4b      	subs	r3, r1, #1
    1590:	4199      	sbcs	r1, r3
    1592:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    1594:	7bb3      	ldrb	r3, [r6, #14]
    1596:	2b00      	cmp	r3, #0
    1598:	d001      	beq.n	159e <tc_init+0xda>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    159a:	2301      	movs	r3, #1
    159c:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    159e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    15a0:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    15a2:	b25b      	sxtb	r3, r3
    15a4:	2b00      	cmp	r3, #0
    15a6:	dbfb      	blt.n	15a0 <tc_init+0xdc>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    15a8:	23ff      	movs	r3, #255	; 0xff
    15aa:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    15ac:	2900      	cmp	r1, #0
    15ae:	d005      	beq.n	15bc <tc_init+0xf8>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    15b0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    15b2:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    15b4:	b25b      	sxtb	r3, r3
    15b6:	2b00      	cmp	r3, #0
    15b8:	dbfb      	blt.n	15b2 <tc_init+0xee>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    15ba:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    15bc:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
    15be:	7af3      	ldrb	r3, [r6, #11]
    15c0:	2b00      	cmp	r3, #0
    15c2:	d001      	beq.n	15c8 <tc_init+0x104>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    15c4:	2310      	movs	r3, #16
    15c6:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    15c8:	7b33      	ldrb	r3, [r6, #12]
    15ca:	2b00      	cmp	r3, #0
    15cc:	d001      	beq.n	15d2 <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    15ce:	2320      	movs	r3, #32
    15d0:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    15d2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    15d4:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    15d6:	b25b      	sxtb	r3, r3
    15d8:	2b00      	cmp	r3, #0
    15da:	dbfb      	blt.n	15d4 <tc_init+0x110>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    15dc:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    15de:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    15e0:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    15e2:	b25b      	sxtb	r3, r3
    15e4:	2b00      	cmp	r3, #0
    15e6:	dbfb      	blt.n	15e0 <tc_init+0x11c>
	switch (module_inst->counter_size) {
    15e8:	7923      	ldrb	r3, [r4, #4]
    15ea:	2b04      	cmp	r3, #4
    15ec:	d03f      	beq.n	166e <tc_init+0x1aa>
    15ee:	2b08      	cmp	r3, #8
    15f0:	d05e      	beq.n	16b0 <tc_init+0x1ec>
	return STATUS_ERR_INVALID_ARG;
    15f2:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    15f4:	2b00      	cmp	r3, #0
    15f6:	d000      	beq.n	15fa <tc_init+0x136>
    15f8:	e789      	b.n	150e <tc_init+0x4a>
    15fa:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    15fc:	b25b      	sxtb	r3, r3
    15fe:	2b00      	cmp	r3, #0
    1600:	dbfb      	blt.n	15fa <tc_init+0x136>
				= config->counter_16_bit.value;
    1602:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    1604:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1606:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1608:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    160a:	b25b      	sxtb	r3, r3
    160c:	2b00      	cmp	r3, #0
    160e:	dbfb      	blt.n	1608 <tc_init+0x144>
					config->counter_16_bit.compare_capture_channel[0];
    1610:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    1612:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1614:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1616:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1618:	b25b      	sxtb	r3, r3
    161a:	2b00      	cmp	r3, #0
    161c:	dbfb      	blt.n	1616 <tc_init+0x152>
					config->counter_16_bit.compare_capture_channel[1];
    161e:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    1620:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    1622:	2000      	movs	r0, #0
    1624:	e773      	b.n	150e <tc_init+0x4a>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1626:	a901      	add	r1, sp, #4
    1628:	2301      	movs	r3, #1
    162a:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    162c:	2200      	movs	r2, #0
    162e:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    1630:	7e32      	ldrb	r2, [r6, #24]
    1632:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1634:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1636:	7d30      	ldrb	r0, [r6, #20]
    1638:	4b2d      	ldr	r3, [pc, #180]	; (16f0 <tc_init+0x22c>)
    163a:	4798      	blx	r3
    163c:	e778      	b.n	1530 <tc_init+0x6c>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    163e:	a901      	add	r1, sp, #4
    1640:	2301      	movs	r3, #1
    1642:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1644:	2200      	movs	r2, #0
    1646:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1648:	3224      	adds	r2, #36	; 0x24
    164a:	18b2      	adds	r2, r6, r2
    164c:	7812      	ldrb	r2, [r2, #0]
    164e:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1650:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1652:	331f      	adds	r3, #31
    1654:	18f3      	adds	r3, r6, r3
    1656:	7818      	ldrb	r0, [r3, #0]
    1658:	4b25      	ldr	r3, [pc, #148]	; (16f0 <tc_init+0x22c>)
    165a:	4798      	blx	r3
    165c:	e76c      	b.n	1538 <tc_init+0x74>
    165e:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
    1660:	1c7a      	adds	r2, r7, #1
    1662:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1664:	ab02      	add	r3, sp, #8
    1666:	5ad3      	ldrh	r3, [r2, r3]
    1668:	4303      	orrs	r3, r0
    166a:	620b      	str	r3, [r1, #32]
    166c:	e76f      	b.n	154e <tc_init+0x8a>
    166e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1670:	b25b      	sxtb	r3, r3
    1672:	2b00      	cmp	r3, #0
    1674:	dbfb      	blt.n	166e <tc_init+0x1aa>
					config->counter_8_bit.value;
    1676:	2328      	movs	r3, #40	; 0x28
    1678:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    167a:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    167c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    167e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1680:	b25b      	sxtb	r3, r3
    1682:	2b00      	cmp	r3, #0
    1684:	dbfb      	blt.n	167e <tc_init+0x1ba>
					config->counter_8_bit.period;
    1686:	2329      	movs	r3, #41	; 0x29
    1688:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    168a:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    168c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    168e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1690:	b25b      	sxtb	r3, r3
    1692:	2b00      	cmp	r3, #0
    1694:	dbfb      	blt.n	168e <tc_init+0x1ca>
					config->counter_8_bit.compare_capture_channel[0];
    1696:	232a      	movs	r3, #42	; 0x2a
    1698:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    169a:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    169c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    169e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    16a0:	b25b      	sxtb	r3, r3
    16a2:	2b00      	cmp	r3, #0
    16a4:	dbfb      	blt.n	169e <tc_init+0x1da>
					config->counter_8_bit.compare_capture_channel[1];
    16a6:	232b      	movs	r3, #43	; 0x2b
    16a8:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    16aa:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    16ac:	2000      	movs	r0, #0
    16ae:	e72e      	b.n	150e <tc_init+0x4a>
    16b0:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    16b2:	b25b      	sxtb	r3, r3
    16b4:	2b00      	cmp	r3, #0
    16b6:	dbfb      	blt.n	16b0 <tc_init+0x1ec>
				= config->counter_32_bit.value;
    16b8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    16ba:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    16bc:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    16be:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    16c0:	b25b      	sxtb	r3, r3
    16c2:	2b00      	cmp	r3, #0
    16c4:	dbfb      	blt.n	16be <tc_init+0x1fa>
			hw->COUNT32.CC[0].reg =
    16c6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    16c8:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    16ca:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    16cc:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    16ce:	b25b      	sxtb	r3, r3
    16d0:	2b00      	cmp	r3, #0
    16d2:	dbfb      	blt.n	16cc <tc_init+0x208>
					config->counter_32_bit.compare_capture_channel[1];
    16d4:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    16d6:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    16d8:	2000      	movs	r0, #0
    16da:	e718      	b.n	150e <tc_init+0x4a>
    16dc:	000014a1 	.word	0x000014a1
    16e0:	20000320 	.word	0x20000320
    16e4:	40000400 	.word	0x40000400
    16e8:	00001e69 	.word	0x00001e69
    16ec:	00001ddd 	.word	0x00001ddd
    16f0:	00001f61 	.word	0x00001f61

000016f4 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    16f4:	1c93      	adds	r3, r2, #2
    16f6:	009b      	lsls	r3, r3, #2
    16f8:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    16fa:	2a02      	cmp	r2, #2
    16fc:	d009      	beq.n	1712 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    16fe:	2a03      	cmp	r2, #3
    1700:	d00c      	beq.n	171c <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    1702:	2301      	movs	r3, #1
    1704:	4093      	lsls	r3, r2
    1706:	001a      	movs	r2, r3
    1708:	7e03      	ldrb	r3, [r0, #24]
    170a:	4313      	orrs	r3, r2
    170c:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    170e:	2000      	movs	r0, #0
    1710:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    1712:	7e03      	ldrb	r3, [r0, #24]
    1714:	2210      	movs	r2, #16
    1716:	4313      	orrs	r3, r2
    1718:	7603      	strb	r3, [r0, #24]
    171a:	e7f8      	b.n	170e <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    171c:	7e03      	ldrb	r3, [r0, #24]
    171e:	2220      	movs	r2, #32
    1720:	4313      	orrs	r3, r2
    1722:	7603      	strb	r3, [r0, #24]
    1724:	e7f3      	b.n	170e <tc_register_callback+0x1a>
	...

00001728 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1728:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    172a:	0080      	lsls	r0, r0, #2
    172c:	4b16      	ldr	r3, [pc, #88]	; (1788 <_tc_interrupt_handler+0x60>)
    172e:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1730:	6823      	ldr	r3, [r4, #0]
    1732:	7b9d      	ldrb	r5, [r3, #14]
    1734:	7e22      	ldrb	r2, [r4, #24]
    1736:	7e63      	ldrb	r3, [r4, #25]
    1738:	4013      	ands	r3, r2
    173a:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    173c:	07eb      	lsls	r3, r5, #31
    173e:	d406      	bmi.n	174e <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1740:	07ab      	lsls	r3, r5, #30
    1742:	d40b      	bmi.n	175c <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1744:	06eb      	lsls	r3, r5, #27
    1746:	d410      	bmi.n	176a <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1748:	06ab      	lsls	r3, r5, #26
    174a:	d415      	bmi.n	1778 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    174c:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    174e:	0020      	movs	r0, r4
    1750:	68a3      	ldr	r3, [r4, #8]
    1752:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1754:	2301      	movs	r3, #1
    1756:	6822      	ldr	r2, [r4, #0]
    1758:	7393      	strb	r3, [r2, #14]
    175a:	e7f1      	b.n	1740 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    175c:	0020      	movs	r0, r4
    175e:	68e3      	ldr	r3, [r4, #12]
    1760:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1762:	2302      	movs	r3, #2
    1764:	6822      	ldr	r2, [r4, #0]
    1766:	7393      	strb	r3, [r2, #14]
    1768:	e7ec      	b.n	1744 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    176a:	0020      	movs	r0, r4
    176c:	6923      	ldr	r3, [r4, #16]
    176e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1770:	2310      	movs	r3, #16
    1772:	6822      	ldr	r2, [r4, #0]
    1774:	7393      	strb	r3, [r2, #14]
    1776:	e7e7      	b.n	1748 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1778:	0020      	movs	r0, r4
    177a:	6963      	ldr	r3, [r4, #20]
    177c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    177e:	6823      	ldr	r3, [r4, #0]
    1780:	2220      	movs	r2, #32
    1782:	739a      	strb	r2, [r3, #14]
}
    1784:	e7e2      	b.n	174c <_tc_interrupt_handler+0x24>
    1786:	46c0      	nop			; (mov r8, r8)
    1788:	20000320 	.word	0x20000320

0000178c <TC1_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    178c:	b510      	push	{r4, lr}
    178e:	2000      	movs	r0, #0
    1790:	4b01      	ldr	r3, [pc, #4]	; (1798 <TC1_Handler+0xc>)
    1792:	4798      	blx	r3
    1794:	bd10      	pop	{r4, pc}
    1796:	46c0      	nop			; (mov r8, r8)
    1798:	00001729 	.word	0x00001729

0000179c <TC2_Handler>:
    179c:	b510      	push	{r4, lr}
    179e:	2001      	movs	r0, #1
    17a0:	4b01      	ldr	r3, [pc, #4]	; (17a8 <TC2_Handler+0xc>)
    17a2:	4798      	blx	r3
    17a4:	bd10      	pop	{r4, pc}
    17a6:	46c0      	nop			; (mov r8, r8)
    17a8:	00001729 	.word	0x00001729

000017ac <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    17ac:	b500      	push	{lr}
    17ae:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    17b0:	ab01      	add	r3, sp, #4
    17b2:	2280      	movs	r2, #128	; 0x80
    17b4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    17b6:	780a      	ldrb	r2, [r1, #0]
    17b8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    17ba:	784a      	ldrb	r2, [r1, #1]
    17bc:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    17be:	788a      	ldrb	r2, [r1, #2]
    17c0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    17c2:	0019      	movs	r1, r3
    17c4:	4b01      	ldr	r3, [pc, #4]	; (17cc <port_pin_set_config+0x20>)
    17c6:	4798      	blx	r3
}
    17c8:	b003      	add	sp, #12
    17ca:	bd00      	pop	{pc}
    17cc:	00001f61 	.word	0x00001f61

000017d0 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    17d0:	4770      	bx	lr
	...

000017d4 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    17d4:	4b0c      	ldr	r3, [pc, #48]	; (1808 <cpu_irq_enter_critical+0x34>)
    17d6:	681b      	ldr	r3, [r3, #0]
    17d8:	2b00      	cmp	r3, #0
    17da:	d106      	bne.n	17ea <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    17dc:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    17e0:	2b00      	cmp	r3, #0
    17e2:	d007      	beq.n	17f4 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    17e4:	2200      	movs	r2, #0
    17e6:	4b09      	ldr	r3, [pc, #36]	; (180c <cpu_irq_enter_critical+0x38>)
    17e8:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    17ea:	4a07      	ldr	r2, [pc, #28]	; (1808 <cpu_irq_enter_critical+0x34>)
    17ec:	6813      	ldr	r3, [r2, #0]
    17ee:	3301      	adds	r3, #1
    17f0:	6013      	str	r3, [r2, #0]
}
    17f2:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    17f4:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    17f6:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    17fa:	2200      	movs	r2, #0
    17fc:	4b04      	ldr	r3, [pc, #16]	; (1810 <cpu_irq_enter_critical+0x3c>)
    17fe:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1800:	3201      	adds	r2, #1
    1802:	4b02      	ldr	r3, [pc, #8]	; (180c <cpu_irq_enter_critical+0x38>)
    1804:	701a      	strb	r2, [r3, #0]
    1806:	e7f0      	b.n	17ea <cpu_irq_enter_critical+0x16>
    1808:	200001e8 	.word	0x200001e8
    180c:	200001ec 	.word	0x200001ec
    1810:	20000014 	.word	0x20000014

00001814 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1814:	4b08      	ldr	r3, [pc, #32]	; (1838 <cpu_irq_leave_critical+0x24>)
    1816:	681a      	ldr	r2, [r3, #0]
    1818:	3a01      	subs	r2, #1
    181a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    181c:	681b      	ldr	r3, [r3, #0]
    181e:	2b00      	cmp	r3, #0
    1820:	d109      	bne.n	1836 <cpu_irq_leave_critical+0x22>
    1822:	4b06      	ldr	r3, [pc, #24]	; (183c <cpu_irq_leave_critical+0x28>)
    1824:	781b      	ldrb	r3, [r3, #0]
    1826:	2b00      	cmp	r3, #0
    1828:	d005      	beq.n	1836 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    182a:	2201      	movs	r2, #1
    182c:	4b04      	ldr	r3, [pc, #16]	; (1840 <cpu_irq_leave_critical+0x2c>)
    182e:	701a      	strb	r2, [r3, #0]
    1830:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1834:	b662      	cpsie	i
	}
}
    1836:	4770      	bx	lr
    1838:	200001e8 	.word	0x200001e8
    183c:	200001ec 	.word	0x200001ec
    1840:	20000014 	.word	0x20000014

00001844 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1844:	b510      	push	{r4, lr}
	switch (clock_source) {
    1846:	2808      	cmp	r0, #8
    1848:	d803      	bhi.n	1852 <system_clock_source_get_hz+0xe>
    184a:	0080      	lsls	r0, r0, #2
    184c:	4b1b      	ldr	r3, [pc, #108]	; (18bc <system_clock_source_get_hz+0x78>)
    184e:	581b      	ldr	r3, [r3, r0]
    1850:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1852:	2000      	movs	r0, #0
    1854:	e030      	b.n	18b8 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    1856:	4b1a      	ldr	r3, [pc, #104]	; (18c0 <system_clock_source_get_hz+0x7c>)
    1858:	6918      	ldr	r0, [r3, #16]
    185a:	e02d      	b.n	18b8 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    185c:	4b19      	ldr	r3, [pc, #100]	; (18c4 <system_clock_source_get_hz+0x80>)
    185e:	6a1b      	ldr	r3, [r3, #32]
    1860:	059b      	lsls	r3, r3, #22
    1862:	0f9b      	lsrs	r3, r3, #30
    1864:	4818      	ldr	r0, [pc, #96]	; (18c8 <system_clock_source_get_hz+0x84>)
    1866:	40d8      	lsrs	r0, r3
    1868:	e026      	b.n	18b8 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    186a:	4b15      	ldr	r3, [pc, #84]	; (18c0 <system_clock_source_get_hz+0x7c>)
    186c:	6958      	ldr	r0, [r3, #20]
    186e:	e023      	b.n	18b8 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1870:	4b13      	ldr	r3, [pc, #76]	; (18c0 <system_clock_source_get_hz+0x7c>)
    1872:	681b      	ldr	r3, [r3, #0]
			return 0;
    1874:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1876:	079b      	lsls	r3, r3, #30
    1878:	d51e      	bpl.n	18b8 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    187a:	4912      	ldr	r1, [pc, #72]	; (18c4 <system_clock_source_get_hz+0x80>)
    187c:	2210      	movs	r2, #16
    187e:	68cb      	ldr	r3, [r1, #12]
    1880:	421a      	tst	r2, r3
    1882:	d0fc      	beq.n	187e <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1884:	4b0e      	ldr	r3, [pc, #56]	; (18c0 <system_clock_source_get_hz+0x7c>)
    1886:	681b      	ldr	r3, [r3, #0]
    1888:	075b      	lsls	r3, r3, #29
    188a:	d401      	bmi.n	1890 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    188c:	480f      	ldr	r0, [pc, #60]	; (18cc <system_clock_source_get_hz+0x88>)
    188e:	e013      	b.n	18b8 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1890:	2000      	movs	r0, #0
    1892:	4b0f      	ldr	r3, [pc, #60]	; (18d0 <system_clock_source_get_hz+0x8c>)
    1894:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1896:	4b0a      	ldr	r3, [pc, #40]	; (18c0 <system_clock_source_get_hz+0x7c>)
    1898:	689b      	ldr	r3, [r3, #8]
    189a:	041b      	lsls	r3, r3, #16
    189c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    189e:	4358      	muls	r0, r3
    18a0:	e00a      	b.n	18b8 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    18a2:	2350      	movs	r3, #80	; 0x50
    18a4:	4a07      	ldr	r2, [pc, #28]	; (18c4 <system_clock_source_get_hz+0x80>)
    18a6:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    18a8:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    18aa:	075b      	lsls	r3, r3, #29
    18ac:	d504      	bpl.n	18b8 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    18ae:	4b04      	ldr	r3, [pc, #16]	; (18c0 <system_clock_source_get_hz+0x7c>)
    18b0:	68d8      	ldr	r0, [r3, #12]
    18b2:	e001      	b.n	18b8 <system_clock_source_get_hz+0x74>
		return 32768UL;
    18b4:	2080      	movs	r0, #128	; 0x80
    18b6:	0200      	lsls	r0, r0, #8
	}
}
    18b8:	bd10      	pop	{r4, pc}
    18ba:	46c0      	nop			; (mov r8, r8)
    18bc:	00003464 	.word	0x00003464
    18c0:	200001f0 	.word	0x200001f0
    18c4:	40000800 	.word	0x40000800
    18c8:	007a1200 	.word	0x007a1200
    18cc:	02dc6c00 	.word	0x02dc6c00
    18d0:	00001e85 	.word	0x00001e85

000018d4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    18d4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    18d6:	490c      	ldr	r1, [pc, #48]	; (1908 <system_clock_source_osc8m_set_config+0x34>)
    18d8:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    18da:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    18dc:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    18de:	7840      	ldrb	r0, [r0, #1]
    18e0:	2201      	movs	r2, #1
    18e2:	4010      	ands	r0, r2
    18e4:	0180      	lsls	r0, r0, #6
    18e6:	2640      	movs	r6, #64	; 0x40
    18e8:	43b3      	bics	r3, r6
    18ea:	4303      	orrs	r3, r0
    18ec:	402a      	ands	r2, r5
    18ee:	01d2      	lsls	r2, r2, #7
    18f0:	2080      	movs	r0, #128	; 0x80
    18f2:	4383      	bics	r3, r0
    18f4:	4313      	orrs	r3, r2
    18f6:	2203      	movs	r2, #3
    18f8:	4022      	ands	r2, r4
    18fa:	0212      	lsls	r2, r2, #8
    18fc:	4803      	ldr	r0, [pc, #12]	; (190c <system_clock_source_osc8m_set_config+0x38>)
    18fe:	4003      	ands	r3, r0
    1900:	4313      	orrs	r3, r2
    1902:	620b      	str	r3, [r1, #32]
}
    1904:	bd70      	pop	{r4, r5, r6, pc}
    1906:	46c0      	nop			; (mov r8, r8)
    1908:	40000800 	.word	0x40000800
    190c:	fffffcff 	.word	0xfffffcff

00001910 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    1910:	b5f0      	push	{r4, r5, r6, r7, lr}
    1912:	46ce      	mov	lr, r9
    1914:	4647      	mov	r7, r8
    1916:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    1918:	4b19      	ldr	r3, [pc, #100]	; (1980 <system_clock_source_osc32k_set_config+0x70>)
    191a:	4699      	mov	r9, r3
    191c:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    191e:	7841      	ldrb	r1, [r0, #1]
    1920:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    1922:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1924:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1926:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    1928:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    192a:	7880      	ldrb	r0, [r0, #2]
    192c:	2101      	movs	r1, #1
    192e:	4008      	ands	r0, r1
    1930:	0080      	lsls	r0, r0, #2
    1932:	2204      	movs	r2, #4
    1934:	4393      	bics	r3, r2
    1936:	4303      	orrs	r3, r0
    1938:	4660      	mov	r0, ip
    193a:	4008      	ands	r0, r1
    193c:	00c0      	lsls	r0, r0, #3
    193e:	3204      	adds	r2, #4
    1940:	4393      	bics	r3, r2
    1942:	4303      	orrs	r3, r0
    1944:	0038      	movs	r0, r7
    1946:	4008      	ands	r0, r1
    1948:	0180      	lsls	r0, r0, #6
    194a:	2740      	movs	r7, #64	; 0x40
    194c:	43bb      	bics	r3, r7
    194e:	4303      	orrs	r3, r0
    1950:	0030      	movs	r0, r6
    1952:	4008      	ands	r0, r1
    1954:	01c0      	lsls	r0, r0, #7
    1956:	2680      	movs	r6, #128	; 0x80
    1958:	43b3      	bics	r3, r6
    195a:	4303      	orrs	r3, r0
    195c:	2007      	movs	r0, #7
    195e:	4005      	ands	r5, r0
    1960:	022d      	lsls	r5, r5, #8
    1962:	4808      	ldr	r0, [pc, #32]	; (1984 <system_clock_source_osc32k_set_config+0x74>)
    1964:	4003      	ands	r3, r0
    1966:	432b      	orrs	r3, r5
    1968:	4021      	ands	r1, r4
    196a:	0309      	lsls	r1, r1, #12
    196c:	4806      	ldr	r0, [pc, #24]	; (1988 <system_clock_source_osc32k_set_config+0x78>)
    196e:	4003      	ands	r3, r0
    1970:	430b      	orrs	r3, r1
    1972:	464a      	mov	r2, r9
    1974:	6193      	str	r3, [r2, #24]
}
    1976:	bc0c      	pop	{r2, r3}
    1978:	4690      	mov	r8, r2
    197a:	4699      	mov	r9, r3
    197c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    197e:	46c0      	nop			; (mov r8, r8)
    1980:	40000800 	.word	0x40000800
    1984:	fffff8ff 	.word	0xfffff8ff
    1988:	ffffefff 	.word	0xffffefff

0000198c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    198c:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    198e:	7a03      	ldrb	r3, [r0, #8]
    1990:	069b      	lsls	r3, r3, #26
    1992:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    1994:	8942      	ldrh	r2, [r0, #10]
    1996:	0592      	lsls	r2, r2, #22
    1998:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    199a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    199c:	4918      	ldr	r1, [pc, #96]	; (1a00 <system_clock_source_dfll_set_config+0x74>)
    199e:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    19a0:	7983      	ldrb	r3, [r0, #6]
    19a2:	79c2      	ldrb	r2, [r0, #7]
    19a4:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    19a6:	8842      	ldrh	r2, [r0, #2]
    19a8:	8884      	ldrh	r4, [r0, #4]
    19aa:	4322      	orrs	r2, r4
    19ac:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    19ae:	7842      	ldrb	r2, [r0, #1]
    19b0:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    19b2:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    19b4:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    19b6:	7803      	ldrb	r3, [r0, #0]
    19b8:	2b04      	cmp	r3, #4
    19ba:	d011      	beq.n	19e0 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    19bc:	2b20      	cmp	r3, #32
    19be:	d10e      	bne.n	19de <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    19c0:	7b03      	ldrb	r3, [r0, #12]
    19c2:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    19c4:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    19c6:	4313      	orrs	r3, r2
    19c8:	89c2      	ldrh	r2, [r0, #14]
    19ca:	0412      	lsls	r2, r2, #16
    19cc:	490d      	ldr	r1, [pc, #52]	; (1a04 <system_clock_source_dfll_set_config+0x78>)
    19ce:	400a      	ands	r2, r1
    19d0:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    19d2:	4a0b      	ldr	r2, [pc, #44]	; (1a00 <system_clock_source_dfll_set_config+0x74>)
    19d4:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    19d6:	6811      	ldr	r1, [r2, #0]
    19d8:	4b0b      	ldr	r3, [pc, #44]	; (1a08 <system_clock_source_dfll_set_config+0x7c>)
    19da:	430b      	orrs	r3, r1
    19dc:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    19de:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    19e0:	7b03      	ldrb	r3, [r0, #12]
    19e2:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    19e4:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    19e6:	4313      	orrs	r3, r2
    19e8:	89c2      	ldrh	r2, [r0, #14]
    19ea:	0412      	lsls	r2, r2, #16
    19ec:	4905      	ldr	r1, [pc, #20]	; (1a04 <system_clock_source_dfll_set_config+0x78>)
    19ee:	400a      	ands	r2, r1
    19f0:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    19f2:	4a03      	ldr	r2, [pc, #12]	; (1a00 <system_clock_source_dfll_set_config+0x74>)
    19f4:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    19f6:	6813      	ldr	r3, [r2, #0]
    19f8:	2104      	movs	r1, #4
    19fa:	430b      	orrs	r3, r1
    19fc:	6013      	str	r3, [r2, #0]
    19fe:	e7ee      	b.n	19de <system_clock_source_dfll_set_config+0x52>
    1a00:	200001f0 	.word	0x200001f0
    1a04:	03ff0000 	.word	0x03ff0000
    1a08:	00000424 	.word	0x00000424

00001a0c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1a0c:	2808      	cmp	r0, #8
    1a0e:	d803      	bhi.n	1a18 <system_clock_source_enable+0xc>
    1a10:	0080      	lsls	r0, r0, #2
    1a12:	4b25      	ldr	r3, [pc, #148]	; (1aa8 <system_clock_source_enable+0x9c>)
    1a14:	581b      	ldr	r3, [r3, r0]
    1a16:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1a18:	2017      	movs	r0, #23
    1a1a:	e044      	b.n	1aa6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1a1c:	4a23      	ldr	r2, [pc, #140]	; (1aac <system_clock_source_enable+0xa0>)
    1a1e:	6a13      	ldr	r3, [r2, #32]
    1a20:	2102      	movs	r1, #2
    1a22:	430b      	orrs	r3, r1
    1a24:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1a26:	2000      	movs	r0, #0
    1a28:	e03d      	b.n	1aa6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1a2a:	4a20      	ldr	r2, [pc, #128]	; (1aac <system_clock_source_enable+0xa0>)
    1a2c:	6993      	ldr	r3, [r2, #24]
    1a2e:	2102      	movs	r1, #2
    1a30:	430b      	orrs	r3, r1
    1a32:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1a34:	2000      	movs	r0, #0
		break;
    1a36:	e036      	b.n	1aa6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1a38:	4a1c      	ldr	r2, [pc, #112]	; (1aac <system_clock_source_enable+0xa0>)
    1a3a:	8a13      	ldrh	r3, [r2, #16]
    1a3c:	2102      	movs	r1, #2
    1a3e:	430b      	orrs	r3, r1
    1a40:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1a42:	2000      	movs	r0, #0
		break;
    1a44:	e02f      	b.n	1aa6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1a46:	4a19      	ldr	r2, [pc, #100]	; (1aac <system_clock_source_enable+0xa0>)
    1a48:	8a93      	ldrh	r3, [r2, #20]
    1a4a:	2102      	movs	r1, #2
    1a4c:	430b      	orrs	r3, r1
    1a4e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1a50:	2000      	movs	r0, #0
		break;
    1a52:	e028      	b.n	1aa6 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1a54:	4916      	ldr	r1, [pc, #88]	; (1ab0 <system_clock_source_enable+0xa4>)
    1a56:	680b      	ldr	r3, [r1, #0]
    1a58:	2202      	movs	r2, #2
    1a5a:	4313      	orrs	r3, r2
    1a5c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1a5e:	4b13      	ldr	r3, [pc, #76]	; (1aac <system_clock_source_enable+0xa0>)
    1a60:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1a62:	0019      	movs	r1, r3
    1a64:	320e      	adds	r2, #14
    1a66:	68cb      	ldr	r3, [r1, #12]
    1a68:	421a      	tst	r2, r3
    1a6a:	d0fc      	beq.n	1a66 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1a6c:	4a10      	ldr	r2, [pc, #64]	; (1ab0 <system_clock_source_enable+0xa4>)
    1a6e:	6891      	ldr	r1, [r2, #8]
    1a70:	4b0e      	ldr	r3, [pc, #56]	; (1aac <system_clock_source_enable+0xa0>)
    1a72:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1a74:	6852      	ldr	r2, [r2, #4]
    1a76:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1a78:	2200      	movs	r2, #0
    1a7a:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1a7c:	0019      	movs	r1, r3
    1a7e:	3210      	adds	r2, #16
    1a80:	68cb      	ldr	r3, [r1, #12]
    1a82:	421a      	tst	r2, r3
    1a84:	d0fc      	beq.n	1a80 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1a86:	4b0a      	ldr	r3, [pc, #40]	; (1ab0 <system_clock_source_enable+0xa4>)
    1a88:	681b      	ldr	r3, [r3, #0]
    1a8a:	b29b      	uxth	r3, r3
    1a8c:	4a07      	ldr	r2, [pc, #28]	; (1aac <system_clock_source_enable+0xa0>)
    1a8e:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1a90:	2000      	movs	r0, #0
    1a92:	e008      	b.n	1aa6 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1a94:	4905      	ldr	r1, [pc, #20]	; (1aac <system_clock_source_enable+0xa0>)
    1a96:	2244      	movs	r2, #68	; 0x44
    1a98:	5c8b      	ldrb	r3, [r1, r2]
    1a9a:	2002      	movs	r0, #2
    1a9c:	4303      	orrs	r3, r0
    1a9e:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1aa0:	2000      	movs	r0, #0
		break;
    1aa2:	e000      	b.n	1aa6 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1aa4:	2000      	movs	r0, #0
}
    1aa6:	4770      	bx	lr
    1aa8:	00003488 	.word	0x00003488
    1aac:	40000800 	.word	0x40000800
    1ab0:	200001f0 	.word	0x200001f0

00001ab4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ab6:	46ce      	mov	lr, r9
    1ab8:	4647      	mov	r7, r8
    1aba:	b580      	push	{r7, lr}
    1abc:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1abe:	22c2      	movs	r2, #194	; 0xc2
    1ac0:	00d2      	lsls	r2, r2, #3
    1ac2:	4b4d      	ldr	r3, [pc, #308]	; (1bf8 <system_clock_init+0x144>)
    1ac4:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1ac6:	494d      	ldr	r1, [pc, #308]	; (1bfc <system_clock_init+0x148>)
    1ac8:	684b      	ldr	r3, [r1, #4]
    1aca:	221e      	movs	r2, #30
    1acc:	4393      	bics	r3, r2
    1ace:	3a1c      	subs	r2, #28
    1ad0:	4313      	orrs	r3, r2
    1ad2:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    1ad4:	ab01      	add	r3, sp, #4
    1ad6:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1ad8:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1ada:	4d49      	ldr	r5, [pc, #292]	; (1c00 <system_clock_init+0x14c>)
    1adc:	b2e0      	uxtb	r0, r4
    1ade:	a901      	add	r1, sp, #4
    1ae0:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1ae2:	3401      	adds	r4, #1
    1ae4:	2c18      	cmp	r4, #24
    1ae6:	d1f9      	bne.n	1adc <system_clock_init+0x28>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			(*(uint32_t *)FUSES_OSC32K_ADDR >> FUSES_OSC32K_Pos);
    1ae8:	4c46      	ldr	r4, [pc, #280]	; (1c04 <system_clock_init+0x150>)
	SYSCTRL->OSC32K.bit.CALIB =
    1aea:	6823      	ldr	r3, [r4, #0]
    1aec:	04db      	lsls	r3, r3, #19
    1aee:	4942      	ldr	r1, [pc, #264]	; (1bf8 <system_clock_init+0x144>)
    1af0:	698a      	ldr	r2, [r1, #24]
    1af2:	0e5b      	lsrs	r3, r3, #25
    1af4:	041b      	lsls	r3, r3, #16
    1af6:	4844      	ldr	r0, [pc, #272]	; (1c08 <system_clock_init+0x154>)
    1af8:	4002      	ands	r2, r0
    1afa:	4313      	orrs	r3, r2
    1afc:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    1afe:	a80a      	add	r0, sp, #40	; 0x28
    1b00:	2301      	movs	r3, #1
    1b02:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    1b04:	7083      	strb	r3, [r0, #2]
	config->run_in_standby      = false;
    1b06:	2500      	movs	r5, #0
    1b08:	70c5      	strb	r5, [r0, #3]
	config->on_demand           = true;
    1b0a:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    1b0c:	3306      	adds	r3, #6
    1b0e:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
    1b10:	7145      	strb	r5, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    1b12:	4b3e      	ldr	r3, [pc, #248]	; (1c0c <system_clock_init+0x158>)
    1b14:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    1b16:	2004      	movs	r0, #4
    1b18:	4b3d      	ldr	r3, [pc, #244]	; (1c10 <system_clock_init+0x15c>)
    1b1a:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1b1c:	ab05      	add	r3, sp, #20
    1b1e:	2200      	movs	r2, #0
    1b20:	805d      	strh	r5, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1b22:	809d      	strh	r5, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1b24:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1b26:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    1b28:	213f      	movs	r1, #63	; 0x3f
    1b2a:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1b2c:	393b      	subs	r1, #59	; 0x3b
    1b2e:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1b30:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1b32:	6823      	ldr	r3, [r4, #0]
    1b34:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1b36:	2b3f      	cmp	r3, #63	; 0x3f
    1b38:	d05b      	beq.n	1bf2 <system_clock_init+0x13e>
		coarse = 0x1f;
	}

	dfll_conf.coarse_value = coarse;
    1b3a:	a805      	add	r0, sp, #20
    1b3c:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1b3e:	23b7      	movs	r3, #183	; 0xb7
    1b40:	00db      	lsls	r3, r3, #3
    1b42:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1b44:	2307      	movs	r3, #7
    1b46:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1b48:	3338      	adds	r3, #56	; 0x38
    1b4a:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1b4c:	4b31      	ldr	r3, [pc, #196]	; (1c14 <system_clock_init+0x160>)
    1b4e:	4798      	blx	r3
	config->run_in_standby  = false;
    1b50:	a804      	add	r0, sp, #16
    1b52:	2500      	movs	r5, #0
    1b54:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    1b56:	2601      	movs	r6, #1
    1b58:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1b5a:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1b5c:	4b2e      	ldr	r3, [pc, #184]	; (1c18 <system_clock_init+0x164>)
    1b5e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1b60:	2006      	movs	r0, #6
    1b62:	4f2b      	ldr	r7, [pc, #172]	; (1c10 <system_clock_init+0x15c>)
    1b64:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1b66:	4b2d      	ldr	r3, [pc, #180]	; (1c1c <system_clock_init+0x168>)
    1b68:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1b6a:	ac01      	add	r4, sp, #4
    1b6c:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    1b6e:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1b70:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1b72:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1b74:	2304      	movs	r3, #4
    1b76:	7023      	strb	r3, [r4, #0]
    1b78:	0021      	movs	r1, r4
    1b7a:	2001      	movs	r0, #1
    1b7c:	4b28      	ldr	r3, [pc, #160]	; (1c20 <system_clock_init+0x16c>)
    1b7e:	4699      	mov	r9, r3
    1b80:	4798      	blx	r3
    1b82:	2001      	movs	r0, #1
    1b84:	4b27      	ldr	r3, [pc, #156]	; (1c24 <system_clock_init+0x170>)
    1b86:	4698      	mov	r8, r3
    1b88:	4798      	blx	r3
	config->division_factor    = 1;
    1b8a:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    1b8c:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1b8e:	2306      	movs	r3, #6
    1b90:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    1b92:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1b94:	7265      	strb	r5, [r4, #9]
    1b96:	0021      	movs	r1, r4
    1b98:	2003      	movs	r0, #3
    1b9a:	47c8      	blx	r9
    1b9c:	2003      	movs	r0, #3
    1b9e:	47c0      	blx	r8
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1ba0:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1ba2:	0021      	movs	r1, r4
    1ba4:	2000      	movs	r0, #0
    1ba6:	4b16      	ldr	r3, [pc, #88]	; (1c00 <system_clock_init+0x14c>)
    1ba8:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    1baa:	2000      	movs	r0, #0
    1bac:	4b1e      	ldr	r3, [pc, #120]	; (1c28 <system_clock_init+0x174>)
    1bae:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1bb0:	2007      	movs	r0, #7
    1bb2:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1bb4:	4910      	ldr	r1, [pc, #64]	; (1bf8 <system_clock_init+0x144>)
    1bb6:	22d0      	movs	r2, #208	; 0xd0
    1bb8:	68cb      	ldr	r3, [r1, #12]
    1bba:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1bbc:	2bd0      	cmp	r3, #208	; 0xd0
    1bbe:	d1fb      	bne.n	1bb8 <system_clock_init+0x104>
	PM->CPUSEL.reg = (uint32_t)divider;
    1bc0:	4a1a      	ldr	r2, [pc, #104]	; (1c2c <system_clock_init+0x178>)
    1bc2:	2300      	movs	r3, #0
    1bc4:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1bc6:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1bc8:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1bca:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    1bcc:	a901      	add	r1, sp, #4
    1bce:	2201      	movs	r2, #1
    1bd0:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    1bd2:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    1bd4:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1bd6:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1bd8:	3307      	adds	r3, #7
    1bda:	700b      	strb	r3, [r1, #0]
    1bdc:	2000      	movs	r0, #0
    1bde:	4b10      	ldr	r3, [pc, #64]	; (1c20 <system_clock_init+0x16c>)
    1be0:	4798      	blx	r3
    1be2:	2000      	movs	r0, #0
    1be4:	4b0f      	ldr	r3, [pc, #60]	; (1c24 <system_clock_init+0x170>)
    1be6:	4798      	blx	r3
#endif
}
    1be8:	b00d      	add	sp, #52	; 0x34
    1bea:	bc0c      	pop	{r2, r3}
    1bec:	4690      	mov	r8, r2
    1bee:	4699      	mov	r9, r3
    1bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    1bf2:	3b20      	subs	r3, #32
    1bf4:	e7a1      	b.n	1b3a <system_clock_init+0x86>
    1bf6:	46c0      	nop			; (mov r8, r8)
    1bf8:	40000800 	.word	0x40000800
    1bfc:	41004000 	.word	0x41004000
    1c00:	00001e69 	.word	0x00001e69
    1c04:	00806024 	.word	0x00806024
    1c08:	ff80ffff 	.word	0xff80ffff
    1c0c:	00001911 	.word	0x00001911
    1c10:	00001a0d 	.word	0x00001a0d
    1c14:	0000198d 	.word	0x0000198d
    1c18:	000018d5 	.word	0x000018d5
    1c1c:	00001c31 	.word	0x00001c31
    1c20:	00001c55 	.word	0x00001c55
    1c24:	00001d0d 	.word	0x00001d0d
    1c28:	00001ddd 	.word	0x00001ddd
    1c2c:	40000400 	.word	0x40000400

00001c30 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1c30:	4a06      	ldr	r2, [pc, #24]	; (1c4c <system_gclk_init+0x1c>)
    1c32:	6993      	ldr	r3, [r2, #24]
    1c34:	2108      	movs	r1, #8
    1c36:	430b      	orrs	r3, r1
    1c38:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1c3a:	2201      	movs	r2, #1
    1c3c:	4b04      	ldr	r3, [pc, #16]	; (1c50 <system_gclk_init+0x20>)
    1c3e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1c40:	0019      	movs	r1, r3
    1c42:	780b      	ldrb	r3, [r1, #0]
    1c44:	4213      	tst	r3, r2
    1c46:	d1fc      	bne.n	1c42 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1c48:	4770      	bx	lr
    1c4a:	46c0      	nop			; (mov r8, r8)
    1c4c:	40000400 	.word	0x40000400
    1c50:	40000c00 	.word	0x40000c00

00001c54 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1c54:	b570      	push	{r4, r5, r6, lr}
    1c56:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1c58:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1c5a:	780d      	ldrb	r5, [r1, #0]
    1c5c:	022d      	lsls	r5, r5, #8
    1c5e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1c60:	784b      	ldrb	r3, [r1, #1]
    1c62:	2b00      	cmp	r3, #0
    1c64:	d002      	beq.n	1c6c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1c66:	2380      	movs	r3, #128	; 0x80
    1c68:	02db      	lsls	r3, r3, #11
    1c6a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1c6c:	7a4b      	ldrb	r3, [r1, #9]
    1c6e:	2b00      	cmp	r3, #0
    1c70:	d002      	beq.n	1c78 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1c72:	2380      	movs	r3, #128	; 0x80
    1c74:	031b      	lsls	r3, r3, #12
    1c76:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1c78:	6848      	ldr	r0, [r1, #4]
    1c7a:	2801      	cmp	r0, #1
    1c7c:	d910      	bls.n	1ca0 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1c7e:	1e43      	subs	r3, r0, #1
    1c80:	4218      	tst	r0, r3
    1c82:	d134      	bne.n	1cee <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1c84:	2802      	cmp	r0, #2
    1c86:	d930      	bls.n	1cea <system_gclk_gen_set_config+0x96>
    1c88:	2302      	movs	r3, #2
    1c8a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1c8c:	3201      	adds	r2, #1
						mask <<= 1) {
    1c8e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1c90:	4298      	cmp	r0, r3
    1c92:	d8fb      	bhi.n	1c8c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1c94:	0212      	lsls	r2, r2, #8
    1c96:	4332      	orrs	r2, r6
    1c98:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1c9a:	2380      	movs	r3, #128	; 0x80
    1c9c:	035b      	lsls	r3, r3, #13
    1c9e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1ca0:	7a0b      	ldrb	r3, [r1, #8]
    1ca2:	2b00      	cmp	r3, #0
    1ca4:	d002      	beq.n	1cac <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1ca6:	2380      	movs	r3, #128	; 0x80
    1ca8:	039b      	lsls	r3, r3, #14
    1caa:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1cac:	4a13      	ldr	r2, [pc, #76]	; (1cfc <system_gclk_gen_set_config+0xa8>)
    1cae:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1cb0:	b25b      	sxtb	r3, r3
    1cb2:	2b00      	cmp	r3, #0
    1cb4:	dbfb      	blt.n	1cae <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1cb6:	4b12      	ldr	r3, [pc, #72]	; (1d00 <system_gclk_gen_set_config+0xac>)
    1cb8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1cba:	4b12      	ldr	r3, [pc, #72]	; (1d04 <system_gclk_gen_set_config+0xb0>)
    1cbc:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1cbe:	4a0f      	ldr	r2, [pc, #60]	; (1cfc <system_gclk_gen_set_config+0xa8>)
    1cc0:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1cc2:	b25b      	sxtb	r3, r3
    1cc4:	2b00      	cmp	r3, #0
    1cc6:	dbfb      	blt.n	1cc0 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1cc8:	4b0c      	ldr	r3, [pc, #48]	; (1cfc <system_gclk_gen_set_config+0xa8>)
    1cca:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ccc:	001a      	movs	r2, r3
    1cce:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1cd0:	b25b      	sxtb	r3, r3
    1cd2:	2b00      	cmp	r3, #0
    1cd4:	dbfb      	blt.n	1cce <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1cd6:	4a09      	ldr	r2, [pc, #36]	; (1cfc <system_gclk_gen_set_config+0xa8>)
    1cd8:	6853      	ldr	r3, [r2, #4]
    1cda:	2180      	movs	r1, #128	; 0x80
    1cdc:	0249      	lsls	r1, r1, #9
    1cde:	400b      	ands	r3, r1
    1ce0:	431d      	orrs	r5, r3
    1ce2:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1ce4:	4b08      	ldr	r3, [pc, #32]	; (1d08 <system_gclk_gen_set_config+0xb4>)
    1ce6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1ce8:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1cea:	2200      	movs	r2, #0
    1cec:	e7d2      	b.n	1c94 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1cee:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1cf0:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1cf2:	2380      	movs	r3, #128	; 0x80
    1cf4:	029b      	lsls	r3, r3, #10
    1cf6:	431d      	orrs	r5, r3
    1cf8:	e7d2      	b.n	1ca0 <system_gclk_gen_set_config+0x4c>
    1cfa:	46c0      	nop			; (mov r8, r8)
    1cfc:	40000c00 	.word	0x40000c00
    1d00:	000017d5 	.word	0x000017d5
    1d04:	40000c08 	.word	0x40000c08
    1d08:	00001815 	.word	0x00001815

00001d0c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1d0c:	b510      	push	{r4, lr}
    1d0e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d10:	4a0b      	ldr	r2, [pc, #44]	; (1d40 <system_gclk_gen_enable+0x34>)
    1d12:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1d14:	b25b      	sxtb	r3, r3
    1d16:	2b00      	cmp	r3, #0
    1d18:	dbfb      	blt.n	1d12 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1d1a:	4b0a      	ldr	r3, [pc, #40]	; (1d44 <system_gclk_gen_enable+0x38>)
    1d1c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1d1e:	4b0a      	ldr	r3, [pc, #40]	; (1d48 <system_gclk_gen_enable+0x3c>)
    1d20:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d22:	4a07      	ldr	r2, [pc, #28]	; (1d40 <system_gclk_gen_enable+0x34>)
    1d24:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1d26:	b25b      	sxtb	r3, r3
    1d28:	2b00      	cmp	r3, #0
    1d2a:	dbfb      	blt.n	1d24 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1d2c:	4a04      	ldr	r2, [pc, #16]	; (1d40 <system_gclk_gen_enable+0x34>)
    1d2e:	6851      	ldr	r1, [r2, #4]
    1d30:	2380      	movs	r3, #128	; 0x80
    1d32:	025b      	lsls	r3, r3, #9
    1d34:	430b      	orrs	r3, r1
    1d36:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1d38:	4b04      	ldr	r3, [pc, #16]	; (1d4c <system_gclk_gen_enable+0x40>)
    1d3a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1d3c:	bd10      	pop	{r4, pc}
    1d3e:	46c0      	nop			; (mov r8, r8)
    1d40:	40000c00 	.word	0x40000c00
    1d44:	000017d5 	.word	0x000017d5
    1d48:	40000c04 	.word	0x40000c04
    1d4c:	00001815 	.word	0x00001815

00001d50 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1d50:	b570      	push	{r4, r5, r6, lr}
    1d52:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d54:	4a1a      	ldr	r2, [pc, #104]	; (1dc0 <system_gclk_gen_get_hz+0x70>)
    1d56:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1d58:	b25b      	sxtb	r3, r3
    1d5a:	2b00      	cmp	r3, #0
    1d5c:	dbfb      	blt.n	1d56 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1d5e:	4b19      	ldr	r3, [pc, #100]	; (1dc4 <system_gclk_gen_get_hz+0x74>)
    1d60:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1d62:	4b19      	ldr	r3, [pc, #100]	; (1dc8 <system_gclk_gen_get_hz+0x78>)
    1d64:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d66:	4a16      	ldr	r2, [pc, #88]	; (1dc0 <system_gclk_gen_get_hz+0x70>)
    1d68:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1d6a:	b25b      	sxtb	r3, r3
    1d6c:	2b00      	cmp	r3, #0
    1d6e:	dbfb      	blt.n	1d68 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1d70:	4e13      	ldr	r6, [pc, #76]	; (1dc0 <system_gclk_gen_get_hz+0x70>)
    1d72:	6870      	ldr	r0, [r6, #4]
    1d74:	04c0      	lsls	r0, r0, #19
    1d76:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1d78:	4b14      	ldr	r3, [pc, #80]	; (1dcc <system_gclk_gen_get_hz+0x7c>)
    1d7a:	4798      	blx	r3
    1d7c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1d7e:	4b12      	ldr	r3, [pc, #72]	; (1dc8 <system_gclk_gen_get_hz+0x78>)
    1d80:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1d82:	6876      	ldr	r6, [r6, #4]
    1d84:	02f6      	lsls	r6, r6, #11
    1d86:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1d88:	4b11      	ldr	r3, [pc, #68]	; (1dd0 <system_gclk_gen_get_hz+0x80>)
    1d8a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d8c:	4a0c      	ldr	r2, [pc, #48]	; (1dc0 <system_gclk_gen_get_hz+0x70>)
    1d8e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1d90:	b25b      	sxtb	r3, r3
    1d92:	2b00      	cmp	r3, #0
    1d94:	dbfb      	blt.n	1d8e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1d96:	4b0a      	ldr	r3, [pc, #40]	; (1dc0 <system_gclk_gen_get_hz+0x70>)
    1d98:	689c      	ldr	r4, [r3, #8]
    1d9a:	0224      	lsls	r4, r4, #8
    1d9c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1d9e:	4b0d      	ldr	r3, [pc, #52]	; (1dd4 <system_gclk_gen_get_hz+0x84>)
    1da0:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1da2:	2e00      	cmp	r6, #0
    1da4:	d107      	bne.n	1db6 <system_gclk_gen_get_hz+0x66>
    1da6:	2c01      	cmp	r4, #1
    1da8:	d907      	bls.n	1dba <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1daa:	0021      	movs	r1, r4
    1dac:	0028      	movs	r0, r5
    1dae:	4b0a      	ldr	r3, [pc, #40]	; (1dd8 <system_gclk_gen_get_hz+0x88>)
    1db0:	4798      	blx	r3
    1db2:	0005      	movs	r5, r0
    1db4:	e001      	b.n	1dba <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1db6:	3401      	adds	r4, #1
    1db8:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1dba:	0028      	movs	r0, r5
    1dbc:	bd70      	pop	{r4, r5, r6, pc}
    1dbe:	46c0      	nop			; (mov r8, r8)
    1dc0:	40000c00 	.word	0x40000c00
    1dc4:	000017d5 	.word	0x000017d5
    1dc8:	40000c04 	.word	0x40000c04
    1dcc:	00001845 	.word	0x00001845
    1dd0:	40000c08 	.word	0x40000c08
    1dd4:	00001815 	.word	0x00001815
    1dd8:	00002ee5 	.word	0x00002ee5

00001ddc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1ddc:	b510      	push	{r4, lr}
    1dde:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1de0:	4b06      	ldr	r3, [pc, #24]	; (1dfc <system_gclk_chan_enable+0x20>)
    1de2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1de4:	4b06      	ldr	r3, [pc, #24]	; (1e00 <system_gclk_chan_enable+0x24>)
    1de6:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1de8:	4a06      	ldr	r2, [pc, #24]	; (1e04 <system_gclk_chan_enable+0x28>)
    1dea:	8853      	ldrh	r3, [r2, #2]
    1dec:	2180      	movs	r1, #128	; 0x80
    1dee:	01c9      	lsls	r1, r1, #7
    1df0:	430b      	orrs	r3, r1
    1df2:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1df4:	4b04      	ldr	r3, [pc, #16]	; (1e08 <system_gclk_chan_enable+0x2c>)
    1df6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1df8:	bd10      	pop	{r4, pc}
    1dfa:	46c0      	nop			; (mov r8, r8)
    1dfc:	000017d5 	.word	0x000017d5
    1e00:	40000c02 	.word	0x40000c02
    1e04:	40000c00 	.word	0x40000c00
    1e08:	00001815 	.word	0x00001815

00001e0c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1e0c:	b510      	push	{r4, lr}
    1e0e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1e10:	4b0f      	ldr	r3, [pc, #60]	; (1e50 <system_gclk_chan_disable+0x44>)
    1e12:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1e14:	4b0f      	ldr	r3, [pc, #60]	; (1e54 <system_gclk_chan_disable+0x48>)
    1e16:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1e18:	4a0f      	ldr	r2, [pc, #60]	; (1e58 <system_gclk_chan_disable+0x4c>)
    1e1a:	8853      	ldrh	r3, [r2, #2]
    1e1c:	051b      	lsls	r3, r3, #20
    1e1e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1e20:	8853      	ldrh	r3, [r2, #2]
    1e22:	490e      	ldr	r1, [pc, #56]	; (1e5c <system_gclk_chan_disable+0x50>)
    1e24:	400b      	ands	r3, r1
    1e26:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1e28:	8853      	ldrh	r3, [r2, #2]
    1e2a:	490d      	ldr	r1, [pc, #52]	; (1e60 <system_gclk_chan_disable+0x54>)
    1e2c:	400b      	ands	r3, r1
    1e2e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1e30:	0011      	movs	r1, r2
    1e32:	2280      	movs	r2, #128	; 0x80
    1e34:	01d2      	lsls	r2, r2, #7
    1e36:	884b      	ldrh	r3, [r1, #2]
    1e38:	4213      	tst	r3, r2
    1e3a:	d1fc      	bne.n	1e36 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1e3c:	4906      	ldr	r1, [pc, #24]	; (1e58 <system_gclk_chan_disable+0x4c>)
    1e3e:	884a      	ldrh	r2, [r1, #2]
    1e40:	0203      	lsls	r3, r0, #8
    1e42:	4806      	ldr	r0, [pc, #24]	; (1e5c <system_gclk_chan_disable+0x50>)
    1e44:	4002      	ands	r2, r0
    1e46:	4313      	orrs	r3, r2
    1e48:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1e4a:	4b06      	ldr	r3, [pc, #24]	; (1e64 <system_gclk_chan_disable+0x58>)
    1e4c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1e4e:	bd10      	pop	{r4, pc}
    1e50:	000017d5 	.word	0x000017d5
    1e54:	40000c02 	.word	0x40000c02
    1e58:	40000c00 	.word	0x40000c00
    1e5c:	fffff0ff 	.word	0xfffff0ff
    1e60:	ffffbfff 	.word	0xffffbfff
    1e64:	00001815 	.word	0x00001815

00001e68 <system_gclk_chan_set_config>:
{
    1e68:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1e6a:	780c      	ldrb	r4, [r1, #0]
    1e6c:	0224      	lsls	r4, r4, #8
    1e6e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1e70:	4b02      	ldr	r3, [pc, #8]	; (1e7c <system_gclk_chan_set_config+0x14>)
    1e72:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1e74:	b2a4      	uxth	r4, r4
    1e76:	4b02      	ldr	r3, [pc, #8]	; (1e80 <system_gclk_chan_set_config+0x18>)
    1e78:	805c      	strh	r4, [r3, #2]
}
    1e7a:	bd10      	pop	{r4, pc}
    1e7c:	00001e0d 	.word	0x00001e0d
    1e80:	40000c00 	.word	0x40000c00

00001e84 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1e84:	b510      	push	{r4, lr}
    1e86:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1e88:	4b06      	ldr	r3, [pc, #24]	; (1ea4 <system_gclk_chan_get_hz+0x20>)
    1e8a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1e8c:	4b06      	ldr	r3, [pc, #24]	; (1ea8 <system_gclk_chan_get_hz+0x24>)
    1e8e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1e90:	4b06      	ldr	r3, [pc, #24]	; (1eac <system_gclk_chan_get_hz+0x28>)
    1e92:	885c      	ldrh	r4, [r3, #2]
    1e94:	0524      	lsls	r4, r4, #20
    1e96:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1e98:	4b05      	ldr	r3, [pc, #20]	; (1eb0 <system_gclk_chan_get_hz+0x2c>)
    1e9a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1e9c:	0020      	movs	r0, r4
    1e9e:	4b05      	ldr	r3, [pc, #20]	; (1eb4 <system_gclk_chan_get_hz+0x30>)
    1ea0:	4798      	blx	r3
}
    1ea2:	bd10      	pop	{r4, pc}
    1ea4:	000017d5 	.word	0x000017d5
    1ea8:	40000c02 	.word	0x40000c02
    1eac:	40000c00 	.word	0x40000c00
    1eb0:	00001815 	.word	0x00001815
    1eb4:	00001d51 	.word	0x00001d51

00001eb8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1eb8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1eba:	78d3      	ldrb	r3, [r2, #3]
    1ebc:	2b00      	cmp	r3, #0
    1ebe:	d135      	bne.n	1f2c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1ec0:	7813      	ldrb	r3, [r2, #0]
    1ec2:	2b80      	cmp	r3, #128	; 0x80
    1ec4:	d029      	beq.n	1f1a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1ec6:	061b      	lsls	r3, r3, #24
    1ec8:	2480      	movs	r4, #128	; 0x80
    1eca:	0264      	lsls	r4, r4, #9
    1ecc:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1ece:	7854      	ldrb	r4, [r2, #1]
    1ed0:	2502      	movs	r5, #2
    1ed2:	43ac      	bics	r4, r5
    1ed4:	d106      	bne.n	1ee4 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1ed6:	7894      	ldrb	r4, [r2, #2]
    1ed8:	2c00      	cmp	r4, #0
    1eda:	d120      	bne.n	1f1e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1edc:	2480      	movs	r4, #128	; 0x80
    1ede:	02a4      	lsls	r4, r4, #10
    1ee0:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1ee2:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1ee4:	7854      	ldrb	r4, [r2, #1]
    1ee6:	3c01      	subs	r4, #1
    1ee8:	2c01      	cmp	r4, #1
    1eea:	d91c      	bls.n	1f26 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1eec:	040d      	lsls	r5, r1, #16
    1eee:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1ef0:	24a0      	movs	r4, #160	; 0xa0
    1ef2:	05e4      	lsls	r4, r4, #23
    1ef4:	432c      	orrs	r4, r5
    1ef6:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1ef8:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1efa:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1efc:	24d0      	movs	r4, #208	; 0xd0
    1efe:	0624      	lsls	r4, r4, #24
    1f00:	432c      	orrs	r4, r5
    1f02:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1f04:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1f06:	78d4      	ldrb	r4, [r2, #3]
    1f08:	2c00      	cmp	r4, #0
    1f0a:	d122      	bne.n	1f52 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1f0c:	035b      	lsls	r3, r3, #13
    1f0e:	d51c      	bpl.n	1f4a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1f10:	7893      	ldrb	r3, [r2, #2]
    1f12:	2b01      	cmp	r3, #1
    1f14:	d01e      	beq.n	1f54 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1f16:	6141      	str	r1, [r0, #20]
    1f18:	e017      	b.n	1f4a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1f1a:	2300      	movs	r3, #0
    1f1c:	e7d7      	b.n	1ece <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1f1e:	24c0      	movs	r4, #192	; 0xc0
    1f20:	02e4      	lsls	r4, r4, #11
    1f22:	4323      	orrs	r3, r4
    1f24:	e7dd      	b.n	1ee2 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1f26:	4c0d      	ldr	r4, [pc, #52]	; (1f5c <_system_pinmux_config+0xa4>)
    1f28:	4023      	ands	r3, r4
    1f2a:	e7df      	b.n	1eec <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1f2c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1f2e:	040c      	lsls	r4, r1, #16
    1f30:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1f32:	23a0      	movs	r3, #160	; 0xa0
    1f34:	05db      	lsls	r3, r3, #23
    1f36:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1f38:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1f3a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1f3c:	23d0      	movs	r3, #208	; 0xd0
    1f3e:	061b      	lsls	r3, r3, #24
    1f40:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1f42:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1f44:	78d3      	ldrb	r3, [r2, #3]
    1f46:	2b00      	cmp	r3, #0
    1f48:	d103      	bne.n	1f52 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1f4a:	7853      	ldrb	r3, [r2, #1]
    1f4c:	3b01      	subs	r3, #1
    1f4e:	2b01      	cmp	r3, #1
    1f50:	d902      	bls.n	1f58 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1f52:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1f54:	6181      	str	r1, [r0, #24]
    1f56:	e7f8      	b.n	1f4a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1f58:	6081      	str	r1, [r0, #8]
}
    1f5a:	e7fa      	b.n	1f52 <_system_pinmux_config+0x9a>
    1f5c:	fffbffff 	.word	0xfffbffff

00001f60 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1f60:	b510      	push	{r4, lr}
    1f62:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1f64:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1f66:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1f68:	2900      	cmp	r1, #0
    1f6a:	d104      	bne.n	1f76 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1f6c:	0943      	lsrs	r3, r0, #5
    1f6e:	01db      	lsls	r3, r3, #7
    1f70:	4905      	ldr	r1, [pc, #20]	; (1f88 <system_pinmux_pin_set_config+0x28>)
    1f72:	468c      	mov	ip, r1
    1f74:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1f76:	241f      	movs	r4, #31
    1f78:	4020      	ands	r0, r4
    1f7a:	2101      	movs	r1, #1
    1f7c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1f7e:	0018      	movs	r0, r3
    1f80:	4b02      	ldr	r3, [pc, #8]	; (1f8c <system_pinmux_pin_set_config+0x2c>)
    1f82:	4798      	blx	r3
}
    1f84:	bd10      	pop	{r4, pc}
    1f86:	46c0      	nop			; (mov r8, r8)
    1f88:	41004400 	.word	0x41004400
    1f8c:	00001eb9 	.word	0x00001eb9

00001f90 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1f90:	4770      	bx	lr
	...

00001f94 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1f94:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1f96:	4b05      	ldr	r3, [pc, #20]	; (1fac <system_init+0x18>)
    1f98:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1f9a:	4b05      	ldr	r3, [pc, #20]	; (1fb0 <system_init+0x1c>)
    1f9c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1f9e:	4b05      	ldr	r3, [pc, #20]	; (1fb4 <system_init+0x20>)
    1fa0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1fa2:	4b05      	ldr	r3, [pc, #20]	; (1fb8 <system_init+0x24>)
    1fa4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1fa6:	4b05      	ldr	r3, [pc, #20]	; (1fbc <system_init+0x28>)
    1fa8:	4798      	blx	r3
}
    1faa:	bd10      	pop	{r4, pc}
    1fac:	00001ab5 	.word	0x00001ab5
    1fb0:	000017d1 	.word	0x000017d1
    1fb4:	00001f91 	.word	0x00001f91
    1fb8:	00001f91 	.word	0x00001f91
    1fbc:	00001f91 	.word	0x00001f91

00001fc0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1fc0:	e7fe      	b.n	1fc0 <Dummy_Handler>
	...

00001fc4 <Reset_Handler>:
{
    1fc4:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    1fc6:	4a26      	ldr	r2, [pc, #152]	; (2060 <Reset_Handler+0x9c>)
    1fc8:	4b26      	ldr	r3, [pc, #152]	; (2064 <Reset_Handler+0xa0>)
    1fca:	429a      	cmp	r2, r3
    1fcc:	d011      	beq.n	1ff2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1fce:	001a      	movs	r2, r3
    1fd0:	4b25      	ldr	r3, [pc, #148]	; (2068 <Reset_Handler+0xa4>)
    1fd2:	429a      	cmp	r2, r3
    1fd4:	d20d      	bcs.n	1ff2 <Reset_Handler+0x2e>
    1fd6:	4a25      	ldr	r2, [pc, #148]	; (206c <Reset_Handler+0xa8>)
    1fd8:	3303      	adds	r3, #3
    1fda:	1a9b      	subs	r3, r3, r2
    1fdc:	089b      	lsrs	r3, r3, #2
    1fde:	3301      	adds	r3, #1
    1fe0:	009b      	lsls	r3, r3, #2
    1fe2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1fe4:	481f      	ldr	r0, [pc, #124]	; (2064 <Reset_Handler+0xa0>)
    1fe6:	491e      	ldr	r1, [pc, #120]	; (2060 <Reset_Handler+0x9c>)
    1fe8:	588c      	ldr	r4, [r1, r2]
    1fea:	5084      	str	r4, [r0, r2]
    1fec:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1fee:	429a      	cmp	r2, r3
    1ff0:	d1fa      	bne.n	1fe8 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1ff2:	4a1f      	ldr	r2, [pc, #124]	; (2070 <Reset_Handler+0xac>)
    1ff4:	4b1f      	ldr	r3, [pc, #124]	; (2074 <Reset_Handler+0xb0>)
    1ff6:	429a      	cmp	r2, r3
    1ff8:	d20a      	bcs.n	2010 <Reset_Handler+0x4c>
    1ffa:	43d3      	mvns	r3, r2
    1ffc:	491d      	ldr	r1, [pc, #116]	; (2074 <Reset_Handler+0xb0>)
    1ffe:	185b      	adds	r3, r3, r1
    2000:	2103      	movs	r1, #3
    2002:	438b      	bics	r3, r1
    2004:	3304      	adds	r3, #4
    2006:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2008:	2100      	movs	r1, #0
    200a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    200c:	4293      	cmp	r3, r2
    200e:	d1fc      	bne.n	200a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2010:	4a19      	ldr	r2, [pc, #100]	; (2078 <Reset_Handler+0xb4>)
    2012:	21ff      	movs	r1, #255	; 0xff
    2014:	4b19      	ldr	r3, [pc, #100]	; (207c <Reset_Handler+0xb8>)
    2016:	438b      	bics	r3, r1
    2018:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    201a:	39fd      	subs	r1, #253	; 0xfd
    201c:	2390      	movs	r3, #144	; 0x90
    201e:	005b      	lsls	r3, r3, #1
    2020:	4a17      	ldr	r2, [pc, #92]	; (2080 <Reset_Handler+0xbc>)
    2022:	50d1      	str	r1, [r2, r3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2024:	4b17      	ldr	r3, [pc, #92]	; (2084 <Reset_Handler+0xc0>)
    2026:	7b9a      	ldrb	r2, [r3, #14]
    2028:	312e      	adds	r1, #46	; 0x2e
    202a:	438a      	bics	r2, r1
    202c:	2120      	movs	r1, #32
    202e:	430a      	orrs	r2, r1
    2030:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2032:	7b9a      	ldrb	r2, [r3, #14]
    2034:	210c      	movs	r1, #12
    2036:	438a      	bics	r2, r1
    2038:	2108      	movs	r1, #8
    203a:	430a      	orrs	r2, r1
    203c:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    203e:	7b9a      	ldrb	r2, [r3, #14]
    2040:	2103      	movs	r1, #3
    2042:	438a      	bics	r2, r1
    2044:	2102      	movs	r1, #2
    2046:	430a      	orrs	r2, r1
    2048:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    204a:	4a0f      	ldr	r2, [pc, #60]	; (2088 <Reset_Handler+0xc4>)
    204c:	6853      	ldr	r3, [r2, #4]
    204e:	2180      	movs	r1, #128	; 0x80
    2050:	430b      	orrs	r3, r1
    2052:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2054:	4b0d      	ldr	r3, [pc, #52]	; (208c <Reset_Handler+0xc8>)
    2056:	4798      	blx	r3
        main();
    2058:	4b0d      	ldr	r3, [pc, #52]	; (2090 <Reset_Handler+0xcc>)
    205a:	4798      	blx	r3
    205c:	e7fe      	b.n	205c <Reset_Handler+0x98>
    205e:	46c0      	nop			; (mov r8, r8)
    2060:	000034d0 	.word	0x000034d0
    2064:	20000000 	.word	0x20000000
    2068:	20000144 	.word	0x20000144
    206c:	20000004 	.word	0x20000004
    2070:	20000150 	.word	0x20000150
    2074:	20000508 	.word	0x20000508
    2078:	e000ed00 	.word	0xe000ed00
    207c:	00000000 	.word	0x00000000
    2080:	41007000 	.word	0x41007000
    2084:	41004800 	.word	0x41004800
    2088:	41004000 	.word	0x41004000
    208c:	000031d1 	.word	0x000031d1
    2090:	00002e75 	.word	0x00002e75

00002094 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2094:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    2096:	4a06      	ldr	r2, [pc, #24]	; (20b0 <_sbrk+0x1c>)
    2098:	6812      	ldr	r2, [r2, #0]
    209a:	2a00      	cmp	r2, #0
    209c:	d004      	beq.n	20a8 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    209e:	4a04      	ldr	r2, [pc, #16]	; (20b0 <_sbrk+0x1c>)
    20a0:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    20a2:	18c3      	adds	r3, r0, r3
    20a4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    20a6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    20a8:	4902      	ldr	r1, [pc, #8]	; (20b4 <_sbrk+0x20>)
    20aa:	4a01      	ldr	r2, [pc, #4]	; (20b0 <_sbrk+0x1c>)
    20ac:	6011      	str	r1, [r2, #0]
    20ae:	e7f6      	b.n	209e <_sbrk+0xa>
    20b0:	20000208 	.word	0x20000208
    20b4:	20000908 	.word	0x20000908

000020b8 <updateBluetoothMode>:

extern volatile bool I2CReadComplete;
extern uint8_t I2CReadBuffer[DATA_LENGTH_LEDS];

void updateBluetoothMode()
{
    20b8:	b570      	push	{r4, r5, r6, lr}
	uint8_t i =0;
	if(I2CReadComplete == true)
    20ba:	4b0a      	ldr	r3, [pc, #40]	; (20e4 <updateBluetoothMode+0x2c>)
    20bc:	781b      	ldrb	r3, [r3, #0]
    20be:	2b00      	cmp	r3, #0
    20c0:	d00f      	beq.n	20e2 <updateBluetoothMode+0x2a>
	{
		I2CReadComplete = false;
    20c2:	2200      	movs	r2, #0
    20c4:	4b07      	ldr	r3, [pc, #28]	; (20e4 <updateBluetoothMode+0x2c>)
    20c6:	701a      	strb	r2, [r3, #0]
		for(i=1;i<4;i++)
		{
			convertMatrix2Shift(I2CReadBuffer+1+18*(i-1),i);
    20c8:	4c07      	ldr	r4, [pc, #28]	; (20e8 <updateBluetoothMode+0x30>)
    20ca:	2101      	movs	r1, #1
    20cc:	0020      	movs	r0, r4
    20ce:	4d07      	ldr	r5, [pc, #28]	; (20ec <updateBluetoothMode+0x34>)
    20d0:	47a8      	blx	r5
    20d2:	0020      	movs	r0, r4
    20d4:	3012      	adds	r0, #18
    20d6:	2102      	movs	r1, #2
    20d8:	47a8      	blx	r5
    20da:	0020      	movs	r0, r4
    20dc:	3024      	adds	r0, #36	; 0x24
    20de:	2103      	movs	r1, #3
    20e0:	47a8      	blx	r5
		}
	}
    20e2:	bd70      	pop	{r4, r5, r6, pc}
    20e4:	200002aa 	.word	0x200002aa
    20e8:	200004a9 	.word	0x200004a9
    20ec:	00002b75 	.word	0x00002b75

000020f0 <updateLEDMatrix>:
}

void updateLEDMatrix()
{
	
	updateLEDRows = true;
    20f0:	2201      	movs	r2, #1
    20f2:	4b01      	ldr	r3, [pc, #4]	; (20f8 <updateLEDMatrix+0x8>)
    20f4:	701a      	strb	r2, [r3, #0]
	//port_pin_toggle_output_level(TP1);
	//updateSPIValues();
}
    20f6:	4770      	bx	lr
    20f8:	2000021a 	.word	0x2000021a

000020fc <testPinsInit>:
{
    20fc:	b500      	push	{lr}
    20fe:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    2100:	a901      	add	r1, sp, #4
    2102:	2301      	movs	r3, #1
    2104:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    2106:	2200      	movs	r2, #0
    2108:	708a      	strb	r2, [r1, #2]
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    210a:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(TP1, &config_port_pin);
    210c:	2004      	movs	r0, #4
    210e:	4b02      	ldr	r3, [pc, #8]	; (2118 <testPinsInit+0x1c>)
    2110:	4798      	blx	r3
}
    2112:	b003      	add	sp, #12
    2114:	bd00      	pop	{pc}
    2116:	46c0      	nop			; (mov r8, r8)
    2118:	000017ad 	.word	0x000017ad

0000211c <updateSPIValues>:
{
    211c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    211e:	46ce      	mov	lr, r9
    2120:	4647      	mov	r7, r8
    2122:	b580      	push	{r7, lr}
    2124:	2400      	movs	r4, #0
		SPISend[0] = 0x80 >> j;
    2126:	4b16      	ldr	r3, [pc, #88]	; (2180 <updateSPIValues+0x64>)
    2128:	4698      	mov	r8, r3
			SPISend[i*3 + 1] = ~BMatrix[3-i][j];
    212a:	4e16      	ldr	r6, [pc, #88]	; (2184 <updateSPIValues+0x68>)
			SPISend[i*3 + 2] = ~GMatrix[3-i][j];
    212c:	4b16      	ldr	r3, [pc, #88]	; (2188 <updateSPIValues+0x6c>)
    212e:	4699      	mov	r9, r3
    2130:	e009      	b.n	2146 <updateSPIValues+0x2a>
		LEDMatrixSend(SPISend);
    2132:	4813      	ldr	r0, [pc, #76]	; (2180 <updateSPIValues+0x64>)
    2134:	4b15      	ldr	r3, [pc, #84]	; (218c <updateSPIValues+0x70>)
    2136:	4798      	blx	r3
		delay_cycles_us(400);
    2138:	20c8      	movs	r0, #200	; 0xc8
    213a:	0040      	lsls	r0, r0, #1
    213c:	4b14      	ldr	r3, [pc, #80]	; (2190 <updateSPIValues+0x74>)
    213e:	4798      	blx	r3
    2140:	3401      	adds	r4, #1
	for(j=0;j<8;j++)
    2142:	2c08      	cmp	r4, #8
    2144:	d018      	beq.n	2178 <updateSPIValues+0x5c>
		SPISend[0] = 0x80 >> j;
    2146:	0025      	movs	r5, r4
    2148:	2380      	movs	r3, #128	; 0x80
    214a:	4123      	asrs	r3, r4
    214c:	4642      	mov	r2, r8
    214e:	7013      	strb	r3, [r2, #0]
    2150:	2103      	movs	r1, #3
			SPISend[i*3 + 3] = ~RMatrix[3-i][j];
    2152:	4f10      	ldr	r7, [pc, #64]	; (2194 <updateSPIValues+0x78>)
			SPISend[i*3 + 1] = ~BMatrix[3-i][j];
    2154:	00cb      	lsls	r3, r1, #3
    2156:	18f0      	adds	r0, r6, r3
    2158:	5d40      	ldrb	r0, [r0, r5]
    215a:	43c0      	mvns	r0, r0
    215c:	7050      	strb	r0, [r2, #1]
			SPISend[i*3 + 2] = ~GMatrix[3-i][j];
    215e:	4648      	mov	r0, r9
    2160:	18c0      	adds	r0, r0, r3
    2162:	5d40      	ldrb	r0, [r0, r5]
    2164:	43c0      	mvns	r0, r0
    2166:	7090      	strb	r0, [r2, #2]
			SPISend[i*3 + 3] = ~RMatrix[3-i][j];
    2168:	18fb      	adds	r3, r7, r3
    216a:	5d5b      	ldrb	r3, [r3, r5]
    216c:	43db      	mvns	r3, r3
    216e:	70d3      	strb	r3, [r2, #3]
    2170:	3203      	adds	r2, #3
		for(i=0;i<4;i++)
    2172:	3901      	subs	r1, #1
    2174:	d2ee      	bcs.n	2154 <updateSPIValues+0x38>
    2176:	e7dc      	b.n	2132 <updateSPIValues+0x16>
}
    2178:	bc0c      	pop	{r2, r3}
    217a:	4690      	mov	r8, r2
    217c:	4699      	mov	r9, r3
    217e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2180:	2000020c 	.word	0x2000020c
    2184:	20000488 	.word	0x20000488
    2188:	200004e0 	.word	0x200004e0
    218c:	00002909 	.word	0x00002909
    2190:	0000012d 	.word	0x0000012d
    2194:	20000468 	.word	0x20000468

00002198 <initLEDMatrixTimer>:
{
    2198:	b510      	push	{r4, lr}
    219a:	b08e      	sub	sp, #56	; 0x38

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    219c:	aa01      	add	r2, sp, #4
    219e:	2300      	movs	r3, #0
    21a0:	2100      	movs	r1, #0
    21a2:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    21a4:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    21a6:	2000      	movs	r0, #0
    21a8:	7050      	strb	r0, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    21aa:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    21ac:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    21ae:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    21b0:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    21b2:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    21b4:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    21b6:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    21b8:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    21ba:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    21bc:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    21be:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    21c0:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    21c2:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.enable_capture_on_channel[0]		=		true;
    21c4:	3301      	adds	r3, #1
    21c6:	72d3      	strb	r3, [r2, #11]
	config_tc.counter_size						=		TC_COUNTER_SIZE_8BIT; //8
    21c8:	3303      	adds	r3, #3
    21ca:	7093      	strb	r3, [r2, #2]
	config_tc.clock_source						=		GCLK_GENERATOR_3 ;
    21cc:	3b01      	subs	r3, #1
    21ce:	7013      	strb	r3, [r2, #0]
	config_tc.clock_prescaler					=		TC_CLOCK_PRESCALER_DIV64; //1024
    21d0:	23a0      	movs	r3, #160	; 0xa0
    21d2:	00db      	lsls	r3, r3, #3
    21d4:	8093      	strh	r3, [r2, #4]
	config_tc.counter_8_bit.period				=		0xFF;
    21d6:	21ff      	movs	r1, #255	; 0xff
    21d8:	2329      	movs	r3, #41	; 0x29
    21da:	54d1      	strb	r1, [r2, r3]
	tc_init(&tcLEDMatrix, LED_MATRIX_TIMER , &config_tc);
    21dc:	4c07      	ldr	r4, [pc, #28]	; (21fc <initLEDMatrixTimer+0x64>)
    21de:	4908      	ldr	r1, [pc, #32]	; (2200 <initLEDMatrixTimer+0x68>)
    21e0:	0020      	movs	r0, r4
    21e2:	4b08      	ldr	r3, [pc, #32]	; (2204 <initLEDMatrixTimer+0x6c>)
    21e4:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    21e6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    21e8:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    21ea:	b25b      	sxtb	r3, r3
    21ec:	2b00      	cmp	r3, #0
    21ee:	dbfb      	blt.n	21e8 <initLEDMatrixTimer+0x50>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    21f0:	8813      	ldrh	r3, [r2, #0]
    21f2:	2102      	movs	r1, #2
    21f4:	430b      	orrs	r3, r1
    21f6:	8013      	strh	r3, [r2, #0]
}
    21f8:	b00e      	add	sp, #56	; 0x38
    21fa:	bd10      	pop	{r4, pc}
    21fc:	20000328 	.word	0x20000328
    2200:	42001800 	.word	0x42001800
    2204:	000014c5 	.word	0x000014c5

00002208 <initLEDMatrixTimerCallbacks>:

void initLEDMatrixTimerCallbacks()
{
    2208:	b510      	push	{r4, lr}
	tc_register_callback(&tcLEDMatrix, updateLEDMatrix,TC_CALLBACK_OVERFLOW);
    220a:	4c0c      	ldr	r4, [pc, #48]	; (223c <initLEDMatrixTimerCallbacks+0x34>)
    220c:	2200      	movs	r2, #0
    220e:	490c      	ldr	r1, [pc, #48]	; (2240 <initLEDMatrixTimerCallbacks+0x38>)
    2210:	0020      	movs	r0, r4
    2212:	4b0c      	ldr	r3, [pc, #48]	; (2244 <initLEDMatrixTimerCallbacks+0x3c>)
    2214:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2216:	6820      	ldr	r0, [r4, #0]
    2218:	4b0b      	ldr	r3, [pc, #44]	; (2248 <initLEDMatrixTimerCallbacks+0x40>)
    221a:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    221c:	4b0b      	ldr	r3, [pc, #44]	; (224c <initLEDMatrixTimerCallbacks+0x44>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    221e:	5c1a      	ldrb	r2, [r3, r0]
    2220:	231f      	movs	r3, #31
    2222:	4013      	ands	r3, r2
    2224:	2201      	movs	r2, #1
    2226:	0011      	movs	r1, r2
    2228:	4099      	lsls	r1, r3
    222a:	4b09      	ldr	r3, [pc, #36]	; (2250 <initLEDMatrixTimerCallbacks+0x48>)
    222c:	6019      	str	r1, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    222e:	7e63      	ldrb	r3, [r4, #25]
    2230:	2101      	movs	r1, #1
    2232:	430b      	orrs	r3, r1
    2234:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    2236:	6823      	ldr	r3, [r4, #0]
    2238:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&tcLEDMatrix, TC_CALLBACK_OVERFLOW);
}
    223a:	bd10      	pop	{r4, pc}
    223c:	20000328 	.word	0x20000328
    2240:	000020f1 	.word	0x000020f1
    2244:	000016f5 	.word	0x000016f5
    2248:	000014a1 	.word	0x000014a1
    224c:	000034ac 	.word	0x000034ac
    2250:	e000e100 	.word	0xe000e100

00002254 <initMatrixStandbyMode>:

void initMatrixStandbyMode()
{
    2254:	b510      	push	{r4, lr}
	BBTLogo(3);
    2256:	2003      	movs	r0, #3
    2258:	4b01      	ldr	r3, [pc, #4]	; (2260 <initMatrixStandbyMode+0xc>)
    225a:	4798      	blx	r3
}
    225c:	bd10      	pop	{r4, pc}
    225e:	46c0      	nop			; (mov r8, r8)
    2260:	00002dd5 	.word	0x00002dd5

00002264 <updateLEDMatrixArray>:

void updateLEDMatrixArray(uint8_t currentLEDMatrixMode)
{
    2264:	b510      	push	{r4, lr}
	uint8_t i = 0;
	switch(currentLEDMatrixMode)
    2266:	2801      	cmp	r0, #1
    2268:	d002      	beq.n	2270 <updateLEDMatrixArray+0xc>
    226a:	2802      	cmp	r0, #2
    226c:	d003      	beq.n	2276 <updateLEDMatrixArray+0x12>
			updateBluetoothMode();
			break;
		default:
			break;
	}
}
    226e:	bd10      	pop	{r4, pc}
			updateMatrixMultiplyMode();
    2270:	4b02      	ldr	r3, [pc, #8]	; (227c <updateLEDMatrixArray+0x18>)
    2272:	4798      	blx	r3
			break;
    2274:	e7fb      	b.n	226e <updateLEDMatrixArray+0xa>
			updateBluetoothMode();
    2276:	4b02      	ldr	r3, [pc, #8]	; (2280 <updateLEDMatrixArray+0x1c>)
    2278:	4798      	blx	r3
}
    227a:	e7f8      	b.n	226e <updateLEDMatrixArray+0xa>
    227c:	000025ad 	.word	0x000025ad
    2280:	000020b9 	.word	0x000020b9

00002284 <LEDMatrixControl>:

void LEDMatrixControl()
{
    2284:	b510      	push	{r4, lr}
	static uint8_t prevLEDMatrixMode	= 255; 
	static uint8_t currentLEDMatrixMode = 0;
	currentLEDMatrixMode  =  2;
    2286:	2202      	movs	r2, #2
    2288:	4b12      	ldr	r3, [pc, #72]	; (22d4 <LEDMatrixControl+0x50>)
    228a:	701a      	strb	r2, [r3, #0]
	if(prevLEDMatrixMode != currentLEDMatrixMode)
    228c:	4b12      	ldr	r3, [pc, #72]	; (22d8 <LEDMatrixControl+0x54>)
    228e:	781b      	ldrb	r3, [r3, #0]
    2290:	2b02      	cmp	r3, #2
    2292:	d009      	beq.n	22a8 <LEDMatrixControl+0x24>
	{
		switch(LEDMatrixMode)
    2294:	4b11      	ldr	r3, [pc, #68]	; (22dc <LEDMatrixControl+0x58>)
    2296:	781b      	ldrb	r3, [r3, #0]
    2298:	2b00      	cmp	r3, #0
    229a:	d00e      	beq.n	22ba <LEDMatrixControl+0x36>
    229c:	2b01      	cmp	r3, #1
    229e:	d00f      	beq.n	22c0 <LEDMatrixControl+0x3c>
			case BLUETOOTH_MODE:
				break;
			default:
				break;
		}
		prevLEDMatrixMode = currentLEDMatrixMode;
    22a0:	4b0c      	ldr	r3, [pc, #48]	; (22d4 <LEDMatrixControl+0x50>)
    22a2:	781a      	ldrb	r2, [r3, #0]
    22a4:	4b0c      	ldr	r3, [pc, #48]	; (22d8 <LEDMatrixControl+0x54>)
    22a6:	701a      	strb	r2, [r3, #0]
	}
	if(updateLEDRows == true)
    22a8:	4b0d      	ldr	r3, [pc, #52]	; (22e0 <LEDMatrixControl+0x5c>)
    22aa:	781b      	ldrb	r3, [r3, #0]
    22ac:	2b00      	cmp	r3, #0
    22ae:	d10a      	bne.n	22c6 <LEDMatrixControl+0x42>
	{
		updateLEDRows = false;
		updateSPIValues();
	}
	
	updateLEDMatrixArray(currentLEDMatrixMode);
    22b0:	4b08      	ldr	r3, [pc, #32]	; (22d4 <LEDMatrixControl+0x50>)
    22b2:	7818      	ldrb	r0, [r3, #0]
    22b4:	4b0b      	ldr	r3, [pc, #44]	; (22e4 <LEDMatrixControl+0x60>)
    22b6:	4798      	blx	r3
}
    22b8:	bd10      	pop	{r4, pc}
				initMatrixStandbyMode();
    22ba:	4b0b      	ldr	r3, [pc, #44]	; (22e8 <LEDMatrixControl+0x64>)
    22bc:	4798      	blx	r3
				break;
    22be:	e7ef      	b.n	22a0 <LEDMatrixControl+0x1c>
				initMatrixMultiplyMode();
    22c0:	4b0a      	ldr	r3, [pc, #40]	; (22ec <LEDMatrixControl+0x68>)
    22c2:	4798      	blx	r3
				break;
    22c4:	e7ec      	b.n	22a0 <LEDMatrixControl+0x1c>
		updateLEDRows = false;
    22c6:	2200      	movs	r2, #0
    22c8:	4b05      	ldr	r3, [pc, #20]	; (22e0 <LEDMatrixControl+0x5c>)
    22ca:	701a      	strb	r2, [r3, #0]
		updateSPIValues();
    22cc:	4b08      	ldr	r3, [pc, #32]	; (22f0 <LEDMatrixControl+0x6c>)
    22ce:	4798      	blx	r3
    22d0:	e7ee      	b.n	22b0 <LEDMatrixControl+0x2c>
    22d2:	46c0      	nop			; (mov r8, r8)
    22d4:	20000219 	.word	0x20000219
    22d8:	20000015 	.word	0x20000015
    22dc:	200002ab 	.word	0x200002ab
    22e0:	2000021a 	.word	0x2000021a
    22e4:	00002265 	.word	0x00002265
    22e8:	00002255 	.word	0x00002255
    22ec:	000025f1 	.word	0x000025f1
    22f0:	0000211d 	.word	0x0000211d

000022f4 <LEDMatrixTimerInit>:

void LEDMatrixTimerInit()
{
    22f4:	b510      	push	{r4, lr}
	initLEDMatrixTimer();
    22f6:	4b02      	ldr	r3, [pc, #8]	; (2300 <LEDMatrixTimerInit+0xc>)
    22f8:	4798      	blx	r3
	initLEDMatrixTimerCallbacks();
    22fa:	4b02      	ldr	r3, [pc, #8]	; (2304 <LEDMatrixTimerInit+0x10>)
    22fc:	4798      	blx	r3
	
    22fe:	bd10      	pop	{r4, pc}
    2300:	00002199 	.word	0x00002199
    2304:	00002209 	.word	0x00002209

00002308 <i2c_read_complete_callback>:
}

void i2c_read_complete_callback()
{
	uint8_t i =0;
	I2CReadComplete = true;
    2308:	2201      	movs	r2, #1
    230a:	4b05      	ldr	r3, [pc, #20]	; (2320 <i2c_read_complete_callback+0x18>)
    230c:	701a      	strb	r2, [r3, #0]
    230e:	2300      	movs	r3, #0
	for(i=0;i<DATA_LENGTH_LEDS;i++)
	{
		I2CReadBuffer[i] = read_buffer[i];
    2310:	4804      	ldr	r0, [pc, #16]	; (2324 <i2c_read_complete_callback+0x1c>)
    2312:	4905      	ldr	r1, [pc, #20]	; (2328 <i2c_read_complete_callback+0x20>)
    2314:	5c5a      	ldrb	r2, [r3, r1]
    2316:	54c2      	strb	r2, [r0, r3]
    2318:	3301      	adds	r3, #1
	for(i=0;i<DATA_LENGTH_LEDS;i++)
    231a:	2b37      	cmp	r3, #55	; 0x37
    231c:	d1fa      	bne.n	2314 <i2c_read_complete_callback+0xc>
	}
	/*
	if(I2CReadBuffer[1] == 'M')
	*/
}
    231e:	4770      	bx	lr
    2320:	200002aa 	.word	0x200002aa
    2324:	200004a8 	.word	0x200004a8
    2328:	2000021c 	.word	0x2000021c

0000232c <i2c_read_request_callback>:
{
    232c:	b510      	push	{r4, lr}
	if(sensorsUpdate == false)
    232e:	4b0a      	ldr	r3, [pc, #40]	; (2358 <i2c_read_request_callback+0x2c>)
    2330:	781b      	ldrb	r3, [r3, #0]
    2332:	2b00      	cmp	r3, #0
    2334:	d109      	bne.n	234a <i2c_read_request_callback+0x1e>
		tempDialOutputs[0]	   = dialOutputs[0];
    2336:	4a09      	ldr	r2, [pc, #36]	; (235c <i2c_read_request_callback+0x30>)
    2338:	7811      	ldrb	r1, [r2, #0]
    233a:	4b09      	ldr	r3, [pc, #36]	; (2360 <i2c_read_request_callback+0x34>)
    233c:	7019      	strb	r1, [r3, #0]
		tempDialOutputs[1]	   = dialOutputs[1];
    233e:	7851      	ldrb	r1, [r2, #1]
    2340:	7059      	strb	r1, [r3, #1]
		tempDialOutputs[2]	   = dialOutputs[2];
    2342:	7891      	ldrb	r1, [r2, #2]
    2344:	7099      	strb	r1, [r3, #2]
		tempDialOutputs[3]	   = dialOutputs[3];
    2346:	78d2      	ldrb	r2, [r2, #3]
    2348:	70da      	strb	r2, [r3, #3]
	rd_packet.data        = tempDialOutputs;
    234a:	4906      	ldr	r1, [pc, #24]	; (2364 <i2c_read_request_callback+0x38>)
    234c:	4b04      	ldr	r3, [pc, #16]	; (2360 <i2c_read_request_callback+0x34>)
    234e:	604b      	str	r3, [r1, #4]
	i2c_slave_write_packet_job(module, &rd_packet);
    2350:	4b05      	ldr	r3, [pc, #20]	; (2368 <i2c_read_request_callback+0x3c>)
    2352:	4798      	blx	r3
}
    2354:	bd10      	pop	{r4, pc}
    2356:	46c0      	nop			; (mov r8, r8)
    2358:	200002ac 	.word	0x200002ac
    235c:	20000500 	.word	0x20000500
    2360:	20000254 	.word	0x20000254
    2364:	2000034c 	.word	0x2000034c
    2368:	00000bc3 	.word	0x00000bc3

0000236c <i2c_write_request_callback>:
{
    236c:	b510      	push	{r4, lr}
	packet.data_length = DATA_LENGTH_LEDS;
    236e:	4904      	ldr	r1, [pc, #16]	; (2380 <i2c_write_request_callback+0x14>)
    2370:	2337      	movs	r3, #55	; 0x37
    2372:	800b      	strh	r3, [r1, #0]
	packet.data        = read_buffer;
    2374:	4b03      	ldr	r3, [pc, #12]	; (2384 <i2c_write_request_callback+0x18>)
    2376:	604b      	str	r3, [r1, #4]
	if (i2c_slave_read_packet_job(module, &packet) != STATUS_OK) {
    2378:	4b03      	ldr	r3, [pc, #12]	; (2388 <i2c_write_request_callback+0x1c>)
    237a:	4798      	blx	r3
}
    237c:	bd10      	pop	{r4, pc}
    237e:	46c0      	nop			; (mov r8, r8)
    2380:	20000344 	.word	0x20000344
    2384:	2000021c 	.word	0x2000021c
    2388:	00000b9b 	.word	0x00000b9b

0000238c <i2c_update_sensors_values>:
	test[1] = dialOutputs[0];
    238c:	4b01      	ldr	r3, [pc, #4]	; (2394 <i2c_update_sensors_values+0x8>)
    238e:	781a      	ldrb	r2, [r3, #0]
	test[0]	= dialOutputs[1];
    2390:	785b      	ldrb	r3, [r3, #1]
}
    2392:	4770      	bx	lr
    2394:	20000500 	.word	0x20000500

00002398 <configure_i2c_slave>:
	
}

//! [initialize_i2c]
void configure_i2c_slave(void)
{
    2398:	b570      	push	{r4, r5, r6, lr}
    239a:	b08a      	sub	sp, #40	; 0x28
static inline void i2c_slave_get_config_defaults(
		struct i2c_slave_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->enable_scl_low_timeout = false;
    239c:	2200      	movs	r2, #0
    239e:	466b      	mov	r3, sp
    23a0:	701a      	strb	r2, [r3, #0]
	config->sda_hold_time = I2C_SLAVE_SDA_HOLD_TIME_300NS_600NS;
    23a2:	2380      	movs	r3, #128	; 0x80
    23a4:	039b      	lsls	r3, r3, #14
    23a6:	9301      	str	r3, [sp, #4]
	config->buffer_timeout = 65535;
    23a8:	2301      	movs	r3, #1
    23aa:	425b      	negs	r3, r3
    23ac:	4669      	mov	r1, sp
    23ae:	810b      	strh	r3, [r1, #8]
	config->address_mode = I2C_SLAVE_ADDRESS_MODE_MASK;
    23b0:	2300      	movs	r3, #0
    23b2:	814a      	strh	r2, [r1, #10]
	config->address = 0;
	config->address_mask = 0;
    23b4:	81ca      	strh	r2, [r1, #14]
#ifdef FEATURE_I2C_10_BIT_ADDRESS
	config->ten_bit_address = false;
    23b6:	740b      	strb	r3, [r1, #16]
#endif
	config->enable_general_call_address = false;
    23b8:	744b      	strb	r3, [r1, #17]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->transfer_speed = I2C_SLAVE_SPEED_STANDARD_AND_FAST;
    23ba:	9205      	str	r2, [sp, #20]
#endif
#if I2C_SLAVE_CALLBACK_MODE == true
	config->enable_nack_on_address = false;
    23bc:	760b      	strb	r3, [r1, #24]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    23be:	764b      	strb	r3, [r1, #25]
	config->run_in_standby = false;
    23c0:	768b      	strb	r3, [r1, #26]
	config->pinmux_pad0 = PINMUX_DEFAULT;
	config->pinmux_pad1 = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    23c2:	2224      	movs	r2, #36	; 0x24
    23c4:	548b      	strb	r3, [r1, r2]
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = true;
    23c6:	2401      	movs	r4, #1
    23c8:	2325      	movs	r3, #37	; 0x25
    23ca:	466a      	mov	r2, sp
    23cc:	54cc      	strb	r4, [r1, r3]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = true;
    23ce:	3301      	adds	r3, #1
    23d0:	54cc      	strb	r4, [r1, r3]
	struct i2c_slave_config config_i2c_slave;
	i2c_slave_get_config_defaults(&config_i2c_slave);

	config_i2c_slave.address      = SLAVE_ADDRESS;
    23d2:	3b15      	subs	r3, #21
    23d4:	818b      	strh	r3, [r1, #12]
	config_i2c_slave.address_mode = I2C_SLAVE_ADDRESS_MODE_MASK;
	
	config_i2c_slave.pinmux_pad0 =  PINMUX_PA22D_SERCOM2_PAD0;
    23d6:	4b10      	ldr	r3, [pc, #64]	; (2418 <configure_i2c_slave+0x80>)
    23d8:	9307      	str	r3, [sp, #28]
	config_i2c_slave.pinmux_pad1 =  PINMUX_PA23D_SERCOM2_PAD1;
    23da:	4b10      	ldr	r3, [pc, #64]	; (241c <configure_i2c_slave+0x84>)
    23dc:	9308      	str	r3, [sp, #32]
	
	i2c_slave_init(&i2c_slave_instance, CONF_I2C_SLAVE_MODULE , &config_i2c_slave);
    23de:	4e10      	ldr	r6, [pc, #64]	; (2420 <configure_i2c_slave+0x88>)
    23e0:	4910      	ldr	r1, [pc, #64]	; (2424 <configure_i2c_slave+0x8c>)
    23e2:	0030      	movs	r0, r6
    23e4:	4b10      	ldr	r3, [pc, #64]	; (2428 <configure_i2c_slave+0x90>)
    23e6:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    23e8:	6835      	ldr	r5, [r6, #0]

#if I2C_SLAVE_CALLBACK_MODE == true
	/* Enable global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    23ea:	0028      	movs	r0, r5
    23ec:	4b0f      	ldr	r3, [pc, #60]	; (242c <configure_i2c_slave+0x94>)
    23ee:	4798      	blx	r3
    23f0:	231f      	movs	r3, #31
    23f2:	4018      	ands	r0, r3
    23f4:	4084      	lsls	r4, r0
    23f6:	4b0e      	ldr	r3, [pc, #56]	; (2430 <configure_i2c_slave+0x98>)
    23f8:	601c      	str	r4, [r3, #0]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    23fa:	6831      	ldr	r1, [r6, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CS_SYNCBUSY_MASK);
    23fc:	2203      	movs	r2, #3
    23fe:	69cb      	ldr	r3, [r1, #28]
	while (i2c_slave_is_syncing(module)) {
    2400:	421a      	tst	r2, r3
    2402:	d1fc      	bne.n	23fe <configure_i2c_slave+0x66>

	/* Wait for module to sync */
	_i2c_slave_wait_for_sync(module);

	/* Enable module */
	i2c_hw->CTRLA.reg |= SERCOM_I2CS_CTRLA_ENABLE;
    2404:	682b      	ldr	r3, [r5, #0]
    2406:	2202      	movs	r2, #2
    2408:	4313      	orrs	r3, r2
    240a:	602b      	str	r3, [r5, #0]
	i2c_slave_enable(&i2c_slave_instance);
	
	rd_packet.data_length = DATA_LENGTH_SENSORS;
    240c:	3202      	adds	r2, #2
    240e:	4b09      	ldr	r3, [pc, #36]	; (2434 <configure_i2c_slave+0x9c>)
    2410:	801a      	strh	r2, [r3, #0]
}
    2412:	b00a      	add	sp, #40	; 0x28
    2414:	bd70      	pop	{r4, r5, r6, pc}
    2416:	46c0      	nop			; (mov r8, r8)
    2418:	00160003 	.word	0x00160003
    241c:	00170003 	.word	0x00170003
    2420:	20000354 	.word	0x20000354
    2424:	42001000 	.word	0x42001000
    2428:	000009f1 	.word	0x000009f1
    242c:	00001019 	.word	0x00001019
    2430:	e000e100 	.word	0xe000e100
    2434:	2000034c 	.word	0x2000034c

00002438 <configure_i2c_slave_callbacks>:


void configure_i2c_slave_callbacks(void)
{
    2438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	i2c_slave_register_callback(&i2c_slave_instance, i2c_read_request_callback,I2C_SLAVE_CALLBACK_READ_REQUEST);
    243a:	4c10      	ldr	r4, [pc, #64]	; (247c <configure_i2c_slave_callbacks+0x44>)
    243c:	2202      	movs	r2, #2
    243e:	4910      	ldr	r1, [pc, #64]	; (2480 <configure_i2c_slave_callbacks+0x48>)
    2440:	0020      	movs	r0, r4
    2442:	4e10      	ldr	r6, [pc, #64]	; (2484 <configure_i2c_slave_callbacks+0x4c>)
    2444:	47b0      	blx	r6
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    2446:	2525      	movs	r5, #37	; 0x25
    2448:	5d63      	ldrb	r3, [r4, r5]
    244a:	2204      	movs	r2, #4
    244c:	4313      	orrs	r3, r2
    244e:	5563      	strb	r3, [r4, r5]

	/* Enable address callback */
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
	if (callback_type == I2C_SLAVE_CALLBACK_READ_REQUEST ||
			callback_type == I2C_SLAVE_CALLBACK_WRITE_REQUEST) {
		i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH;
    2450:	2702      	movs	r7, #2
    2452:	6823      	ldr	r3, [r4, #0]
    2454:	759f      	strb	r7, [r3, #22]
	i2c_slave_enable_callback(&i2c_slave_instance,I2C_SLAVE_CALLBACK_READ_REQUEST);


	i2c_slave_register_callback(&i2c_slave_instance, i2c_write_request_callback,I2C_SLAVE_CALLBACK_WRITE_REQUEST);
    2456:	3a01      	subs	r2, #1
    2458:	490b      	ldr	r1, [pc, #44]	; (2488 <configure_i2c_slave_callbacks+0x50>)
    245a:	0020      	movs	r0, r4
    245c:	47b0      	blx	r6
	module->enabled_callback |= (1 << callback_type);
    245e:	5d63      	ldrb	r3, [r4, r5]
    2460:	2208      	movs	r2, #8
    2462:	4313      	orrs	r3, r2
    2464:	5563      	strb	r3, [r4, r5]
		i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH;
    2466:	6823      	ldr	r3, [r4, #0]
    2468:	759f      	strb	r7, [r3, #22]
	//i2c_slave_enable_callback(&i2c_slave_instance,I2C_SLAVE_CALLBACK_ERROR);
	
	//i2c_slave_register_callback(&i2c_slave_instance, i2c_write_complete_callback,I2C_SLAVE_CALLBACK_WRITE_COMPLETE);
	//i2c_slave_enable_callback(&i2c_slave_instance,I2C_SLAVE_CALLBACK_WRITE_COMPLETE);
	
	i2c_slave_register_callback(&i2c_slave_instance, i2c_read_complete_callback,I2C_SLAVE_CALLBACK_READ_COMPLETE);
    246a:	3a07      	subs	r2, #7
    246c:	4907      	ldr	r1, [pc, #28]	; (248c <configure_i2c_slave_callbacks+0x54>)
    246e:	0020      	movs	r0, r4
    2470:	47b0      	blx	r6
	module->enabled_callback |= (1 << callback_type);
    2472:	5d63      	ldrb	r3, [r4, r5]
    2474:	2202      	movs	r2, #2
    2476:	4313      	orrs	r3, r2
    2478:	5563      	strb	r3, [r4, r5]
	i2c_slave_enable_callback(&i2c_slave_instance,I2C_SLAVE_CALLBACK_READ_COMPLETE);

}
    247a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    247c:	20000354 	.word	0x20000354
    2480:	0000232d 	.word	0x0000232d
    2484:	00000b81 	.word	0x00000b81
    2488:	0000236d 	.word	0x0000236d
    248c:	00002309 	.word	0x00002309

00002490 <dialConvertValueRow>:
#define THRESHOLD2_MIN_12	211
#define THRESHOLD2_MAX_12	255


uint8_t dialConvertValueRow(uint8_t dialValue)
{
    2490:	b530      	push	{r4, r5, lr}
    2492:	0001      	movs	r1, r0
    2494:	2300      	movs	r3, #0
	uint8_t i = 0;
	uint8_t dialValueConvert = 0;
	static uint8_t prevRowValue = 0; 
	for(i=0;i<=12;i++)
	{
		if((dialValue >= minRThresh[i]) && (dialValue < maxRThresh[i]) )
    2496:	4c1a      	ldr	r4, [pc, #104]	; (2500 <dialConvertValueRow+0x70>)
    2498:	4d1a      	ldr	r5, [pc, #104]	; (2504 <dialConvertValueRow+0x74>)
    249a:	e002      	b.n	24a2 <dialConvertValueRow+0x12>
    249c:	3301      	adds	r3, #1
	for(i=0;i<=12;i++)
    249e:	2b0d      	cmp	r3, #13
    24a0:	d009      	beq.n	24b6 <dialConvertValueRow+0x26>
    24a2:	b2d8      	uxtb	r0, r3
		if((dialValue >= minRThresh[i]) && (dialValue < maxRThresh[i]) )
    24a4:	5ce2      	ldrb	r2, [r4, r3]
    24a6:	b2d2      	uxtb	r2, r2
    24a8:	428a      	cmp	r2, r1
    24aa:	d8f7      	bhi.n	249c <dialConvertValueRow+0xc>
    24ac:	5cea      	ldrb	r2, [r5, r3]
    24ae:	b2d2      	uxtb	r2, r2
    24b0:	4291      	cmp	r1, r2
    24b2:	d2f3      	bcs.n	249c <dialConvertValueRow+0xc>
    24b4:	e000      	b.n	24b8 <dialConvertValueRow+0x28>
	uint8_t dialValueConvert = 0;
    24b6:	2000      	movs	r0, #0
		{
			dialValueConvert = i;
			break;
		}
	}
	if(prevRowValue != dialValueConvert)
    24b8:	4b13      	ldr	r3, [pc, #76]	; (2508 <dialConvertValueRow+0x78>)
    24ba:	781b      	ldrb	r3, [r3, #0]
    24bc:	4283      	cmp	r3, r0
    24be:	d01e      	beq.n	24fe <dialConvertValueRow+0x6e>
    24c0:	2307      	movs	r3, #7
    24c2:	2200      	movs	r2, #0
	{
		for(i=0;i<=12;i++)
		{
			minRThresh[i] = 18*i + 7;
    24c4:	4d0e      	ldr	r5, [pc, #56]	; (2500 <dialConvertValueRow+0x70>)
			maxRThresh[i] = 18*i +  11;
    24c6:	4c0f      	ldr	r4, [pc, #60]	; (2504 <dialConvertValueRow+0x74>)
			minRThresh[i] = 18*i + 7;
    24c8:	54ab      	strb	r3, [r5, r2]
			maxRThresh[i] = 18*i +  11;
    24ca:	1d19      	adds	r1, r3, #4
    24cc:	b2c9      	uxtb	r1, r1
    24ce:	54a1      	strb	r1, [r4, r2]
    24d0:	3201      	adds	r2, #1
    24d2:	3312      	adds	r3, #18
    24d4:	b2db      	uxtb	r3, r3
		for(i=0;i<=12;i++)
    24d6:	2a0d      	cmp	r2, #13
    24d8:	d1f6      	bne.n	24c8 <dialConvertValueRow+0x38>
		}
		if(( dialValueConvert != 0 ) || (dialValueConvert != 12))
		{
			minRThresh[dialValueConvert] = 18*(dialValueConvert-1)+11;
    24da:	1e43      	subs	r3, r0, #1
    24dc:	00da      	lsls	r2, r3, #3
    24de:	189b      	adds	r3, r3, r2
    24e0:	005b      	lsls	r3, r3, #1
    24e2:	330b      	adds	r3, #11
    24e4:	b2db      	uxtb	r3, r3
    24e6:	4a06      	ldr	r2, [pc, #24]	; (2500 <dialConvertValueRow+0x70>)
    24e8:	5413      	strb	r3, [r2, r0]
			maxRThresh[dialValueConvert] = 18*(dialValueConvert+1)+ 7;
    24ea:	1c43      	adds	r3, r0, #1
    24ec:	00da      	lsls	r2, r3, #3
    24ee:	189b      	adds	r3, r3, r2
    24f0:	005b      	lsls	r3, r3, #1
    24f2:	3307      	adds	r3, #7
    24f4:	b2db      	uxtb	r3, r3
    24f6:	4a03      	ldr	r2, [pc, #12]	; (2504 <dialConvertValueRow+0x74>)
    24f8:	5413      	strb	r3, [r2, r0]
		else if(dialValueConvert == 12)
		{
			minRThresh[dialValueConvert] = THRESHOLD2_MIN_12;
			maxRThresh[dialValueConvert] = THRESHOLD2_MAX_12;
		}
		prevRowValue = dialValueConvert;
    24fa:	4b03      	ldr	r3, [pc, #12]	; (2508 <dialConvertValueRow+0x78>)
    24fc:	7018      	strb	r0, [r3, #0]
	}
	return dialValueConvert;
}
    24fe:	bd30      	pop	{r4, r5, pc}
    2500:	200003b8 	.word	0x200003b8
    2504:	20000398 	.word	0x20000398
    2508:	20000259 	.word	0x20000259

0000250c <dialConvertValueColumn>:

uint8_t dialConvertValueColumn(uint8_t dialValue)
{
    250c:	b530      	push	{r4, r5, lr}
    250e:	0001      	movs	r1, r0
    2510:	2300      	movs	r3, #0
	uint8_t i = 0;
	uint8_t dialValueConvert = 0;
	static uint8_t prevColumnValue = 0;
	for(i=0;i<=12;i++)
	{
		if((dialValue >= minCThresh[i]) && (dialValue < maxCThresh[i]))
    2512:	4c1a      	ldr	r4, [pc, #104]	; (257c <dialConvertValueColumn+0x70>)
    2514:	4d1a      	ldr	r5, [pc, #104]	; (2580 <dialConvertValueColumn+0x74>)
    2516:	e002      	b.n	251e <dialConvertValueColumn+0x12>
    2518:	3301      	adds	r3, #1
	for(i=0;i<=12;i++)
    251a:	2b0d      	cmp	r3, #13
    251c:	d009      	beq.n	2532 <dialConvertValueColumn+0x26>
    251e:	b2d8      	uxtb	r0, r3
		if((dialValue >= minCThresh[i]) && (dialValue < maxCThresh[i]))
    2520:	5ce2      	ldrb	r2, [r4, r3]
    2522:	b2d2      	uxtb	r2, r2
    2524:	428a      	cmp	r2, r1
    2526:	d8f7      	bhi.n	2518 <dialConvertValueColumn+0xc>
    2528:	5cea      	ldrb	r2, [r5, r3]
    252a:	b2d2      	uxtb	r2, r2
    252c:	4291      	cmp	r1, r2
    252e:	d2f3      	bcs.n	2518 <dialConvertValueColumn+0xc>
    2530:	e000      	b.n	2534 <dialConvertValueColumn+0x28>
	uint8_t dialValueConvert = 0;
    2532:	2000      	movs	r0, #0
		{
			dialValueConvert = i;
			break;
		}
	}
	if(prevColumnValue != dialValueConvert)
    2534:	4b13      	ldr	r3, [pc, #76]	; (2584 <dialConvertValueColumn+0x78>)
    2536:	781b      	ldrb	r3, [r3, #0]
    2538:	4283      	cmp	r3, r0
    253a:	d01e      	beq.n	257a <dialConvertValueColumn+0x6e>
    253c:	2307      	movs	r3, #7
    253e:	2200      	movs	r2, #0
	{
		for(i=0;i<=12;i++)
		{
			minCThresh[i] = 18*i + 7;
    2540:	4d0e      	ldr	r5, [pc, #56]	; (257c <dialConvertValueColumn+0x70>)
			maxCThresh[i] = 18*i +  11;
    2542:	4c0f      	ldr	r4, [pc, #60]	; (2580 <dialConvertValueColumn+0x74>)
			minCThresh[i] = 18*i + 7;
    2544:	54ab      	strb	r3, [r5, r2]
			maxCThresh[i] = 18*i +  11;
    2546:	1d19      	adds	r1, r3, #4
    2548:	b2c9      	uxtb	r1, r1
    254a:	54a1      	strb	r1, [r4, r2]
    254c:	3201      	adds	r2, #1
    254e:	3312      	adds	r3, #18
    2550:	b2db      	uxtb	r3, r3
		for(i=0;i<=12;i++)
    2552:	2a0d      	cmp	r2, #13
    2554:	d1f6      	bne.n	2544 <dialConvertValueColumn+0x38>
		}
		if(( dialValueConvert != 0 ) || (dialValueConvert != 12))
		{
			minCThresh[dialValueConvert] = 18*(dialValueConvert-1)+11;
    2556:	1e43      	subs	r3, r0, #1
    2558:	00da      	lsls	r2, r3, #3
    255a:	189b      	adds	r3, r3, r2
    255c:	005b      	lsls	r3, r3, #1
    255e:	330b      	adds	r3, #11
    2560:	b2db      	uxtb	r3, r3
    2562:	4a06      	ldr	r2, [pc, #24]	; (257c <dialConvertValueColumn+0x70>)
    2564:	5413      	strb	r3, [r2, r0]
			maxCThresh[dialValueConvert] = 18*(dialValueConvert+1)+ 7;
    2566:	1c43      	adds	r3, r0, #1
    2568:	00da      	lsls	r2, r3, #3
    256a:	189b      	adds	r3, r3, r2
    256c:	005b      	lsls	r3, r3, #1
    256e:	3307      	adds	r3, #7
    2570:	b2db      	uxtb	r3, r3
    2572:	4a03      	ldr	r2, [pc, #12]	; (2580 <dialConvertValueColumn+0x74>)
    2574:	5413      	strb	r3, [r2, r0]
		else if(dialValueConvert == 12)
		{
			minCThresh[dialValueConvert] = THRESHOLD2_MIN_12;
			maxCThresh[dialValueConvert] = THRESHOLD2_MAX_12;
		}
		prevColumnValue = dialValueConvert;
    2576:	4b03      	ldr	r3, [pc, #12]	; (2584 <dialConvertValueColumn+0x78>)
    2578:	7018      	strb	r0, [r3, #0]
	}
	return dialValueConvert;
}
    257a:	bd30      	pop	{r4, r5, pc}
    257c:	20000388 	.word	0x20000388
    2580:	200003a8 	.word	0x200003a8
    2584:	20000258 	.word	0x20000258

00002588 <convertDialMulMode>:

	return dialValueConvert;
}

void convertDialMulMode()
{
    2588:	b510      	push	{r4, lr}
	filterDialMulMode(dialOutputs[0] , UPDATE_THRESH_ROW);
    258a:	4c05      	ldr	r4, [pc, #20]	; (25a0 <convertDialMulMode+0x18>)
    258c:	7820      	ldrb	r0, [r4, #0]
    258e:	b2c0      	uxtb	r0, r0
			dialValueConvert = dialConvertValueRow(dialValue);
    2590:	4b04      	ldr	r3, [pc, #16]	; (25a4 <convertDialMulMode+0x1c>)
    2592:	4798      	blx	r3
	filterDialMulMode(dialOutputs[1] , UPDATE_THRESH_COLUMN);
    2594:	7860      	ldrb	r0, [r4, #1]
    2596:	b2c0      	uxtb	r0, r0
			dialValueConvert = dialConvertValueColumn(dialValue);
    2598:	4b03      	ldr	r3, [pc, #12]	; (25a8 <convertDialMulMode+0x20>)
    259a:	4798      	blx	r3
}
    259c:	bd10      	pop	{r4, pc}
    259e:	46c0      	nop			; (mov r8, r8)
    25a0:	20000500 	.word	0x20000500
    25a4:	00002491 	.word	0x00002491
    25a8:	0000250d 	.word	0x0000250d

000025ac <updateMatrixMultiplyMode>:
	convertMatrix2Shift(LEDArray ,2);
	convertMatrix2Shift(LEDArray ,3);
}

void	updateMatrixMultiplyMode()
{
    25ac:	b510      	push	{r4, lr}
	static uint8_t prevRow		= 0;
	static uint8_t prevColumn	= 0;
	static uint8_t row    = 0;
	static uint8_t column = 0;
	convertDialMulMode();
    25ae:	4b01      	ldr	r3, [pc, #4]	; (25b4 <updateMatrixMultiplyMode+0x8>)
    25b0:	4798      	blx	r3
	{
		convertDialInfo2LEDMatrix(row , column);	
		update2ShiftResgisterFormat();		
	}
	
}
    25b2:	bd10      	pop	{r4, pc}
    25b4:	00002589 	.word	0x00002589

000025b8 <setupThresholds>:


void setupThresholds()
{
    25b8:	b570      	push	{r4, r5, r6, lr}
    25ba:	2207      	movs	r2, #7
    25bc:	2300      	movs	r3, #0
	uint8_t i = 0;
	uint8_t j = 0;
	for(i=0;i<=12;i++)
	{
		minCThresh[i] = 18*i +  7;
    25be:	4e08      	ldr	r6, [pc, #32]	; (25e0 <setupThresholds+0x28>)
		maxCThresh[i] = 18*i +  11;
    25c0:	4d08      	ldr	r5, [pc, #32]	; (25e4 <setupThresholds+0x2c>)
		
		minRThresh[i] = 18*i +  7;
    25c2:	4c09      	ldr	r4, [pc, #36]	; (25e8 <setupThresholds+0x30>)
		maxRThresh[i] = 18*i +  11;
    25c4:	4809      	ldr	r0, [pc, #36]	; (25ec <setupThresholds+0x34>)
		minCThresh[i] = 18*i +  7;
    25c6:	54f2      	strb	r2, [r6, r3]
		maxCThresh[i] = 18*i +  11;
    25c8:	1d11      	adds	r1, r2, #4
    25ca:	b2c9      	uxtb	r1, r1
    25cc:	54e9      	strb	r1, [r5, r3]
		minRThresh[i] = 18*i +  7;
    25ce:	54e2      	strb	r2, [r4, r3]
		maxRThresh[i] = 18*i +  11;
    25d0:	54c1      	strb	r1, [r0, r3]
    25d2:	3301      	adds	r3, #1
    25d4:	3212      	adds	r2, #18
    25d6:	b2d2      	uxtb	r2, r2
	for(i=0;i<=12;i++)
    25d8:	2b0d      	cmp	r3, #13
    25da:	d1f4      	bne.n	25c6 <setupThresholds+0xe>
	}
}
    25dc:	bd70      	pop	{r4, r5, r6, pc}
    25de:	46c0      	nop			; (mov r8, r8)
    25e0:	20000388 	.word	0x20000388
    25e4:	200003a8 	.word	0x200003a8
    25e8:	200003b8 	.word	0x200003b8
    25ec:	20000398 	.word	0x20000398

000025f0 <initMatrixMultiplyMode>:

void initMatrixMultiplyMode()
{
    25f0:	b510      	push	{r4, lr}
	setupThresholds();
    25f2:	4b01      	ldr	r3, [pc, #4]	; (25f8 <initMatrixMultiplyMode+0x8>)
    25f4:	4798      	blx	r3
    25f6:	bd10      	pop	{r4, pc}
    25f8:	000025b9 	.word	0x000025b9

000025fc <configADC>:
extern  uint8_t dialOutputs[2];

struct adc_module adc_instance;

void configADC()
{
    25fc:	b510      	push	{r4, lr}
    25fe:	b08c      	sub	sp, #48	; 0x30
	struct adc_config conf_adc;
	ADCResult = malloc(sizeof(uint16_t));
    2600:	2002      	movs	r0, #2
    2602:	4b18      	ldr	r3, [pc, #96]	; (2664 <configADC+0x68>)
    2604:	4798      	blx	r3
    2606:	4b18      	ldr	r3, [pc, #96]	; (2668 <configADC+0x6c>)
    2608:	6018      	str	r0, [r3, #0]
	
	adc_get_config_defaults(&conf_adc);
    260a:	4668      	mov	r0, sp
    260c:	4b17      	ldr	r3, [pc, #92]	; (266c <configADC+0x70>)
    260e:	4798      	blx	r3

	conf_adc.reference			=  ADC_REFCTRL_REFSEL_INTVCC0_Val;
    2610:	2301      	movs	r3, #1
    2612:	466a      	mov	r2, sp
    2614:	7053      	strb	r3, [r2, #1]
	conf_adc.clock_prescaler	=  ADC_CLOCK_PRESCALER_DIV32;
    2616:	23c0      	movs	r3, #192	; 0xc0
    2618:	009b      	lsls	r3, r3, #2
    261a:	8053      	strh	r3, [r2, #2]
	conf_adc.positive_input		=  DIAL_L_ANALOG_CHANNEL;
    261c:	2304      	movs	r3, #4
    261e:	7313      	strb	r3, [r2, #12]
	conf_adc.negative_input		=  ADC_NEGATIVE_INPUT_GND;
    2620:	23c0      	movs	r3, #192	; 0xc0
    2622:	015b      	lsls	r3, r3, #5
    2624:	81d3      	strh	r3, [r2, #14]
	conf_adc.resolution			=  ADC_RESOLUTION_8BIT;
    2626:	2330      	movs	r3, #48	; 0x30
    2628:	7113      	strb	r3, [r2, #4]

	adc_init(&adc_instance, ADC, &conf_adc);
    262a:	4c11      	ldr	r4, [pc, #68]	; (2670 <configADC+0x74>)
    262c:	4911      	ldr	r1, [pc, #68]	; (2674 <configADC+0x78>)
    262e:	0020      	movs	r0, r4
    2630:	4b11      	ldr	r3, [pc, #68]	; (2678 <configADC+0x7c>)
    2632:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    2634:	6822      	ldr	r2, [r4, #0]
    2636:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    2638:	b25b      	sxtb	r3, r3
    263a:	2b00      	cmp	r3, #0
    263c:	dbfb      	blt.n	2636 <configADC+0x3a>
    263e:	2180      	movs	r1, #128	; 0x80
    2640:	0209      	lsls	r1, r1, #8
    2642:	4b0e      	ldr	r3, [pc, #56]	; (267c <configADC+0x80>)
    2644:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    2646:	230f      	movs	r3, #15
    2648:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    264a:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    264c:	7813      	ldrb	r3, [r2, #0]
    264e:	2102      	movs	r1, #2
    2650:	430b      	orrs	r3, r1
    2652:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    2654:	4b06      	ldr	r3, [pc, #24]	; (2670 <configADC+0x74>)
    2656:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    2658:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    265a:	b25b      	sxtb	r3, r3
    265c:	2b00      	cmp	r3, #0
    265e:	dbfb      	blt.n	2658 <configADC+0x5c>
	adc_enable(&adc_instance);
}
    2660:	b00c      	add	sp, #48	; 0x30
    2662:	bd10      	pop	{r4, pc}
    2664:	00003219 	.word	0x00003219
    2668:	2000025c 	.word	0x2000025c
    266c:	00000159 	.word	0x00000159
    2670:	200003c8 	.word	0x200003c8
    2674:	42002000 	.word	0x42002000
    2678:	000001a1 	.word	0x000001a1
    267c:	e000e100 	.word	0xe000e100

00002680 <configDials>:

void configDials()
{
    2680:	b510      	push	{r4, lr}
	configADC();
    2682:	4b01      	ldr	r3, [pc, #4]	; (2688 <configDials+0x8>)
    2684:	4798      	blx	r3
}
    2686:	bd10      	pop	{r4, pc}
    2688:	000025fd 	.word	0x000025fd

0000268c <adc_start_read_result>:


uint16_t adc_start_read_result(const enum adc_positive_input analogPin)
{
    268c:	b530      	push	{r4, r5, lr}
	Adc *const adc_module = module_inst->hw;
    268e:	4b2d      	ldr	r3, [pc, #180]	; (2744 <adc_start_read_result+0xb8>)
    2690:	6819      	ldr	r1, [r3, #0]
    2692:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    2694:	b25b      	sxtb	r3, r3
    2696:	2b00      	cmp	r3, #0
    2698:	dbfb      	blt.n	2692 <adc_start_read_result+0x6>
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    269a:	690b      	ldr	r3, [r1, #16]
    269c:	221f      	movs	r2, #31
    269e:	4393      	bics	r3, r2
    26a0:	4318      	orrs	r0, r3
	adc_module->INPUTCTRL.reg =
    26a2:	6108      	str	r0, [r1, #16]
    26a4:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    26a6:	b25b      	sxtb	r3, r3
    26a8:	2b00      	cmp	r3, #0
    26aa:	dbfb      	blt.n	26a4 <adc_start_read_result+0x18>
    26ac:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    26ae:	b25b      	sxtb	r3, r3
    26b0:	2b00      	cmp	r3, #0
    26b2:	dbfb      	blt.n	26ac <adc_start_read_result+0x20>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    26b4:	7b0b      	ldrb	r3, [r1, #12]
    26b6:	2202      	movs	r2, #2
    26b8:	4313      	orrs	r3, r2
    26ba:	730b      	strb	r3, [r1, #12]
    26bc:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    26be:	b25b      	sxtb	r3, r3
    26c0:	2b00      	cmp	r3, #0
    26c2:	dbfb      	blt.n	26bc <adc_start_read_result+0x30>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    26c4:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    26c6:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    26c8:	2402      	movs	r4, #2
    26ca:	e001      	b.n	26d0 <adc_start_read_result+0x44>
	uint16_t temp = 0;
	adc_set_positive_input(&adc_instance, analogPin );
	adc_start_conversion(&adc_instance);
	while((adc_get_status(&adc_instance) & ADC_STATUS_RESULT_READY) != 1);
    26cc:	4210      	tst	r0, r2
    26ce:	d10a      	bne.n	26e6 <adc_start_read_result+0x5a>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    26d0:	7e0b      	ldrb	r3, [r1, #24]
    26d2:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    26d4:	0002      	movs	r2, r0
    26d6:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    26d8:	421d      	tst	r5, r3
    26da:	d000      	beq.n	26de <adc_start_read_result+0x52>
		status_flags |= ADC_STATUS_WINDOW;
    26dc:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    26de:	421c      	tst	r4, r3
    26e0:	d0f4      	beq.n	26cc <adc_start_read_result+0x40>
		status_flags |= ADC_STATUS_OVERRUN;
    26e2:	432a      	orrs	r2, r5
    26e4:	e7f2      	b.n	26cc <adc_start_read_result+0x40>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    26e6:	7e0a      	ldrb	r2, [r1, #24]
    26e8:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    26ea:	2301      	movs	r3, #1
    26ec:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    26ee:	0750      	lsls	r0, r2, #29
    26f0:	d501      	bpl.n	26f6 <adc_start_read_result+0x6a>
		status_flags |= ADC_STATUS_WINDOW;
    26f2:	2002      	movs	r0, #2
    26f4:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    26f6:	0792      	lsls	r2, r2, #30
    26f8:	d501      	bpl.n	26fe <adc_start_read_result+0x72>
		status_flags |= ADC_STATUS_OVERRUN;
    26fa:	2204      	movs	r2, #4
    26fc:	4313      	orrs	r3, r2
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    26fe:	07db      	lsls	r3, r3, #31
    2700:	d403      	bmi.n	270a <adc_start_read_result+0x7e>
	adc_read(&adc_instance, ADCResult);
	temp = *ADCResult;
    2702:	4b11      	ldr	r3, [pc, #68]	; (2748 <adc_start_read_result+0xbc>)
    2704:	681b      	ldr	r3, [r3, #0]
	return temp;
    2706:	8818      	ldrh	r0, [r3, #0]
}
    2708:	bd30      	pop	{r4, r5, pc}
    270a:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    270c:	b25b      	sxtb	r3, r3
    270e:	2b00      	cmp	r3, #0
    2710:	dbfb      	blt.n	270a <adc_start_read_result+0x7e>
	adc_read(&adc_instance, ADCResult);
    2712:	4b0d      	ldr	r3, [pc, #52]	; (2748 <adc_start_read_result+0xbc>)
    2714:	681b      	ldr	r3, [r3, #0]
	*result = adc_module->RESULT.reg;
    2716:	8b4a      	ldrh	r2, [r1, #26]
    2718:	801a      	strh	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
    271a:	4b0a      	ldr	r3, [pc, #40]	; (2744 <adc_start_read_result+0xb8>)
    271c:	6819      	ldr	r1, [r3, #0]
	adc_module->INTFLAG.reg = int_flags;
    271e:	2301      	movs	r3, #1
    2720:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    2722:	7e0a      	ldrb	r2, [r1, #24]
    2724:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    2726:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    2728:	0750      	lsls	r0, r2, #29
    272a:	d501      	bpl.n	2730 <adc_start_read_result+0xa4>
		status_flags |= ADC_STATUS_WINDOW;
    272c:	2002      	movs	r0, #2
    272e:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    2730:	0792      	lsls	r2, r2, #30
    2732:	d501      	bpl.n	2738 <adc_start_read_result+0xac>
		status_flags |= ADC_STATUS_OVERRUN;
    2734:	2204      	movs	r2, #4
    2736:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    2738:	075b      	lsls	r3, r3, #29
    273a:	d5e2      	bpl.n	2702 <adc_start_read_result+0x76>
	adc_module->INTFLAG.reg = int_flags;
    273c:	2302      	movs	r3, #2
    273e:	760b      	strb	r3, [r1, #24]
    2740:	e7df      	b.n	2702 <adc_start_read_result+0x76>
    2742:	46c0      	nop			; (mov r8, r8)
    2744:	200003c8 	.word	0x200003c8
    2748:	2000025c 	.word	0x2000025c

0000274c <filterDialValues>:

void filterDialValues(uint8_t dialLValue , uint8_t dialRValue)
{
    274c:	b570      	push	{r4, r5, r6, lr}
    274e:	000c      	movs	r4, r1
	static uint16_t dialRValueInf	= 0 ;
	static uint16_t countThresholdL  = 0;
	static uint16_t countThresholdR  = 0;
	static bool      firstTime      = true;
	
	if(firstTime == true)
    2750:	4b33      	ldr	r3, [pc, #204]	; (2820 <filterDialValues+0xd4>)
    2752:	781b      	ldrb	r3, [r3, #0]
    2754:	2b00      	cmp	r3, #0
    2756:	d01f      	beq.n	2798 <filterDialValues+0x4c>
	{
		firstTime     = false;
    2758:	2200      	movs	r2, #0
    275a:	4b31      	ldr	r3, [pc, #196]	; (2820 <filterDialValues+0xd4>)
    275c:	701a      	strb	r2, [r3, #0]
		dialLValueInf = dialLValue;
    275e:	b280      	uxth	r0, r0
    2760:	4b30      	ldr	r3, [pc, #192]	; (2824 <filterDialValues+0xd8>)
    2762:	8018      	strh	r0, [r3, #0]
		dialRValueInf = dialRValue;
    2764:	b28c      	uxth	r4, r1
    2766:	4b30      	ldr	r3, [pc, #192]	; (2828 <filterDialValues+0xdc>)
    2768:	801c      	strh	r4, [r3, #0]
		useDialLValue = dialLValue;
    276a:	4b30      	ldr	r3, [pc, #192]	; (282c <filterDialValues+0xe0>)
    276c:	8018      	strh	r0, [r3, #0]
		useDialRValue = dialRValue;
    276e:	4b30      	ldr	r3, [pc, #192]	; (2830 <filterDialValues+0xe4>)
    2770:	801c      	strh	r4, [r3, #0]
		dialRValueInf = (dialRValue + dialRValueInf*9)/10;
	}
	//useDialLValue = dialLValue;
	//useDialRValue = dialRValue;
	
	if(abs(dialLValueInf - useDialLValue) > DIAL_THRESHOLD)
    2772:	4b2c      	ldr	r3, [pc, #176]	; (2824 <filterDialValues+0xd8>)
    2774:	881a      	ldrh	r2, [r3, #0]
    2776:	4b2d      	ldr	r3, [pc, #180]	; (282c <filterDialValues+0xe0>)
    2778:	881b      	ldrh	r3, [r3, #0]
    277a:	1ad3      	subs	r3, r2, r3
    277c:	17d9      	asrs	r1, r3, #31
    277e:	185b      	adds	r3, r3, r1
    2780:	404b      	eors	r3, r1
    2782:	2b02      	cmp	r3, #2
    2784:	dd22      	ble.n	27cc <filterDialValues+0x80>
	{
		countThresholdL++;
    2786:	4b2b      	ldr	r3, [pc, #172]	; (2834 <filterDialValues+0xe8>)
    2788:	881b      	ldrh	r3, [r3, #0]
    278a:	3301      	adds	r3, #1
    278c:	b29b      	uxth	r3, r3
		if(countThresholdL > NUMBER_COUNT_THRESHOLD)
    278e:	2b03      	cmp	r3, #3
    2790:	d814      	bhi.n	27bc <filterDialValues+0x70>
		countThresholdL++;
    2792:	4a28      	ldr	r2, [pc, #160]	; (2834 <filterDialValues+0xe8>)
    2794:	8013      	strh	r3, [r2, #0]
    2796:	e020      	b.n	27da <filterDialValues+0x8e>
		dialLValueInf = (dialLValue + dialLValueInf*9)/10;
    2798:	4d22      	ldr	r5, [pc, #136]	; (2824 <filterDialValues+0xd8>)
    279a:	882a      	ldrh	r2, [r5, #0]
    279c:	00d3      	lsls	r3, r2, #3
    279e:	189b      	adds	r3, r3, r2
    27a0:	1818      	adds	r0, r3, r0
    27a2:	4e25      	ldr	r6, [pc, #148]	; (2838 <filterDialValues+0xec>)
    27a4:	210a      	movs	r1, #10
    27a6:	47b0      	blx	r6
    27a8:	8028      	strh	r0, [r5, #0]
		dialRValueInf = (dialRValue + dialRValueInf*9)/10;
    27aa:	4d1f      	ldr	r5, [pc, #124]	; (2828 <filterDialValues+0xdc>)
    27ac:	882b      	ldrh	r3, [r5, #0]
    27ae:	00d8      	lsls	r0, r3, #3
    27b0:	18c0      	adds	r0, r0, r3
    27b2:	1900      	adds	r0, r0, r4
    27b4:	210a      	movs	r1, #10
    27b6:	47b0      	blx	r6
    27b8:	8028      	strh	r0, [r5, #0]
    27ba:	e7da      	b.n	2772 <filterDialValues+0x26>
		{
			countThresholdL = 0;
    27bc:	2100      	movs	r1, #0
    27be:	4b1d      	ldr	r3, [pc, #116]	; (2834 <filterDialValues+0xe8>)
    27c0:	8019      	strh	r1, [r3, #0]
			useDialLValue = (uint8_t)dialLValueInf;
    27c2:	23ff      	movs	r3, #255	; 0xff
    27c4:	401a      	ands	r2, r3
    27c6:	4b19      	ldr	r3, [pc, #100]	; (282c <filterDialValues+0xe0>)
    27c8:	801a      	strh	r2, [r3, #0]
    27ca:	e006      	b.n	27da <filterDialValues+0x8e>
			
		}
	}
	else
	{
		useDialLValue = (uint8_t)dialLValueInf;
    27cc:	23ff      	movs	r3, #255	; 0xff
    27ce:	401a      	ands	r2, r3
    27d0:	4b16      	ldr	r3, [pc, #88]	; (282c <filterDialValues+0xe0>)
    27d2:	801a      	strh	r2, [r3, #0]
		countThresholdL = 0;
    27d4:	2200      	movs	r2, #0
    27d6:	4b17      	ldr	r3, [pc, #92]	; (2834 <filterDialValues+0xe8>)
    27d8:	801a      	strh	r2, [r3, #0]
	}
	
	if(abs(dialRValueInf - useDialRValue) > DIAL_THRESHOLD)
    27da:	4b13      	ldr	r3, [pc, #76]	; (2828 <filterDialValues+0xdc>)
    27dc:	881a      	ldrh	r2, [r3, #0]
    27de:	4b14      	ldr	r3, [pc, #80]	; (2830 <filterDialValues+0xe4>)
    27e0:	881b      	ldrh	r3, [r3, #0]
    27e2:	1ad3      	subs	r3, r2, r3
    27e4:	17d9      	asrs	r1, r3, #31
    27e6:	185b      	adds	r3, r3, r1
    27e8:	404b      	eors	r3, r1
    27ea:	2b02      	cmp	r3, #2
    27ec:	dd10      	ble.n	2810 <filterDialValues+0xc4>
	{
		countThresholdR++;
    27ee:	4b13      	ldr	r3, [pc, #76]	; (283c <filterDialValues+0xf0>)
    27f0:	881b      	ldrh	r3, [r3, #0]
    27f2:	3301      	adds	r3, #1
    27f4:	b29b      	uxth	r3, r3
		if(countThresholdR > NUMBER_COUNT_THRESHOLD)
    27f6:	2b03      	cmp	r3, #3
    27f8:	d802      	bhi.n	2800 <filterDialValues+0xb4>
		countThresholdR++;
    27fa:	4a10      	ldr	r2, [pc, #64]	; (283c <filterDialValues+0xf0>)
    27fc:	8013      	strh	r3, [r2, #0]
    27fe:	e00e      	b.n	281e <filterDialValues+0xd2>
		{
			countThresholdR = 0;
    2800:	2100      	movs	r1, #0
    2802:	4b0e      	ldr	r3, [pc, #56]	; (283c <filterDialValues+0xf0>)
    2804:	8019      	strh	r1, [r3, #0]
			useDialLValue = (uint8_t)dialRValueInf;
    2806:	23ff      	movs	r3, #255	; 0xff
    2808:	401a      	ands	r2, r3
    280a:	4b08      	ldr	r3, [pc, #32]	; (282c <filterDialValues+0xe0>)
    280c:	801a      	strh	r2, [r3, #0]
    280e:	e006      	b.n	281e <filterDialValues+0xd2>
			
		}
	}
	else
	{
		useDialRValue = (uint8_t)dialRValueInf;
    2810:	23ff      	movs	r3, #255	; 0xff
    2812:	401a      	ands	r2, r3
    2814:	4b06      	ldr	r3, [pc, #24]	; (2830 <filterDialValues+0xe4>)
    2816:	801a      	strh	r2, [r3, #0]
		countThresholdR = 0;
    2818:	2200      	movs	r2, #0
    281a:	4b08      	ldr	r3, [pc, #32]	; (283c <filterDialValues+0xf0>)
    281c:	801a      	strh	r2, [r3, #0]
	}
	
	
	
}
    281e:	bd70      	pop	{r4, r5, r6, pc}
    2820:	20000016 	.word	0x20000016
    2824:	20000264 	.word	0x20000264
    2828:	20000266 	.word	0x20000266
    282c:	2000026c 	.word	0x2000026c
    2830:	2000026e 	.word	0x2000026e
    2834:	20000260 	.word	0x20000260
    2838:	00002ff9 	.word	0x00002ff9
    283c:	20000262 	.word	0x20000262

00002840 <readDials>:
void readDials()
{
    2840:	b570      	push	{r4, r5, r6, lr}
	static uint16_t testCount = 0;
	
	uint16_t dialLValue = 0;
	uint16_t dialRValue = 0;
	static uint8_t tempCount = 0;
	tempCount++;
    2842:	4b20      	ldr	r3, [pc, #128]	; (28c4 <readDials+0x84>)
    2844:	781b      	ldrb	r3, [r3, #0]
    2846:	3301      	adds	r3, #1
    2848:	b2db      	uxtb	r3, r3
	if(tempCount >200)
    284a:	2bc8      	cmp	r3, #200	; 0xc8
    284c:	d831      	bhi.n	28b2 <readDials+0x72>
	tempCount++;
    284e:	4a1d      	ldr	r2, [pc, #116]	; (28c4 <readDials+0x84>)
    2850:	7013      	strb	r3, [r2, #0]
	{
		tempCount = 0;
	}
	dialLValue		= adc_start_read_result(DIAL_L_ANALOG_CHANNEL);
    2852:	2004      	movs	r0, #4
    2854:	4c1c      	ldr	r4, [pc, #112]	; (28c8 <readDials+0x88>)
    2856:	47a0      	blx	r4
    2858:	0005      	movs	r5, r0
	dialRValue		= adc_start_read_result(DIAL_R_ANALOG_CHANNEL);
    285a:	2005      	movs	r0, #5
    285c:	47a0      	blx	r4
	
	sensorsUpdate  = true;
    285e:	4c1b      	ldr	r4, [pc, #108]	; (28cc <readDials+0x8c>)
    2860:	2301      	movs	r3, #1
    2862:	7023      	strb	r3, [r4, #0]
	filterDialValues(dialLValue,dialRValue);
    2864:	b2c1      	uxtb	r1, r0
    2866:	b2e8      	uxtb	r0, r5
    2868:	4b19      	ldr	r3, [pc, #100]	; (28d0 <readDials+0x90>)
    286a:	4798      	blx	r3
	dialOutputs[0]  = (useDialLValue & 0xF0) >>4;
    286c:	4b19      	ldr	r3, [pc, #100]	; (28d4 <readDials+0x94>)
    286e:	8819      	ldrh	r1, [r3, #0]
    2870:	4a19      	ldr	r2, [pc, #100]	; (28d8 <readDials+0x98>)
    2872:	1108      	asrs	r0, r1, #4
    2874:	230f      	movs	r3, #15
    2876:	4018      	ands	r0, r3
    2878:	7010      	strb	r0, [r2, #0]
	dialOutputs[1]  = (useDialLValue & 0x0F);
    287a:	4019      	ands	r1, r3
    287c:	7051      	strb	r1, [r2, #1]
	dialOutputs[2]  = (useDialRValue & 0xF0) >>4;
    287e:	4917      	ldr	r1, [pc, #92]	; (28dc <readDials+0x9c>)
    2880:	8808      	ldrh	r0, [r1, #0]
    2882:	1101      	asrs	r1, r0, #4
    2884:	4019      	ands	r1, r3
    2886:	7091      	strb	r1, [r2, #2]
	dialOutputs[3]  = (useDialRValue & 0x0F);
    2888:	4003      	ands	r3, r0
    288a:	70d3      	strb	r3, [r2, #3]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    288c:	4d14      	ldr	r5, [pc, #80]	; (28e0 <readDials+0xa0>)
    288e:	2610      	movs	r6, #16
    2890:	61ae      	str	r6, [r5, #24]
	port_pin_set_output_level(TP1 , true);
	//dialOutputs[0]  = tempCount;
	//dialOutputs[1]  = tempCount+1;
	i2c_update_sensors_values();
    2892:	4b14      	ldr	r3, [pc, #80]	; (28e4 <readDials+0xa4>)
    2894:	4798      	blx	r3
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2896:	616e      	str	r6, [r5, #20]
	port_pin_set_output_level(TP1 , false);
	//dialUpdate  = true;
	//dialUpdate  = false;
	//testLogDialL[testCount] = useDialRValue;
	sensorsUpdate = false;
    2898:	2300      	movs	r3, #0
    289a:	7023      	strb	r3, [r4, #0]
	//testLogDialR[testCount] = useDialRValue;
	testCount++;
    289c:	4b12      	ldr	r3, [pc, #72]	; (28e8 <readDials+0xa8>)
    289e:	881b      	ldrh	r3, [r3, #0]
    28a0:	3301      	adds	r3, #1
    28a2:	b29b      	uxth	r3, r3
	
	if(testCount == 500)
    28a4:	22fa      	movs	r2, #250	; 0xfa
    28a6:	0052      	lsls	r2, r2, #1
    28a8:	4293      	cmp	r3, r2
    28aa:	d006      	beq.n	28ba <readDials+0x7a>
	testCount++;
    28ac:	4a0e      	ldr	r2, [pc, #56]	; (28e8 <readDials+0xa8>)
    28ae:	8013      	strh	r3, [r2, #0]
	{
		testCount = 0;
	}
	
    28b0:	bd70      	pop	{r4, r5, r6, pc}
		tempCount = 0;
    28b2:	2200      	movs	r2, #0
    28b4:	4b03      	ldr	r3, [pc, #12]	; (28c4 <readDials+0x84>)
    28b6:	701a      	strb	r2, [r3, #0]
    28b8:	e7cb      	b.n	2852 <readDials+0x12>
		testCount = 0;
    28ba:	2200      	movs	r2, #0
    28bc:	4b0a      	ldr	r3, [pc, #40]	; (28e8 <readDials+0xa8>)
    28be:	801a      	strh	r2, [r3, #0]
    28c0:	e7f6      	b.n	28b0 <readDials+0x70>
    28c2:	46c0      	nop			; (mov r8, r8)
    28c4:	20000268 	.word	0x20000268
    28c8:	0000268d 	.word	0x0000268d
    28cc:	200002ac 	.word	0x200002ac
    28d0:	0000274d 	.word	0x0000274d
    28d4:	2000026c 	.word	0x2000026c
    28d8:	20000500 	.word	0x20000500
    28dc:	2000026e 	.word	0x2000026e
    28e0:	41004400 	.word	0x41004400
    28e4:	0000238d 	.word	0x0000238d
    28e8:	2000026a 	.word	0x2000026a

000028ec <resetShiftData>:
void LEDMatrixSend(uint8_t* receiveBuffer);
void LEDMatrixInit();
void LEDMatrixPinInit();

void resetShiftData()
{
    28ec:	b570      	push	{r4, r5, r6, lr}
    28ee:	4c04      	ldr	r4, [pc, #16]	; (2900 <resetShiftData+0x14>)
    28f0:	2504      	movs	r5, #4
    28f2:	6165      	str	r5, [r4, #20]
	//MR pin low
	port_pin_set_output_level(RESET_PIN,false);
	//Delay
	delay_cycles_us(3);
    28f4:	2003      	movs	r0, #3
    28f6:	4b03      	ldr	r3, [pc, #12]	; (2904 <resetShiftData+0x18>)
    28f8:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    28fa:	61a5      	str	r5, [r4, #24]
	//MR pin high
	port_pin_set_output_level(RESET_PIN,true);
}
    28fc:	bd70      	pop	{r4, r5, r6, pc}
    28fe:	46c0      	nop			; (mov r8, r8)
    2900:	41004400 	.word	0x41004400
    2904:	0000012d 	.word	0x0000012d

00002908 <LEDMatrixSend>:

//Send Matrix Send
void LEDMatrixSend(uint8_t* receiveBuffer)
{
    2908:	b570      	push	{r4, r5, r6, lr}
	setUpDMAData(receiveBuffer);
    290a:	4b08      	ldr	r3, [pc, #32]	; (292c <LEDMatrixSend+0x24>)
    290c:	4798      	blx	r3
	resetShiftData();
    290e:	4b08      	ldr	r3, [pc, #32]	; (2930 <LEDMatrixSend+0x28>)
    2910:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    2912:	4c08      	ldr	r4, [pc, #32]	; (2934 <LEDMatrixSend+0x2c>)
    2914:	2580      	movs	r5, #128	; 0x80
    2916:	046d      	lsls	r5, r5, #17
    2918:	6165      	str	r5, [r4, #20]
	
	//SS Enable Low
	port_pin_set_output_level(SS_PIN,false);
	delay_cycles_us(1);
    291a:	2001      	movs	r0, #1
    291c:	4e06      	ldr	r6, [pc, #24]	; (2938 <LEDMatrixSend+0x30>)
    291e:	47b0      	blx	r6
	//Send the serial data
	startTransferDMA();
    2920:	4b06      	ldr	r3, [pc, #24]	; (293c <LEDMatrixSend+0x34>)
    2922:	4798      	blx	r3
	//SS Enable High 
	delay_cycles_us(1);
    2924:	2001      	movs	r0, #1
    2926:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    2928:	61a5      	str	r5, [r4, #24]
	port_pin_set_output_level(SS_PIN,true);
}
    292a:	bd70      	pop	{r4, r5, r6, pc}
    292c:	000029a5 	.word	0x000029a5
    2930:	000028ed 	.word	0x000028ed
    2934:	41004400 	.word	0x41004400
    2938:	0000012d 	.word	0x0000012d
    293c:	000029b9 	.word	0x000029b9

00002940 <LEDMatrixPinInit>:
	port_pin_set_output_level(OUTPUT_ENABLE_PIN,false);
}


void LEDMatrixPinInit()
{
    2940:	b5f0      	push	{r4, r5, r6, r7, lr}
    2942:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    2944:	ac01      	add	r4, sp, #4
    2946:	2501      	movs	r5, #1
    2948:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    294a:	2700      	movs	r7, #0
    294c:	70a7      	strb	r7, [r4, #2]
	//MR Pin
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    294e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(RESET_PIN, &config_port_pin);
    2950:	0021      	movs	r1, r4
    2952:	2002      	movs	r0, #2
    2954:	4e07      	ldr	r6, [pc, #28]	; (2974 <LEDMatrixPinInit+0x34>)
    2956:	47b0      	blx	r6
	config->input_pull = PORT_PIN_PULL_UP;
    2958:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    295a:	70a7      	strb	r7, [r4, #2]
	
	
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    295c:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(SS_PIN, &config_port_pin);
    295e:	0021      	movs	r1, r4
    2960:	2018      	movs	r0, #24
    2962:	47b0      	blx	r6
	config->input_pull = PORT_PIN_PULL_UP;
    2964:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    2966:	70a7      	strb	r7, [r4, #2]
	
	
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    2968:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(OUTPUT_ENABLE_PIN, &config_port_pin);
    296a:	0021      	movs	r1, r4
    296c:	2003      	movs	r0, #3
    296e:	47b0      	blx	r6

}
    2970:	b003      	add	sp, #12
    2972:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2974:	000017ad 	.word	0x000017ad

00002978 <LEDMatrixInit>:
{
    2978:	b570      	push	{r4, r5, r6, lr}
	LEDMatrixPinInit();
    297a:	4b04      	ldr	r3, [pc, #16]	; (298c <LEDMatrixInit+0x14>)
    297c:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    297e:	4c04      	ldr	r4, [pc, #16]	; (2990 <LEDMatrixInit+0x18>)
    2980:	2508      	movs	r5, #8
    2982:	61a5      	str	r5, [r4, #24]
	resetShiftData();
    2984:	4b03      	ldr	r3, [pc, #12]	; (2994 <LEDMatrixInit+0x1c>)
    2986:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    2988:	6165      	str	r5, [r4, #20]
}
    298a:	bd70      	pop	{r4, r5, r6, pc}
    298c:	00002941 	.word	0x00002941
    2990:	41004400 	.word	0x41004400
    2994:	000028ed 	.word	0x000028ed

00002998 <transfer_done>:
extern volatile bool transferDone;
extern volatile uint8_t DMASourceRegister[NUMBER_SHIFTREGISTERS]; 

static void transfer_done(struct dma_resource* const resource )
{
	transferDone = true;
    2998:	2201      	movs	r2, #1
    299a:	4b01      	ldr	r3, [pc, #4]	; (29a0 <transfer_done+0x8>)
    299c:	701a      	strb	r2, [r3, #0]
}
    299e:	4770      	bx	lr
    29a0:	200002ad 	.word	0x200002ad

000029a4 <setUpDMAData>:

void setUpDMAData(uint8_t* receiveData)
{
    29a4:	2300      	movs	r3, #0
	uint8_t i =0;
	for(i=0;i<NUMBER_SHIFTREGISTERS;i++)
	{
		DMASourceRegister[i] = receiveData[i];
    29a6:	4903      	ldr	r1, [pc, #12]	; (29b4 <setUpDMAData+0x10>)
    29a8:	5cc2      	ldrb	r2, [r0, r3]
    29aa:	54ca      	strb	r2, [r1, r3]
    29ac:	3301      	adds	r3, #1
	for(i=0;i<NUMBER_SHIFTREGISTERS;i++)
    29ae:	2b0d      	cmp	r3, #13
    29b0:	d1fa      	bne.n	29a8 <setUpDMAData+0x4>
	}
}
    29b2:	4770      	bx	lr
    29b4:	20000458 	.word	0x20000458

000029b8 <startTransferDMA>:

void startTransferDMA()
{
    29b8:	b510      	push	{r4, lr}

	dma_start_transfer_job(&example_resource);
    29ba:	4805      	ldr	r0, [pc, #20]	; (29d0 <startTransferDMA+0x18>)
    29bc:	4b05      	ldr	r3, [pc, #20]	; (29d4 <startTransferDMA+0x1c>)
    29be:	4798      	blx	r3
	while(transferDone == false);
    29c0:	4a05      	ldr	r2, [pc, #20]	; (29d8 <startTransferDMA+0x20>)
    29c2:	7813      	ldrb	r3, [r2, #0]
    29c4:	2b00      	cmp	r3, #0
    29c6:	d0fc      	beq.n	29c2 <startTransferDMA+0xa>
	transferDone = false;
    29c8:	2200      	movs	r2, #0
    29ca:	4b03      	ldr	r3, [pc, #12]	; (29d8 <startTransferDMA+0x20>)
    29cc:	701a      	strb	r2, [r3, #0]
	
}
    29ce:	bd10      	pop	{r4, pc}
    29d0:	20000400 	.word	0x20000400
    29d4:	00000895 	.word	0x00000895
    29d8:	200002ad 	.word	0x200002ad

000029dc <configureSPIMaster>:

void configureSPIMaster(void)
{
    29dc:	b570      	push	{r4, r5, r6, lr}
    29de:	b08e      	sub	sp, #56	; 0x38
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    29e0:	2401      	movs	r4, #1
    29e2:	466b      	mov	r3, sp
    29e4:	701c      	strb	r4, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    29e6:	2500      	movs	r5, #0
    29e8:	741d      	strb	r5, [r3, #16]
	config->run_in_standby   = false;
    29ea:	745d      	strb	r5, [r3, #17]
	config->receiver_enable  = true;
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    29ec:	74dc      	strb	r4, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    29ee:	751d      	strb	r5, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    29f0:	220c      	movs	r2, #12
    29f2:	2100      	movs	r1, #0
    29f4:	a806      	add	r0, sp, #24
    29f6:	4b19      	ldr	r3, [pc, #100]	; (2a5c <configureSPIMaster+0x80>)
    29f8:	4798      	blx	r3
	struct spi_config config_spi_master;
	struct spi_slave_inst_config slave_dev_config;
	spi_get_config_defaults(&config_spi_master);
	config_spi_master.data_order       = SPI_DATA_ORDER_LSB;
    29fa:	2380      	movs	r3, #128	; 0x80
    29fc:	05db      	lsls	r3, r3, #23
    29fe:	9301      	str	r3, [sp, #4]
	config_spi_master.transfer_mode = SPI_TRANSFER_MODE_1;
    2a00:	2380      	movs	r3, #128	; 0x80
    2a02:	055b      	lsls	r3, r3, #21
    2a04:	9302      	str	r3, [sp, #8]
	config_spi_master.mux_setting = CONF_MASTER_MUX_SETTING;
    2a06:	9503      	str	r5, [sp, #12]
	config_spi_master.pinmux_pad0 = CONF_MASTER_PINMUX_PAD0;
    2a08:	4b15      	ldr	r3, [pc, #84]	; (2a60 <configureSPIMaster+0x84>)
    2a0a:	930a      	str	r3, [sp, #40]	; 0x28
	config_spi_master.pinmux_pad1 = CONF_MASTER_PINMUX_PAD1;
    2a0c:	4b15      	ldr	r3, [pc, #84]	; (2a64 <configureSPIMaster+0x88>)
    2a0e:	930b      	str	r3, [sp, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = CONF_MASTER_PINMUX_PAD2;
    2a10:	2301      	movs	r3, #1
    2a12:	425b      	negs	r3, r3
    2a14:	930c      	str	r3, [sp, #48]	; 0x30
	config_spi_master.pinmux_pad3 = CONF_MASTER_PINMUX_PAD3;
    2a16:	930d      	str	r3, [sp, #52]	; 0x34
	config_spi_master.receiver_enable  = false;
    2a18:	466b      	mov	r3, sp
    2a1a:	749d      	strb	r5, [r3, #18]
	config_spi_master.mode_specific.master.baudrate =  SPIBAUDRATE; //2.5MHz  = 400ns per signal
    2a1c:	4b12      	ldr	r3, [pc, #72]	; (2a68 <configureSPIMaster+0x8c>)
    2a1e:	9306      	str	r3, [sp, #24]
	config_spi_master.generator_source = GCLK_GENERATOR_3;
    2a20:	2203      	movs	r2, #3
    2a22:	2324      	movs	r3, #36	; 0x24
    2a24:	4669      	mov	r1, sp
    2a26:	54ca      	strb	r2, [r1, r3]
	spi_init(&spi_master_instance, CONF_MASTER_SPI_MODULE, &config_spi_master);
    2a28:	4e10      	ldr	r6, [pc, #64]	; (2a6c <configureSPIMaster+0x90>)
    2a2a:	466a      	mov	r2, sp
    2a2c:	4910      	ldr	r1, [pc, #64]	; (2a70 <configureSPIMaster+0x94>)
    2a2e:	0030      	movs	r0, r6
    2a30:	4b10      	ldr	r3, [pc, #64]	; (2a74 <configureSPIMaster+0x98>)
    2a32:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2a34:	6835      	ldr	r5, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2a36:	0028      	movs	r0, r5
    2a38:	4b0f      	ldr	r3, [pc, #60]	; (2a78 <configureSPIMaster+0x9c>)
    2a3a:	4798      	blx	r3
    2a3c:	231f      	movs	r3, #31
    2a3e:	4018      	ands	r0, r3
    2a40:	4084      	lsls	r4, r0
    2a42:	4b0e      	ldr	r3, [pc, #56]	; (2a7c <configureSPIMaster+0xa0>)
    2a44:	601c      	str	r4, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2a46:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    2a48:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    2a4a:	2b00      	cmp	r3, #0
    2a4c:	d1fc      	bne.n	2a48 <configureSPIMaster+0x6c>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2a4e:	682b      	ldr	r3, [r5, #0]
    2a50:	2202      	movs	r2, #2
    2a52:	4313      	orrs	r3, r2
    2a54:	602b      	str	r3, [r5, #0]
	spi_enable(&spi_master_instance);
}
    2a56:	b00e      	add	sp, #56	; 0x38
    2a58:	bd70      	pop	{r4, r5, r6, pc}
    2a5a:	46c0      	nop			; (mov r8, r8)
    2a5c:	0000323f 	.word	0x0000323f
    2a60:	001e0002 	.word	0x001e0002
    2a64:	001f0002 	.word	0x001f0002
    2a68:	002625a0 	.word	0x002625a0
    2a6c:	2000041c 	.word	0x2000041c
    2a70:	42000c00 	.word	0x42000c00
    2a74:	00001069 	.word	0x00001069
    2a78:	00001019 	.word	0x00001019
    2a7c:	e000e100 	.word	0xe000e100

00002a80 <setupDMA>:
	descriptor_config.next_descriptor_address	= 0;
	dma_descriptor_create(descriptor, &descriptor_config);
}

void setupDMA()
{
    2a80:	b570      	push	{r4, r5, r6, lr}
    2a82:	b086      	sub	sp, #24
	dma_get_config_defaults(&config);
    2a84:	4668      	mov	r0, sp
    2a86:	4b1a      	ldr	r3, [pc, #104]	; (2af0 <setupDMA+0x70>)
    2a88:	4798      	blx	r3
	config.peripheral_trigger = SERCOM1_DMAC_ID_TX;
    2a8a:	2304      	movs	r3, #4
    2a8c:	466a      	mov	r2, sp
    2a8e:	7053      	strb	r3, [r2, #1]
	config.trigger_action = DMA_TRIGGER_ACTION_BEAT;
    2a90:	2502      	movs	r5, #2
    2a92:	3b02      	subs	r3, #2
    2a94:	7093      	strb	r3, [r2, #2]
	dma_allocate(resource, &config);
    2a96:	4c17      	ldr	r4, [pc, #92]	; (2af4 <setupDMA+0x74>)
    2a98:	4669      	mov	r1, sp
    2a9a:	0020      	movs	r0, r4
    2a9c:	4b16      	ldr	r3, [pc, #88]	; (2af8 <setupDMA+0x78>)
    2a9e:	4798      	blx	r3
static inline void dma_descriptor_get_config_defaults(struct dma_descriptor_config *config)
{
	Assert(config);

	/* Set descriptor as valid */
	config->descriptor_valid = true;
    2aa0:	2201      	movs	r2, #1
    2aa2:	466b      	mov	r3, sp
    2aa4:	701a      	strb	r2, [r3, #0]
	/* Disable event output */
	config->event_output_selection = DMA_EVENT_OUTPUT_DISABLE;
    2aa6:	2300      	movs	r3, #0
    2aa8:	4669      	mov	r1, sp
    2aaa:	704b      	strb	r3, [r1, #1]
	/* No block action */
	config->block_action = DMA_BLOCK_ACTION_NOACT;
    2aac:	708b      	strb	r3, [r1, #2]
	/* Set beat size to one byte */
	config->beat_size = DMA_BEAT_SIZE_BYTE;
    2aae:	70cb      	strb	r3, [r1, #3]
	/* Enable source increment */
	config->src_increment_enable = true;
    2ab0:	710a      	strb	r2, [r1, #4]
	/* Enable destination increment */
	config->dst_increment_enable = true;
	/* Step size is applied to the destination address */
	config->step_selection = DMA_STEPSEL_DST;
    2ab2:	718b      	strb	r3, [r1, #6]
	/* Address increment is beat size multiplied by 1*/
	config->step_size = DMA_ADDRESS_INCREMENT_STEP_SIZE_1;
    2ab4:	71cb      	strb	r3, [r1, #7]
	/* Default source address is set to NULL */
	config->source_address = (uint32_t)NULL;
	/* Default destination address is set to NULL */
	config->destination_address = (uint32_t)NULL;
	/** Next descriptor address set to 0 */
	config->next_descriptor_address = 0;
    2ab6:	9305      	str	r3, [sp, #20]
	descriptor_config.dst_increment_enable		= false;
    2ab8:	714b      	strb	r3, [r1, #5]
	descriptor_config.block_transfer_count		= blockTransferCount;
    2aba:	330d      	adds	r3, #13
    2abc:	810b      	strh	r3, [r1, #8]
	descriptor_config.source_address			= (uint32_t)DMASourceRegister+blockTransferCount;
    2abe:	4b0f      	ldr	r3, [pc, #60]	; (2afc <setupDMA+0x7c>)
    2ac0:	330d      	adds	r3, #13
    2ac2:	9303      	str	r3, [sp, #12]
	descriptor_config.destination_address		= 0x42000C28;
    2ac4:	4b0e      	ldr	r3, [pc, #56]	; (2b00 <setupDMA+0x80>)
    2ac6:	9304      	str	r3, [sp, #16]
	dma_descriptor_create(descriptor, &descriptor_config);
    2ac8:	4e0e      	ldr	r6, [pc, #56]	; (2b04 <setupDMA+0x84>)
    2aca:	0030      	movs	r0, r6
    2acc:	4b0e      	ldr	r3, [pc, #56]	; (2b08 <setupDMA+0x88>)
    2ace:	4798      	blx	r3
	configure_dma_resource(&example_resource);
	setup_transfer_descriptor(&example_descriptor);
	dma_add_descriptor(&example_resource, &example_descriptor);
    2ad0:	0031      	movs	r1, r6
    2ad2:	0020      	movs	r0, r4
    2ad4:	4b0d      	ldr	r3, [pc, #52]	; (2b0c <setupDMA+0x8c>)
    2ad6:	4798      	blx	r3
	resource->callback[type] = callback;
    2ad8:	4b0d      	ldr	r3, [pc, #52]	; (2b10 <setupDMA+0x90>)
    2ada:	60a3      	str	r3, [r4, #8]
	resource->callback_enable |= 1 << type;
    2adc:	7c23      	ldrb	r3, [r4, #16]
    2ade:	432b      	orrs	r3, r5
    2ae0:	7423      	strb	r3, [r4, #16]
	g_chan_interrupt_flag[resource->channel_id] |= (1UL << type);
    2ae2:	7822      	ldrb	r2, [r4, #0]
    2ae4:	490b      	ldr	r1, [pc, #44]	; (2b14 <setupDMA+0x94>)
    2ae6:	5c8b      	ldrb	r3, [r1, r2]
    2ae8:	432b      	orrs	r3, r5
    2aea:	548b      	strb	r3, [r1, r2]
	dma_register_callback(&example_resource, transfer_done, DMA_CALLBACK_TRANSFER_DONE);
	dma_enable_callback(&example_resource, DMA_CALLBACK_TRANSFER_DONE);
}
    2aec:	b006      	add	sp, #24
    2aee:	bd70      	pop	{r4, r5, r6, pc}
    2af0:	0000073d 	.word	0x0000073d
    2af4:	20000400 	.word	0x20000400
    2af8:	0000074d 	.word	0x0000074d
    2afc:	20000458 	.word	0x20000458
    2b00:	42000c28 	.word	0x42000c28
    2b04:	200003f0 	.word	0x200003f0
    2b08:	0000091d 	.word	0x0000091d
    2b0c:	000009c5 	.word	0x000009c5
    2b10:	00002999 	.word	0x00002999
    2b14:	200001d0 	.word	0x200001d0

00002b18 <SPIMasterInit>:

void SPIMasterInit()
{
    2b18:	b510      	push	{r4, lr}
	configureSPIMaster();
    2b1a:	4b02      	ldr	r3, [pc, #8]	; (2b24 <SPIMasterInit+0xc>)
    2b1c:	4798      	blx	r3
	setupDMA();
    2b1e:	4b02      	ldr	r3, [pc, #8]	; (2b28 <SPIMasterInit+0x10>)
    2b20:	4798      	blx	r3
}
    2b22:	bd10      	pop	{r4, pc}
    2b24:	000029dd 	.word	0x000029dd
    2b28:	00002a81 	.word	0x00002a81

00002b2c <reverseByte>:
extern  volatile uint8_t     RMatrix[4][8];
extern  volatile uint8_t     GMatrix[4][8];
extern  volatile uint8_t     BMatrix[4][8];

uint8_t reverseByte(volatile uint8_t input) 
{
    2b2c:	b082      	sub	sp, #8
    2b2e:	466b      	mov	r3, sp
    2b30:	71d8      	strb	r0, [r3, #7]
	input = (input & 0xF0) >> 4 | (input & 0x0F) << 4;
    2b32:	79da      	ldrb	r2, [r3, #7]
    2b34:	79d9      	ldrb	r1, [r3, #7]
    2b36:	0912      	lsrs	r2, r2, #4
    2b38:	0109      	lsls	r1, r1, #4
    2b3a:	430a      	orrs	r2, r1
    2b3c:	b2d2      	uxtb	r2, r2
    2b3e:	71da      	strb	r2, [r3, #7]
	input = (input & 0xCC) >> 2 | (input & 0x33) << 2;
    2b40:	79d8      	ldrb	r0, [r3, #7]
    2b42:	79d9      	ldrb	r1, [r3, #7]
    2b44:	0880      	lsrs	r0, r0, #2
    2b46:	2233      	movs	r2, #51	; 0x33
    2b48:	4002      	ands	r2, r0
    2b4a:	0089      	lsls	r1, r1, #2
    2b4c:	2033      	movs	r0, #51	; 0x33
    2b4e:	4381      	bics	r1, r0
    2b50:	430a      	orrs	r2, r1
    2b52:	b2d2      	uxtb	r2, r2
    2b54:	71da      	strb	r2, [r3, #7]
	input = (input & 0xAA) >> 1 | (input & 0x55) << 1;
    2b56:	79d8      	ldrb	r0, [r3, #7]
    2b58:	79d9      	ldrb	r1, [r3, #7]
    2b5a:	0840      	lsrs	r0, r0, #1
    2b5c:	2255      	movs	r2, #85	; 0x55
    2b5e:	4002      	ands	r2, r0
    2b60:	0049      	lsls	r1, r1, #1
    2b62:	2055      	movs	r0, #85	; 0x55
    2b64:	4381      	bics	r1, r0
    2b66:	430a      	orrs	r2, r1
    2b68:	b2d2      	uxtb	r2, r2
    2b6a:	71da      	strb	r2, [r3, #7]
	return input;
    2b6c:	79d8      	ldrb	r0, [r3, #7]
    2b6e:	b2c0      	uxtb	r0, r0
}
    2b70:	b002      	add	sp, #8
    2b72:	4770      	bx	lr

00002b74 <convertMatrix2Shift>:


void convertMatrix2Shift(uint8_t* matrixData ,uint8_t matrixColor)
{
    2b74:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b76:	46de      	mov	lr, fp
    2b78:	4657      	mov	r7, sl
    2b7a:	464e      	mov	r6, r9
    2b7c:	4645      	mov	r5, r8
    2b7e:	b5e0      	push	{r5, r6, r7, lr}
    2b80:	b083      	sub	sp, #12
    2b82:	9001      	str	r0, [sp, #4]
	uint8_t				i,j,k			= 0;
	uint32_t			temp			= 0;
	uint32_t			temp_1			= 0;
	uint8_t				carryBits		= 0;
	uint32_t            mask6Bits		= 0xFC000000;
	switch(matrixColor)
    2b84:	2902      	cmp	r1, #2
    2b86:	d067      	beq.n	2c58 <convertMatrix2Shift+0xe4>
    2b88:	2903      	cmp	r1, #3
    2b8a:	d009      	beq.n	2ba0 <convertMatrix2Shift+0x2c>
    2b8c:	2901      	cmp	r1, #1
    2b8e:	d100      	bne.n	2b92 <convertMatrix2Shift+0x1e>
    2b90:	e0a4      	b.n	2cdc <convertMatrix2Shift+0x168>
			}
			break;
		default:
			break;
	}
}
    2b92:	b003      	add	sp, #12
    2b94:	bc3c      	pop	{r2, r3, r4, r5}
    2b96:	4690      	mov	r8, r2
    2b98:	4699      	mov	r9, r3
    2b9a:	46a2      	mov	sl, r4
    2b9c:	46ab      	mov	fp, r5
    2b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ba0:	9f01      	ldr	r7, [sp, #4]
	switch(matrixColor)
    2ba2:	2603      	movs	r6, #3
					BMatrix[1][2+i+(2*j)]       =		reverseByte((uint8_t)((temp &  (mask6Bits>>6*2*i)) >> (26-6*2*i)));
    2ba4:	4b7e      	ldr	r3, [pc, #504]	; (2da0 <convertMatrix2Shift+0x22c>)
    2ba6:	4698      	mov	r8, r3
    2ba8:	4b7e      	ldr	r3, [pc, #504]	; (2da4 <convertMatrix2Shift+0x230>)
    2baa:	469b      	mov	fp, r3
					BMatrix[2][2+i+(2*j)]       =		reverseByte((uint8_t)(((temp &  (mask6Bits>>6+6*2*i))	>> (20-6*2*i))<<2));
    2bac:	243f      	movs	r4, #63	; 0x3f
					temp_1   =  matrixData[j*3+k] ;
    2bae:	78bd      	ldrb	r5, [r7, #2]
					temp    |=  (temp_1 << (24 - 8*k));
    2bb0:	022d      	lsls	r5, r5, #8
					temp_1   =  matrixData[j*3+k] ;
    2bb2:	7878      	ldrb	r0, [r7, #1]
					temp    |=  (temp_1 << (24 - 8*k));
    2bb4:	0400      	lsls	r0, r0, #16
    2bb6:	4305      	orrs	r5, r0
					temp_1   =  matrixData[j*3+k] ;
    2bb8:	7838      	ldrb	r0, [r7, #0]
					temp    |=  (temp_1 << (24 - 8*k));
    2bba:	0600      	lsls	r0, r0, #24
    2bbc:	4305      	orrs	r5, r0
    2bbe:	1e73      	subs	r3, r6, #1
    2bc0:	469a      	mov	sl, r3
					BMatrix[1][2+i+(2*j)]       =		reverseByte((uint8_t)((temp &  (mask6Bits>>6*2*i)) >> (26-6*2*i)));
    2bc2:	0ea8      	lsrs	r0, r5, #26
    2bc4:	47c0      	blx	r8
    2bc6:	44da      	add	sl, fp
    2bc8:	4653      	mov	r3, sl
    2bca:	7218      	strb	r0, [r3, #8]
					BMatrix[2][2+i+(2*j)]       =		reverseByte((uint8_t)(((temp &  (mask6Bits>>6+6*2*i))	>> (20-6*2*i))<<2));
    2bcc:	0d28      	lsrs	r0, r5, #20
    2bce:	4020      	ands	r0, r4
    2bd0:	0080      	lsls	r0, r0, #2
    2bd2:	47c0      	blx	r8
    2bd4:	4653      	mov	r3, sl
    2bd6:	7418      	strb	r0, [r3, #16]
					BMatrix[1][2+i+(2*j)]       =		reverseByte((uint8_t)((temp &  (mask6Bits>>6*2*i)) >> (26-6*2*i)));
    2bd8:	0ba8      	lsrs	r0, r5, #14
    2bda:	4020      	ands	r0, r4
    2bdc:	47c0      	blx	r8
    2bde:	46b2      	mov	sl, r6
    2be0:	44da      	add	sl, fp
    2be2:	4653      	mov	r3, sl
    2be4:	7218      	strb	r0, [r3, #8]
					BMatrix[2][2+i+(2*j)]       =		reverseByte((uint8_t)(((temp &  (mask6Bits>>6+6*2*i))	>> (20-6*2*i))<<2));
    2be6:	0a28      	lsrs	r0, r5, #8
    2be8:	4020      	ands	r0, r4
    2bea:	0080      	lsls	r0, r0, #2
    2bec:	47c0      	blx	r8
    2bee:	4653      	mov	r3, sl
    2bf0:	7418      	strb	r0, [r3, #16]
    2bf2:	3703      	adds	r7, #3
    2bf4:	3602      	adds	r6, #2
			for(j=0;j<3;j++)
    2bf6:	2e09      	cmp	r6, #9
    2bf8:	d1d9      	bne.n	2bae <convertMatrix2Shift+0x3a>
    2bfa:	9c01      	ldr	r4, [sp, #4]
    2bfc:	3409      	adds	r4, #9
    2bfe:	2601      	movs	r6, #1
					BMatrix[0][0+i+ (2*j)]       =		reverseByte((uint8_t)((temp & (mask6Bits>>6*2*i)) >> (26-6*2*i)));
    2c00:	4b67      	ldr	r3, [pc, #412]	; (2da0 <convertMatrix2Shift+0x22c>)
    2c02:	4698      	mov	r8, r3
    2c04:	4f67      	ldr	r7, [pc, #412]	; (2da4 <convertMatrix2Shift+0x230>)
					BMatrix[3][0+i+ (2*j)]       =		reverseByte((uint8_t)(((temp & (mask6Bits>>6+6*2*i)) >> (20-6*2*i))<<2));
    2c06:	233f      	movs	r3, #63	; 0x3f
    2c08:	4699      	mov	r9, r3
					temp_1    =  matrixData[(3+j)*3+k] ;
    2c0a:	78a5      	ldrb	r5, [r4, #2]
					temp      |=  temp_1 << 24 - 8*k;
    2c0c:	022d      	lsls	r5, r5, #8
					temp_1    =  matrixData[(3+j)*3+k] ;
    2c0e:	7860      	ldrb	r0, [r4, #1]
					temp      |=  temp_1 << 24 - 8*k;
    2c10:	0400      	lsls	r0, r0, #16
    2c12:	4305      	orrs	r5, r0
					temp_1    =  matrixData[(3+j)*3+k] ;
    2c14:	7820      	ldrb	r0, [r4, #0]
					temp      |=  temp_1 << 24 - 8*k;
    2c16:	0600      	lsls	r0, r0, #24
    2c18:	4305      	orrs	r5, r0
    2c1a:	1e73      	subs	r3, r6, #1
    2c1c:	469a      	mov	sl, r3
					BMatrix[0][0+i+ (2*j)]       =		reverseByte((uint8_t)((temp & (mask6Bits>>6*2*i)) >> (26-6*2*i)));
    2c1e:	0ea8      	lsrs	r0, r5, #26
    2c20:	47c0      	blx	r8
    2c22:	4653      	mov	r3, sl
    2c24:	54f8      	strb	r0, [r7, r3]
					BMatrix[3][0+i+ (2*j)]       =		reverseByte((uint8_t)(((temp & (mask6Bits>>6+6*2*i)) >> (20-6*2*i))<<2));
    2c26:	0d28      	lsrs	r0, r5, #20
    2c28:	464b      	mov	r3, r9
    2c2a:	4018      	ands	r0, r3
    2c2c:	0080      	lsls	r0, r0, #2
    2c2e:	47c0      	blx	r8
    2c30:	4653      	mov	r3, sl
    2c32:	18fb      	adds	r3, r7, r3
    2c34:	7618      	strb	r0, [r3, #24]
					BMatrix[0][0+i+ (2*j)]       =		reverseByte((uint8_t)((temp & (mask6Bits>>6*2*i)) >> (26-6*2*i)));
    2c36:	0ba8      	lsrs	r0, r5, #14
    2c38:	464b      	mov	r3, r9
    2c3a:	4018      	ands	r0, r3
    2c3c:	47c0      	blx	r8
    2c3e:	55b8      	strb	r0, [r7, r6]
					BMatrix[3][0+i+ (2*j)]       =		reverseByte((uint8_t)(((temp & (mask6Bits>>6+6*2*i)) >> (20-6*2*i))<<2));
    2c40:	0a28      	lsrs	r0, r5, #8
    2c42:	464b      	mov	r3, r9
    2c44:	4018      	ands	r0, r3
    2c46:	0080      	lsls	r0, r0, #2
    2c48:	47c0      	blx	r8
    2c4a:	19bb      	adds	r3, r7, r6
    2c4c:	7618      	strb	r0, [r3, #24]
    2c4e:	3403      	adds	r4, #3
    2c50:	3602      	adds	r6, #2
			for(j=0;j<3;j++)
    2c52:	2e07      	cmp	r6, #7
    2c54:	d1d9      	bne.n	2c0a <convertMatrix2Shift+0x96>
    2c56:	e79c      	b.n	2b92 <convertMatrix2Shift+0x1e>
    2c58:	9801      	ldr	r0, [sp, #4]
	switch(matrixColor)
    2c5a:	2103      	movs	r1, #3
					GMatrix[1][2+i+(2*j)]       =		(uint8_t)(((temp &  (mask6Bits>>6*2*i)) >> (26-6*2*i))) ;
    2c5c:	4e52      	ldr	r6, [pc, #328]	; (2da8 <convertMatrix2Shift+0x234>)
					GMatrix[2][2+i+(2*j)]       =		(uint8_t)(((temp  &  (mask6Bits>>6+6*2*i)) >> (20-6*2*i))<<2);
    2c5e:	253f      	movs	r5, #63	; 0x3f
					temp_1     =  matrixData[j*3+k] ;
    2c60:	7883      	ldrb	r3, [r0, #2]
					temp    |=  (temp_1 << (24 - 8*k));
    2c62:	021b      	lsls	r3, r3, #8
					temp_1     =  matrixData[j*3+k] ;
    2c64:	7842      	ldrb	r2, [r0, #1]
					temp    |=  (temp_1 << (24 - 8*k));
    2c66:	0412      	lsls	r2, r2, #16
    2c68:	4313      	orrs	r3, r2
					temp_1     =  matrixData[j*3+k] ;
    2c6a:	7802      	ldrb	r2, [r0, #0]
					temp    |=  (temp_1 << (24 - 8*k));
    2c6c:	0612      	lsls	r2, r2, #24
    2c6e:	4313      	orrs	r3, r2
    2c70:	1e4f      	subs	r7, r1, #1
					GMatrix[1][2+i+(2*j)]       =		(uint8_t)(((temp &  (mask6Bits>>6*2*i)) >> (26-6*2*i))) ;
    2c72:	0e9a      	lsrs	r2, r3, #26
    2c74:	19f7      	adds	r7, r6, r7
    2c76:	723a      	strb	r2, [r7, #8]
					GMatrix[2][2+i+(2*j)]       =		(uint8_t)(((temp  &  (mask6Bits>>6+6*2*i)) >> (20-6*2*i))<<2);
    2c78:	0d1a      	lsrs	r2, r3, #20
    2c7a:	402a      	ands	r2, r5
    2c7c:	0092      	lsls	r2, r2, #2
    2c7e:	743a      	strb	r2, [r7, #16]
					GMatrix[1][2+i+(2*j)]       =		(uint8_t)(((temp &  (mask6Bits>>6*2*i)) >> (26-6*2*i))) ;
    2c80:	0b9a      	lsrs	r2, r3, #14
    2c82:	402a      	ands	r2, r5
    2c84:	1877      	adds	r7, r6, r1
    2c86:	723a      	strb	r2, [r7, #8]
					GMatrix[2][2+i+(2*j)]       =		(uint8_t)(((temp  &  (mask6Bits>>6+6*2*i)) >> (20-6*2*i))<<2);
    2c88:	0a1b      	lsrs	r3, r3, #8
    2c8a:	402b      	ands	r3, r5
    2c8c:	009b      	lsls	r3, r3, #2
    2c8e:	743b      	strb	r3, [r7, #16]
    2c90:	3003      	adds	r0, #3
    2c92:	3102      	adds	r1, #2
			for(j=0;j<3;j++)
    2c94:	2909      	cmp	r1, #9
    2c96:	d1e3      	bne.n	2c60 <convertMatrix2Shift+0xec>
    2c98:	9c01      	ldr	r4, [sp, #4]
    2c9a:	3409      	adds	r4, #9
    2c9c:	2201      	movs	r2, #1
					GMatrix[0][0+i+ (2*j)]       =		(uint8_t)(((temp & (mask6Bits>>6*2*i)) >> (26-6*2*i)));
    2c9e:	4842      	ldr	r0, [pc, #264]	; (2da8 <convertMatrix2Shift+0x234>)
					GMatrix[3][0+i+ (2*j)]       =		(uint8_t)(((temp & (mask6Bits>>6+6*2*i)) >> (20-6*2*i))<<2);
    2ca0:	253f      	movs	r5, #63	; 0x3f
					temp_1    =  matrixData[(3+j)*3+k] ;
    2ca2:	78a3      	ldrb	r3, [r4, #2]
					temp      |=  temp_1 << 24 - 8*k;
    2ca4:	021b      	lsls	r3, r3, #8
					temp_1    =  matrixData[(3+j)*3+k] ;
    2ca6:	7861      	ldrb	r1, [r4, #1]
					temp      |=  temp_1 << 24 - 8*k;
    2ca8:	0409      	lsls	r1, r1, #16
    2caa:	430b      	orrs	r3, r1
					temp_1    =  matrixData[(3+j)*3+k] ;
    2cac:	7821      	ldrb	r1, [r4, #0]
					temp      |=  temp_1 << 24 - 8*k;
    2cae:	0609      	lsls	r1, r1, #24
    2cb0:	430b      	orrs	r3, r1
    2cb2:	1e56      	subs	r6, r2, #1
					GMatrix[0][0+i+ (2*j)]       =		(uint8_t)(((temp & (mask6Bits>>6*2*i)) >> (26-6*2*i)));
    2cb4:	0e99      	lsrs	r1, r3, #26
    2cb6:	5581      	strb	r1, [r0, r6]
					GMatrix[3][0+i+ (2*j)]       =		(uint8_t)(((temp & (mask6Bits>>6+6*2*i)) >> (20-6*2*i))<<2);
    2cb8:	0d19      	lsrs	r1, r3, #20
    2cba:	4029      	ands	r1, r5
    2cbc:	0089      	lsls	r1, r1, #2
    2cbe:	1986      	adds	r6, r0, r6
    2cc0:	7631      	strb	r1, [r6, #24]
					GMatrix[0][0+i+ (2*j)]       =		(uint8_t)(((temp & (mask6Bits>>6*2*i)) >> (26-6*2*i)));
    2cc2:	0b99      	lsrs	r1, r3, #14
    2cc4:	4029      	ands	r1, r5
    2cc6:	5481      	strb	r1, [r0, r2]
					GMatrix[3][0+i+ (2*j)]       =		(uint8_t)(((temp & (mask6Bits>>6+6*2*i)) >> (20-6*2*i))<<2);
    2cc8:	0a1b      	lsrs	r3, r3, #8
    2cca:	402b      	ands	r3, r5
    2ccc:	009b      	lsls	r3, r3, #2
    2cce:	1881      	adds	r1, r0, r2
    2cd0:	760b      	strb	r3, [r1, #24]
    2cd2:	3403      	adds	r4, #3
    2cd4:	3202      	adds	r2, #2
			for(j=0;j<3;j++)
    2cd6:	2a07      	cmp	r2, #7
    2cd8:	d1e3      	bne.n	2ca2 <convertMatrix2Shift+0x12e>
    2cda:	e75a      	b.n	2b92 <convertMatrix2Shift+0x1e>
    2cdc:	9e01      	ldr	r6, [sp, #4]
	switch(matrixColor)
    2cde:	2503      	movs	r5, #3
					RMatrix[1][2+i+(2*j)]       =		reverseByte((uint8_t)((temp &  (mask6Bits>>6*2*i)) >> (26-6*2*i))) ;
    2ce0:	4f2f      	ldr	r7, [pc, #188]	; (2da0 <convertMatrix2Shift+0x22c>)
    2ce2:	4b32      	ldr	r3, [pc, #200]	; (2dac <convertMatrix2Shift+0x238>)
    2ce4:	469a      	mov	sl, r3
					RMatrix[2][2+i+(2*j)]       =		reverseByte(((uint8_t)((temp &  (mask6Bits>>6+6*2*i))	>> (20-6*2*i)<<2))) ;
    2ce6:	243f      	movs	r4, #63	; 0x3f
					temp_1     =  matrixData[j*3+k]  ;
    2ce8:	78b0      	ldrb	r0, [r6, #2]
					temp      |=  (temp_1 << (24 - 8*k));
    2cea:	0200      	lsls	r0, r0, #8
					temp_1     =  matrixData[j*3+k]  ;
    2cec:	7873      	ldrb	r3, [r6, #1]
					temp      |=  (temp_1 << (24 - 8*k));
    2cee:	041b      	lsls	r3, r3, #16
    2cf0:	4318      	orrs	r0, r3
					temp_1     =  matrixData[j*3+k]  ;
    2cf2:	7833      	ldrb	r3, [r6, #0]
					temp      |=  (temp_1 << (24 - 8*k));
    2cf4:	061b      	lsls	r3, r3, #24
    2cf6:	4318      	orrs	r0, r3
    2cf8:	4683      	mov	fp, r0
    2cfa:	1e6b      	subs	r3, r5, #1
    2cfc:	4699      	mov	r9, r3
					RMatrix[1][2+i+(2*j)]       =		reverseByte((uint8_t)((temp &  (mask6Bits>>6*2*i)) >> (26-6*2*i))) ;
    2cfe:	0e80      	lsrs	r0, r0, #26
    2d00:	47b8      	blx	r7
    2d02:	44d1      	add	r9, sl
    2d04:	464b      	mov	r3, r9
    2d06:	7218      	strb	r0, [r3, #8]
					RMatrix[2][2+i+(2*j)]       =		reverseByte(((uint8_t)((temp &  (mask6Bits>>6+6*2*i))	>> (20-6*2*i)<<2))) ;
    2d08:	465b      	mov	r3, fp
    2d0a:	0d18      	lsrs	r0, r3, #20
    2d0c:	4020      	ands	r0, r4
    2d0e:	0080      	lsls	r0, r0, #2
    2d10:	47b8      	blx	r7
    2d12:	464b      	mov	r3, r9
    2d14:	7418      	strb	r0, [r3, #16]
					RMatrix[1][2+i+(2*j)]       =		reverseByte((uint8_t)((temp &  (mask6Bits>>6*2*i)) >> (26-6*2*i))) ;
    2d16:	465b      	mov	r3, fp
    2d18:	0b98      	lsrs	r0, r3, #14
    2d1a:	4020      	ands	r0, r4
    2d1c:	47b8      	blx	r7
    2d1e:	46a9      	mov	r9, r5
    2d20:	44d1      	add	r9, sl
    2d22:	464b      	mov	r3, r9
    2d24:	7218      	strb	r0, [r3, #8]
					RMatrix[2][2+i+(2*j)]       =		reverseByte(((uint8_t)((temp &  (mask6Bits>>6+6*2*i))	>> (20-6*2*i)<<2))) ;
    2d26:	465b      	mov	r3, fp
    2d28:	0a18      	lsrs	r0, r3, #8
    2d2a:	4020      	ands	r0, r4
    2d2c:	0080      	lsls	r0, r0, #2
    2d2e:	47b8      	blx	r7
    2d30:	464b      	mov	r3, r9
    2d32:	7418      	strb	r0, [r3, #16]
    2d34:	3603      	adds	r6, #3
    2d36:	3502      	adds	r5, #2
			for(j=0;j<3;j++)
    2d38:	2d09      	cmp	r5, #9
    2d3a:	d1d5      	bne.n	2ce8 <convertMatrix2Shift+0x174>
    2d3c:	9c01      	ldr	r4, [sp, #4]
    2d3e:	3409      	adds	r4, #9
    2d40:	2501      	movs	r5, #1
					RMatrix[0][0+i+ (2*j)]       =		reverseByte((uint8_t)((temp & (mask6Bits>>6*2*i)) >> (26-6*2*i)));
    2d42:	4f17      	ldr	r7, [pc, #92]	; (2da0 <convertMatrix2Shift+0x22c>)
    2d44:	4e19      	ldr	r6, [pc, #100]	; (2dac <convertMatrix2Shift+0x238>)
					RMatrix[3][0+i+ (2*j)]       =		reverseByte((uint8_t)((temp & (mask6Bits>>6+6*2*i)) >> (20-6*2*i) <<2));
    2d46:	233f      	movs	r3, #63	; 0x3f
    2d48:	4698      	mov	r8, r3
					temp_1    =  matrixData[(3+j)*3+k] ;
    2d4a:	78a0      	ldrb	r0, [r4, #2]
					temp      |=  temp_1 << 24 - 8*k;
    2d4c:	0200      	lsls	r0, r0, #8
					temp_1    =  matrixData[(3+j)*3+k] ;
    2d4e:	7863      	ldrb	r3, [r4, #1]
					temp      |=  temp_1 << 24 - 8*k;
    2d50:	041b      	lsls	r3, r3, #16
    2d52:	4318      	orrs	r0, r3
					temp_1    =  matrixData[(3+j)*3+k] ;
    2d54:	7823      	ldrb	r3, [r4, #0]
					temp      |=  temp_1 << 24 - 8*k;
    2d56:	061b      	lsls	r3, r3, #24
    2d58:	4318      	orrs	r0, r3
    2d5a:	4681      	mov	r9, r0
    2d5c:	1e6b      	subs	r3, r5, #1
    2d5e:	469a      	mov	sl, r3
					RMatrix[0][0+i+ (2*j)]       =		reverseByte((uint8_t)((temp & (mask6Bits>>6*2*i)) >> (26-6*2*i)));
    2d60:	0e80      	lsrs	r0, r0, #26
    2d62:	47b8      	blx	r7
    2d64:	4653      	mov	r3, sl
    2d66:	54f0      	strb	r0, [r6, r3]
					RMatrix[3][0+i+ (2*j)]       =		reverseByte((uint8_t)((temp & (mask6Bits>>6+6*2*i)) >> (20-6*2*i) <<2));
    2d68:	464b      	mov	r3, r9
    2d6a:	0d18      	lsrs	r0, r3, #20
    2d6c:	4643      	mov	r3, r8
    2d6e:	4018      	ands	r0, r3
    2d70:	0080      	lsls	r0, r0, #2
    2d72:	47b8      	blx	r7
    2d74:	4653      	mov	r3, sl
    2d76:	18f3      	adds	r3, r6, r3
    2d78:	7618      	strb	r0, [r3, #24]
					RMatrix[0][0+i+ (2*j)]       =		reverseByte((uint8_t)((temp & (mask6Bits>>6*2*i)) >> (26-6*2*i)));
    2d7a:	464b      	mov	r3, r9
    2d7c:	0b98      	lsrs	r0, r3, #14
    2d7e:	4643      	mov	r3, r8
    2d80:	4018      	ands	r0, r3
    2d82:	47b8      	blx	r7
    2d84:	5570      	strb	r0, [r6, r5]
					RMatrix[3][0+i+ (2*j)]       =		reverseByte((uint8_t)((temp & (mask6Bits>>6+6*2*i)) >> (20-6*2*i) <<2));
    2d86:	464b      	mov	r3, r9
    2d88:	0a18      	lsrs	r0, r3, #8
    2d8a:	4643      	mov	r3, r8
    2d8c:	4018      	ands	r0, r3
    2d8e:	0080      	lsls	r0, r0, #2
    2d90:	47b8      	blx	r7
    2d92:	1973      	adds	r3, r6, r5
    2d94:	7618      	strb	r0, [r3, #24]
    2d96:	3403      	adds	r4, #3
    2d98:	3502      	adds	r5, #2
			for(j=0;j<3;j++)
    2d9a:	2d07      	cmp	r5, #7
    2d9c:	d1d5      	bne.n	2d4a <convertMatrix2Shift+0x1d6>
    2d9e:	e6f8      	b.n	2b92 <convertMatrix2Shift+0x1e>
    2da0:	00002b2d 	.word	0x00002b2d
    2da4:	20000488 	.word	0x20000488
    2da8:	200004e0 	.word	0x200004e0
    2dac:	20000468 	.word	0x20000468

00002db0 <testFunction>:

void testFunction()
{
    2db0:	b570      	push	{r4, r5, r6, lr}
	static uint8_t matrixData[18]	= {0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66};
	uint8_t matrixColor		= 0;
	
	matrixColor = RED;
	convertMatrix2Shift(matrixData ,matrixColor);
    2db2:	4d06      	ldr	r5, [pc, #24]	; (2dcc <testFunction+0x1c>)
    2db4:	2101      	movs	r1, #1
    2db6:	0028      	movs	r0, r5
    2db8:	4c05      	ldr	r4, [pc, #20]	; (2dd0 <testFunction+0x20>)
    2dba:	47a0      	blx	r4
	
	matrixColor = BLUE;
	convertMatrix2Shift(matrixData ,matrixColor);
    2dbc:	2103      	movs	r1, #3
    2dbe:	0028      	movs	r0, r5
    2dc0:	47a0      	blx	r4
	
	matrixColor = GREEN;
	convertMatrix2Shift(matrixData ,matrixColor);
    2dc2:	2102      	movs	r1, #2
    2dc4:	0028      	movs	r0, r5
    2dc6:	47a0      	blx	r4
}
    2dc8:	bd70      	pop	{r4, r5, r6, pc}
    2dca:	46c0      	nop			; (mov r8, r8)
    2dcc:	20000018 	.word	0x20000018
    2dd0:	00002b75 	.word	0x00002b75

00002dd4 <BBTLogo>:

void BBTLogo(uint8_t frame)
{
    2dd4:	b510      	push	{r4, lr}
	static uint8_t  matrixDataRFrame4[18]			= {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
	static uint8_t  matrixDataGFrame4[18]			= {0x80,0x74,0x0F,0x39,0xF3,0x7E,0x23,0xC1,0x98,0x09,0x00,0x88,0x04,0x80,0x38,0x00,0x40,0x02};
	static uint8_t  matrixDataBFrame4[18]			= {0x80,0x74,0x0F,0x39,0xF3,0x7E,0x23,0xC1,0x98,0x09,0x00,0x88,0x04,0x80,0x38,0x00,0x40,0x02};
	
	uint8_t			matrixColor				= 0;
	switch(frame)
    2dd6:	2802      	cmp	r0, #2
    2dd8:	d01c      	beq.n	2e14 <BBTLogo+0x40>
    2dda:	d90e      	bls.n	2dfa <BBTLogo+0x26>
    2ddc:	2803      	cmp	r0, #3
    2dde:	d024      	beq.n	2e2a <BBTLogo+0x56>
    2de0:	2804      	cmp	r0, #4
    2de2:	d116      	bne.n	2e12 <BBTLogo+0x3e>
			convertMatrix2Shift(matrixDataBFrame3 ,matrixColor);
			break;
		
		case	4:
			matrixColor = RED;
			convertMatrix2Shift(matrixDataRFrame4 ,matrixColor);
    2de4:	2101      	movs	r1, #1
    2de6:	4816      	ldr	r0, [pc, #88]	; (2e40 <BBTLogo+0x6c>)
    2de8:	4c16      	ldr	r4, [pc, #88]	; (2e44 <BBTLogo+0x70>)
    2dea:	47a0      	blx	r4
		
			matrixColor = BLUE;
			convertMatrix2Shift(matrixDataGFrame4 ,matrixColor);
    2dec:	2103      	movs	r1, #3
    2dee:	4816      	ldr	r0, [pc, #88]	; (2e48 <BBTLogo+0x74>)
    2df0:	47a0      	blx	r4
		
			matrixColor = GREEN;
			convertMatrix2Shift(matrixDataBFrame4 ,matrixColor);
    2df2:	2102      	movs	r1, #2
    2df4:	4815      	ldr	r0, [pc, #84]	; (2e4c <BBTLogo+0x78>)
    2df6:	47a0      	blx	r4
		default:
			break;
			
	}
	
    2df8:	e00b      	b.n	2e12 <BBTLogo+0x3e>
	switch(frame)
    2dfa:	2801      	cmp	r0, #1
    2dfc:	d109      	bne.n	2e12 <BBTLogo+0x3e>
			convertMatrix2Shift(matrixDataRFrame1 ,matrixColor);
    2dfe:	2101      	movs	r1, #1
    2e00:	4813      	ldr	r0, [pc, #76]	; (2e50 <BBTLogo+0x7c>)
    2e02:	4c10      	ldr	r4, [pc, #64]	; (2e44 <BBTLogo+0x70>)
    2e04:	47a0      	blx	r4
			convertMatrix2Shift(matrixDataGFrame1 ,matrixColor);
    2e06:	2103      	movs	r1, #3
    2e08:	4812      	ldr	r0, [pc, #72]	; (2e54 <BBTLogo+0x80>)
    2e0a:	47a0      	blx	r4
			convertMatrix2Shift(matrixDataBFrame1 ,matrixColor);
    2e0c:	2102      	movs	r1, #2
    2e0e:	4812      	ldr	r0, [pc, #72]	; (2e58 <BBTLogo+0x84>)
    2e10:	47a0      	blx	r4
    2e12:	bd10      	pop	{r4, pc}
			convertMatrix2Shift(matrixDataRFrame2 ,matrixColor);
    2e14:	2101      	movs	r1, #1
    2e16:	4811      	ldr	r0, [pc, #68]	; (2e5c <BBTLogo+0x88>)
    2e18:	4c0a      	ldr	r4, [pc, #40]	; (2e44 <BBTLogo+0x70>)
    2e1a:	47a0      	blx	r4
			convertMatrix2Shift(matrixDataGFrame2 ,matrixColor);
    2e1c:	2103      	movs	r1, #3
    2e1e:	4810      	ldr	r0, [pc, #64]	; (2e60 <BBTLogo+0x8c>)
    2e20:	47a0      	blx	r4
			convertMatrix2Shift(matrixDataBFrame2 ,matrixColor);
    2e22:	2102      	movs	r1, #2
    2e24:	480f      	ldr	r0, [pc, #60]	; (2e64 <BBTLogo+0x90>)
    2e26:	47a0      	blx	r4
			break;
    2e28:	e7f3      	b.n	2e12 <BBTLogo+0x3e>
			convertMatrix2Shift(matrixDataRFrame3 ,matrixColor);
    2e2a:	2101      	movs	r1, #1
    2e2c:	480e      	ldr	r0, [pc, #56]	; (2e68 <BBTLogo+0x94>)
    2e2e:	4c05      	ldr	r4, [pc, #20]	; (2e44 <BBTLogo+0x70>)
    2e30:	47a0      	blx	r4
			convertMatrix2Shift(matrixDataGFrame3 ,matrixColor);
    2e32:	2103      	movs	r1, #3
    2e34:	480d      	ldr	r0, [pc, #52]	; (2e6c <BBTLogo+0x98>)
    2e36:	47a0      	blx	r4
			convertMatrix2Shift(matrixDataBFrame3 ,matrixColor);
    2e38:	2102      	movs	r1, #2
    2e3a:	480d      	ldr	r0, [pc, #52]	; (2e70 <BBTLogo+0x9c>)
    2e3c:	47a0      	blx	r4
			break;
    2e3e:	e7e8      	b.n	2e12 <BBTLogo+0x3e>
    2e40:	20000298 	.word	0x20000298
    2e44:	00002b75 	.word	0x00002b75
    2e48:	200000b8 	.word	0x200000b8
    2e4c:	20000068 	.word	0x20000068
    2e50:	200000cc 	.word	0x200000cc
    2e54:	2000007c 	.word	0x2000007c
    2e58:	2000002c 	.word	0x2000002c
    2e5c:	20000270 	.word	0x20000270
    2e60:	20000090 	.word	0x20000090
    2e64:	20000040 	.word	0x20000040
    2e68:	20000284 	.word	0x20000284
    2e6c:	200000a4 	.word	0x200000a4
    2e70:	20000054 	.word	0x20000054

00002e74 <main>:
	}

}

int main (void)
{	
    2e74:	b570      	push	{r4, r5, r6, lr}
	uint8_t i,j =0;

	system_init();
    2e76:	4b0e      	ldr	r3, [pc, #56]	; (2eb0 <main+0x3c>)
    2e78:	4798      	blx	r3
	delay_init();
    2e7a:	4b0e      	ldr	r3, [pc, #56]	; (2eb4 <main+0x40>)
    2e7c:	4798      	blx	r3
	configDials();
    2e7e:	4b0e      	ldr	r3, [pc, #56]	; (2eb8 <main+0x44>)
    2e80:	4798      	blx	r3
	
	configure_i2c_slave();
    2e82:	4b0e      	ldr	r3, [pc, #56]	; (2ebc <main+0x48>)
    2e84:	4798      	blx	r3
	configure_i2c_slave_callbacks();
    2e86:	4b0e      	ldr	r3, [pc, #56]	; (2ec0 <main+0x4c>)
    2e88:	4798      	blx	r3
	testFunction();
    2e8a:	4b0e      	ldr	r3, [pc, #56]	; (2ec4 <main+0x50>)
    2e8c:	4798      	blx	r3
	
	LEDMatrixTimerInit();
    2e8e:	4b0e      	ldr	r3, [pc, #56]	; (2ec8 <main+0x54>)
    2e90:	4798      	blx	r3
	testPinsInit();
    2e92:	4b0e      	ldr	r3, [pc, #56]	; (2ecc <main+0x58>)
    2e94:	4798      	blx	r3
	LEDMatrixInit();
    2e96:	4b0e      	ldr	r3, [pc, #56]	; (2ed0 <main+0x5c>)
    2e98:	4798      	blx	r3
	SPIMasterInit();
    2e9a:	4b0e      	ldr	r3, [pc, #56]	; (2ed4 <main+0x60>)
    2e9c:	4798      	blx	r3
	
	
	LEDMatrixMode = 1;
    2e9e:	2201      	movs	r2, #1
    2ea0:	4b0d      	ldr	r3, [pc, #52]	; (2ed8 <main+0x64>)
    2ea2:	701a      	strb	r2, [r3, #0]
	while(1)
	{
		readDials();
    2ea4:	4d0d      	ldr	r5, [pc, #52]	; (2edc <main+0x68>)
		LEDMatrixControl();
    2ea6:	4c0e      	ldr	r4, [pc, #56]	; (2ee0 <main+0x6c>)
		readDials();
    2ea8:	47a8      	blx	r5
		LEDMatrixControl();
    2eaa:	47a0      	blx	r4
    2eac:	e7fc      	b.n	2ea8 <main+0x34>
    2eae:	46c0      	nop			; (mov r8, r8)
    2eb0:	00001f95 	.word	0x00001f95
    2eb4:	000000ed 	.word	0x000000ed
    2eb8:	00002681 	.word	0x00002681
    2ebc:	00002399 	.word	0x00002399
    2ec0:	00002439 	.word	0x00002439
    2ec4:	00002db1 	.word	0x00002db1
    2ec8:	000022f5 	.word	0x000022f5
    2ecc:	000020fd 	.word	0x000020fd
    2ed0:	00002979 	.word	0x00002979
    2ed4:	00002b19 	.word	0x00002b19
    2ed8:	200002ab 	.word	0x200002ab
    2edc:	00002841 	.word	0x00002841
    2ee0:	00002285 	.word	0x00002285

00002ee4 <__udivsi3>:
    2ee4:	2200      	movs	r2, #0
    2ee6:	0843      	lsrs	r3, r0, #1
    2ee8:	428b      	cmp	r3, r1
    2eea:	d374      	bcc.n	2fd6 <__udivsi3+0xf2>
    2eec:	0903      	lsrs	r3, r0, #4
    2eee:	428b      	cmp	r3, r1
    2ef0:	d35f      	bcc.n	2fb2 <__udivsi3+0xce>
    2ef2:	0a03      	lsrs	r3, r0, #8
    2ef4:	428b      	cmp	r3, r1
    2ef6:	d344      	bcc.n	2f82 <__udivsi3+0x9e>
    2ef8:	0b03      	lsrs	r3, r0, #12
    2efa:	428b      	cmp	r3, r1
    2efc:	d328      	bcc.n	2f50 <__udivsi3+0x6c>
    2efe:	0c03      	lsrs	r3, r0, #16
    2f00:	428b      	cmp	r3, r1
    2f02:	d30d      	bcc.n	2f20 <__udivsi3+0x3c>
    2f04:	22ff      	movs	r2, #255	; 0xff
    2f06:	0209      	lsls	r1, r1, #8
    2f08:	ba12      	rev	r2, r2
    2f0a:	0c03      	lsrs	r3, r0, #16
    2f0c:	428b      	cmp	r3, r1
    2f0e:	d302      	bcc.n	2f16 <__udivsi3+0x32>
    2f10:	1212      	asrs	r2, r2, #8
    2f12:	0209      	lsls	r1, r1, #8
    2f14:	d065      	beq.n	2fe2 <__udivsi3+0xfe>
    2f16:	0b03      	lsrs	r3, r0, #12
    2f18:	428b      	cmp	r3, r1
    2f1a:	d319      	bcc.n	2f50 <__udivsi3+0x6c>
    2f1c:	e000      	b.n	2f20 <__udivsi3+0x3c>
    2f1e:	0a09      	lsrs	r1, r1, #8
    2f20:	0bc3      	lsrs	r3, r0, #15
    2f22:	428b      	cmp	r3, r1
    2f24:	d301      	bcc.n	2f2a <__udivsi3+0x46>
    2f26:	03cb      	lsls	r3, r1, #15
    2f28:	1ac0      	subs	r0, r0, r3
    2f2a:	4152      	adcs	r2, r2
    2f2c:	0b83      	lsrs	r3, r0, #14
    2f2e:	428b      	cmp	r3, r1
    2f30:	d301      	bcc.n	2f36 <__udivsi3+0x52>
    2f32:	038b      	lsls	r3, r1, #14
    2f34:	1ac0      	subs	r0, r0, r3
    2f36:	4152      	adcs	r2, r2
    2f38:	0b43      	lsrs	r3, r0, #13
    2f3a:	428b      	cmp	r3, r1
    2f3c:	d301      	bcc.n	2f42 <__udivsi3+0x5e>
    2f3e:	034b      	lsls	r3, r1, #13
    2f40:	1ac0      	subs	r0, r0, r3
    2f42:	4152      	adcs	r2, r2
    2f44:	0b03      	lsrs	r3, r0, #12
    2f46:	428b      	cmp	r3, r1
    2f48:	d301      	bcc.n	2f4e <__udivsi3+0x6a>
    2f4a:	030b      	lsls	r3, r1, #12
    2f4c:	1ac0      	subs	r0, r0, r3
    2f4e:	4152      	adcs	r2, r2
    2f50:	0ac3      	lsrs	r3, r0, #11
    2f52:	428b      	cmp	r3, r1
    2f54:	d301      	bcc.n	2f5a <__udivsi3+0x76>
    2f56:	02cb      	lsls	r3, r1, #11
    2f58:	1ac0      	subs	r0, r0, r3
    2f5a:	4152      	adcs	r2, r2
    2f5c:	0a83      	lsrs	r3, r0, #10
    2f5e:	428b      	cmp	r3, r1
    2f60:	d301      	bcc.n	2f66 <__udivsi3+0x82>
    2f62:	028b      	lsls	r3, r1, #10
    2f64:	1ac0      	subs	r0, r0, r3
    2f66:	4152      	adcs	r2, r2
    2f68:	0a43      	lsrs	r3, r0, #9
    2f6a:	428b      	cmp	r3, r1
    2f6c:	d301      	bcc.n	2f72 <__udivsi3+0x8e>
    2f6e:	024b      	lsls	r3, r1, #9
    2f70:	1ac0      	subs	r0, r0, r3
    2f72:	4152      	adcs	r2, r2
    2f74:	0a03      	lsrs	r3, r0, #8
    2f76:	428b      	cmp	r3, r1
    2f78:	d301      	bcc.n	2f7e <__udivsi3+0x9a>
    2f7a:	020b      	lsls	r3, r1, #8
    2f7c:	1ac0      	subs	r0, r0, r3
    2f7e:	4152      	adcs	r2, r2
    2f80:	d2cd      	bcs.n	2f1e <__udivsi3+0x3a>
    2f82:	09c3      	lsrs	r3, r0, #7
    2f84:	428b      	cmp	r3, r1
    2f86:	d301      	bcc.n	2f8c <__udivsi3+0xa8>
    2f88:	01cb      	lsls	r3, r1, #7
    2f8a:	1ac0      	subs	r0, r0, r3
    2f8c:	4152      	adcs	r2, r2
    2f8e:	0983      	lsrs	r3, r0, #6
    2f90:	428b      	cmp	r3, r1
    2f92:	d301      	bcc.n	2f98 <__udivsi3+0xb4>
    2f94:	018b      	lsls	r3, r1, #6
    2f96:	1ac0      	subs	r0, r0, r3
    2f98:	4152      	adcs	r2, r2
    2f9a:	0943      	lsrs	r3, r0, #5
    2f9c:	428b      	cmp	r3, r1
    2f9e:	d301      	bcc.n	2fa4 <__udivsi3+0xc0>
    2fa0:	014b      	lsls	r3, r1, #5
    2fa2:	1ac0      	subs	r0, r0, r3
    2fa4:	4152      	adcs	r2, r2
    2fa6:	0903      	lsrs	r3, r0, #4
    2fa8:	428b      	cmp	r3, r1
    2faa:	d301      	bcc.n	2fb0 <__udivsi3+0xcc>
    2fac:	010b      	lsls	r3, r1, #4
    2fae:	1ac0      	subs	r0, r0, r3
    2fb0:	4152      	adcs	r2, r2
    2fb2:	08c3      	lsrs	r3, r0, #3
    2fb4:	428b      	cmp	r3, r1
    2fb6:	d301      	bcc.n	2fbc <__udivsi3+0xd8>
    2fb8:	00cb      	lsls	r3, r1, #3
    2fba:	1ac0      	subs	r0, r0, r3
    2fbc:	4152      	adcs	r2, r2
    2fbe:	0883      	lsrs	r3, r0, #2
    2fc0:	428b      	cmp	r3, r1
    2fc2:	d301      	bcc.n	2fc8 <__udivsi3+0xe4>
    2fc4:	008b      	lsls	r3, r1, #2
    2fc6:	1ac0      	subs	r0, r0, r3
    2fc8:	4152      	adcs	r2, r2
    2fca:	0843      	lsrs	r3, r0, #1
    2fcc:	428b      	cmp	r3, r1
    2fce:	d301      	bcc.n	2fd4 <__udivsi3+0xf0>
    2fd0:	004b      	lsls	r3, r1, #1
    2fd2:	1ac0      	subs	r0, r0, r3
    2fd4:	4152      	adcs	r2, r2
    2fd6:	1a41      	subs	r1, r0, r1
    2fd8:	d200      	bcs.n	2fdc <__udivsi3+0xf8>
    2fda:	4601      	mov	r1, r0
    2fdc:	4152      	adcs	r2, r2
    2fde:	4610      	mov	r0, r2
    2fe0:	4770      	bx	lr
    2fe2:	e7ff      	b.n	2fe4 <__udivsi3+0x100>
    2fe4:	b501      	push	{r0, lr}
    2fe6:	2000      	movs	r0, #0
    2fe8:	f000 f8f0 	bl	31cc <__aeabi_idiv0>
    2fec:	bd02      	pop	{r1, pc}
    2fee:	46c0      	nop			; (mov r8, r8)

00002ff0 <__aeabi_uidivmod>:
    2ff0:	2900      	cmp	r1, #0
    2ff2:	d0f7      	beq.n	2fe4 <__udivsi3+0x100>
    2ff4:	e776      	b.n	2ee4 <__udivsi3>
    2ff6:	4770      	bx	lr

00002ff8 <__divsi3>:
    2ff8:	4603      	mov	r3, r0
    2ffa:	430b      	orrs	r3, r1
    2ffc:	d47f      	bmi.n	30fe <__divsi3+0x106>
    2ffe:	2200      	movs	r2, #0
    3000:	0843      	lsrs	r3, r0, #1
    3002:	428b      	cmp	r3, r1
    3004:	d374      	bcc.n	30f0 <__divsi3+0xf8>
    3006:	0903      	lsrs	r3, r0, #4
    3008:	428b      	cmp	r3, r1
    300a:	d35f      	bcc.n	30cc <__divsi3+0xd4>
    300c:	0a03      	lsrs	r3, r0, #8
    300e:	428b      	cmp	r3, r1
    3010:	d344      	bcc.n	309c <__divsi3+0xa4>
    3012:	0b03      	lsrs	r3, r0, #12
    3014:	428b      	cmp	r3, r1
    3016:	d328      	bcc.n	306a <__divsi3+0x72>
    3018:	0c03      	lsrs	r3, r0, #16
    301a:	428b      	cmp	r3, r1
    301c:	d30d      	bcc.n	303a <__divsi3+0x42>
    301e:	22ff      	movs	r2, #255	; 0xff
    3020:	0209      	lsls	r1, r1, #8
    3022:	ba12      	rev	r2, r2
    3024:	0c03      	lsrs	r3, r0, #16
    3026:	428b      	cmp	r3, r1
    3028:	d302      	bcc.n	3030 <__divsi3+0x38>
    302a:	1212      	asrs	r2, r2, #8
    302c:	0209      	lsls	r1, r1, #8
    302e:	d065      	beq.n	30fc <__divsi3+0x104>
    3030:	0b03      	lsrs	r3, r0, #12
    3032:	428b      	cmp	r3, r1
    3034:	d319      	bcc.n	306a <__divsi3+0x72>
    3036:	e000      	b.n	303a <__divsi3+0x42>
    3038:	0a09      	lsrs	r1, r1, #8
    303a:	0bc3      	lsrs	r3, r0, #15
    303c:	428b      	cmp	r3, r1
    303e:	d301      	bcc.n	3044 <__divsi3+0x4c>
    3040:	03cb      	lsls	r3, r1, #15
    3042:	1ac0      	subs	r0, r0, r3
    3044:	4152      	adcs	r2, r2
    3046:	0b83      	lsrs	r3, r0, #14
    3048:	428b      	cmp	r3, r1
    304a:	d301      	bcc.n	3050 <__divsi3+0x58>
    304c:	038b      	lsls	r3, r1, #14
    304e:	1ac0      	subs	r0, r0, r3
    3050:	4152      	adcs	r2, r2
    3052:	0b43      	lsrs	r3, r0, #13
    3054:	428b      	cmp	r3, r1
    3056:	d301      	bcc.n	305c <__divsi3+0x64>
    3058:	034b      	lsls	r3, r1, #13
    305a:	1ac0      	subs	r0, r0, r3
    305c:	4152      	adcs	r2, r2
    305e:	0b03      	lsrs	r3, r0, #12
    3060:	428b      	cmp	r3, r1
    3062:	d301      	bcc.n	3068 <__divsi3+0x70>
    3064:	030b      	lsls	r3, r1, #12
    3066:	1ac0      	subs	r0, r0, r3
    3068:	4152      	adcs	r2, r2
    306a:	0ac3      	lsrs	r3, r0, #11
    306c:	428b      	cmp	r3, r1
    306e:	d301      	bcc.n	3074 <__divsi3+0x7c>
    3070:	02cb      	lsls	r3, r1, #11
    3072:	1ac0      	subs	r0, r0, r3
    3074:	4152      	adcs	r2, r2
    3076:	0a83      	lsrs	r3, r0, #10
    3078:	428b      	cmp	r3, r1
    307a:	d301      	bcc.n	3080 <__divsi3+0x88>
    307c:	028b      	lsls	r3, r1, #10
    307e:	1ac0      	subs	r0, r0, r3
    3080:	4152      	adcs	r2, r2
    3082:	0a43      	lsrs	r3, r0, #9
    3084:	428b      	cmp	r3, r1
    3086:	d301      	bcc.n	308c <__divsi3+0x94>
    3088:	024b      	lsls	r3, r1, #9
    308a:	1ac0      	subs	r0, r0, r3
    308c:	4152      	adcs	r2, r2
    308e:	0a03      	lsrs	r3, r0, #8
    3090:	428b      	cmp	r3, r1
    3092:	d301      	bcc.n	3098 <__divsi3+0xa0>
    3094:	020b      	lsls	r3, r1, #8
    3096:	1ac0      	subs	r0, r0, r3
    3098:	4152      	adcs	r2, r2
    309a:	d2cd      	bcs.n	3038 <__divsi3+0x40>
    309c:	09c3      	lsrs	r3, r0, #7
    309e:	428b      	cmp	r3, r1
    30a0:	d301      	bcc.n	30a6 <__divsi3+0xae>
    30a2:	01cb      	lsls	r3, r1, #7
    30a4:	1ac0      	subs	r0, r0, r3
    30a6:	4152      	adcs	r2, r2
    30a8:	0983      	lsrs	r3, r0, #6
    30aa:	428b      	cmp	r3, r1
    30ac:	d301      	bcc.n	30b2 <__divsi3+0xba>
    30ae:	018b      	lsls	r3, r1, #6
    30b0:	1ac0      	subs	r0, r0, r3
    30b2:	4152      	adcs	r2, r2
    30b4:	0943      	lsrs	r3, r0, #5
    30b6:	428b      	cmp	r3, r1
    30b8:	d301      	bcc.n	30be <__divsi3+0xc6>
    30ba:	014b      	lsls	r3, r1, #5
    30bc:	1ac0      	subs	r0, r0, r3
    30be:	4152      	adcs	r2, r2
    30c0:	0903      	lsrs	r3, r0, #4
    30c2:	428b      	cmp	r3, r1
    30c4:	d301      	bcc.n	30ca <__divsi3+0xd2>
    30c6:	010b      	lsls	r3, r1, #4
    30c8:	1ac0      	subs	r0, r0, r3
    30ca:	4152      	adcs	r2, r2
    30cc:	08c3      	lsrs	r3, r0, #3
    30ce:	428b      	cmp	r3, r1
    30d0:	d301      	bcc.n	30d6 <__divsi3+0xde>
    30d2:	00cb      	lsls	r3, r1, #3
    30d4:	1ac0      	subs	r0, r0, r3
    30d6:	4152      	adcs	r2, r2
    30d8:	0883      	lsrs	r3, r0, #2
    30da:	428b      	cmp	r3, r1
    30dc:	d301      	bcc.n	30e2 <__divsi3+0xea>
    30de:	008b      	lsls	r3, r1, #2
    30e0:	1ac0      	subs	r0, r0, r3
    30e2:	4152      	adcs	r2, r2
    30e4:	0843      	lsrs	r3, r0, #1
    30e6:	428b      	cmp	r3, r1
    30e8:	d301      	bcc.n	30ee <__divsi3+0xf6>
    30ea:	004b      	lsls	r3, r1, #1
    30ec:	1ac0      	subs	r0, r0, r3
    30ee:	4152      	adcs	r2, r2
    30f0:	1a41      	subs	r1, r0, r1
    30f2:	d200      	bcs.n	30f6 <__divsi3+0xfe>
    30f4:	4601      	mov	r1, r0
    30f6:	4152      	adcs	r2, r2
    30f8:	4610      	mov	r0, r2
    30fa:	4770      	bx	lr
    30fc:	e05d      	b.n	31ba <__divsi3+0x1c2>
    30fe:	0fca      	lsrs	r2, r1, #31
    3100:	d000      	beq.n	3104 <__divsi3+0x10c>
    3102:	4249      	negs	r1, r1
    3104:	1003      	asrs	r3, r0, #32
    3106:	d300      	bcc.n	310a <__divsi3+0x112>
    3108:	4240      	negs	r0, r0
    310a:	4053      	eors	r3, r2
    310c:	2200      	movs	r2, #0
    310e:	469c      	mov	ip, r3
    3110:	0903      	lsrs	r3, r0, #4
    3112:	428b      	cmp	r3, r1
    3114:	d32d      	bcc.n	3172 <__divsi3+0x17a>
    3116:	0a03      	lsrs	r3, r0, #8
    3118:	428b      	cmp	r3, r1
    311a:	d312      	bcc.n	3142 <__divsi3+0x14a>
    311c:	22fc      	movs	r2, #252	; 0xfc
    311e:	0189      	lsls	r1, r1, #6
    3120:	ba12      	rev	r2, r2
    3122:	0a03      	lsrs	r3, r0, #8
    3124:	428b      	cmp	r3, r1
    3126:	d30c      	bcc.n	3142 <__divsi3+0x14a>
    3128:	0189      	lsls	r1, r1, #6
    312a:	1192      	asrs	r2, r2, #6
    312c:	428b      	cmp	r3, r1
    312e:	d308      	bcc.n	3142 <__divsi3+0x14a>
    3130:	0189      	lsls	r1, r1, #6
    3132:	1192      	asrs	r2, r2, #6
    3134:	428b      	cmp	r3, r1
    3136:	d304      	bcc.n	3142 <__divsi3+0x14a>
    3138:	0189      	lsls	r1, r1, #6
    313a:	d03a      	beq.n	31b2 <__divsi3+0x1ba>
    313c:	1192      	asrs	r2, r2, #6
    313e:	e000      	b.n	3142 <__divsi3+0x14a>
    3140:	0989      	lsrs	r1, r1, #6
    3142:	09c3      	lsrs	r3, r0, #7
    3144:	428b      	cmp	r3, r1
    3146:	d301      	bcc.n	314c <__divsi3+0x154>
    3148:	01cb      	lsls	r3, r1, #7
    314a:	1ac0      	subs	r0, r0, r3
    314c:	4152      	adcs	r2, r2
    314e:	0983      	lsrs	r3, r0, #6
    3150:	428b      	cmp	r3, r1
    3152:	d301      	bcc.n	3158 <__divsi3+0x160>
    3154:	018b      	lsls	r3, r1, #6
    3156:	1ac0      	subs	r0, r0, r3
    3158:	4152      	adcs	r2, r2
    315a:	0943      	lsrs	r3, r0, #5
    315c:	428b      	cmp	r3, r1
    315e:	d301      	bcc.n	3164 <__divsi3+0x16c>
    3160:	014b      	lsls	r3, r1, #5
    3162:	1ac0      	subs	r0, r0, r3
    3164:	4152      	adcs	r2, r2
    3166:	0903      	lsrs	r3, r0, #4
    3168:	428b      	cmp	r3, r1
    316a:	d301      	bcc.n	3170 <__divsi3+0x178>
    316c:	010b      	lsls	r3, r1, #4
    316e:	1ac0      	subs	r0, r0, r3
    3170:	4152      	adcs	r2, r2
    3172:	08c3      	lsrs	r3, r0, #3
    3174:	428b      	cmp	r3, r1
    3176:	d301      	bcc.n	317c <__divsi3+0x184>
    3178:	00cb      	lsls	r3, r1, #3
    317a:	1ac0      	subs	r0, r0, r3
    317c:	4152      	adcs	r2, r2
    317e:	0883      	lsrs	r3, r0, #2
    3180:	428b      	cmp	r3, r1
    3182:	d301      	bcc.n	3188 <__divsi3+0x190>
    3184:	008b      	lsls	r3, r1, #2
    3186:	1ac0      	subs	r0, r0, r3
    3188:	4152      	adcs	r2, r2
    318a:	d2d9      	bcs.n	3140 <__divsi3+0x148>
    318c:	0843      	lsrs	r3, r0, #1
    318e:	428b      	cmp	r3, r1
    3190:	d301      	bcc.n	3196 <__divsi3+0x19e>
    3192:	004b      	lsls	r3, r1, #1
    3194:	1ac0      	subs	r0, r0, r3
    3196:	4152      	adcs	r2, r2
    3198:	1a41      	subs	r1, r0, r1
    319a:	d200      	bcs.n	319e <__divsi3+0x1a6>
    319c:	4601      	mov	r1, r0
    319e:	4663      	mov	r3, ip
    31a0:	4152      	adcs	r2, r2
    31a2:	105b      	asrs	r3, r3, #1
    31a4:	4610      	mov	r0, r2
    31a6:	d301      	bcc.n	31ac <__divsi3+0x1b4>
    31a8:	4240      	negs	r0, r0
    31aa:	2b00      	cmp	r3, #0
    31ac:	d500      	bpl.n	31b0 <__divsi3+0x1b8>
    31ae:	4249      	negs	r1, r1
    31b0:	4770      	bx	lr
    31b2:	4663      	mov	r3, ip
    31b4:	105b      	asrs	r3, r3, #1
    31b6:	d300      	bcc.n	31ba <__divsi3+0x1c2>
    31b8:	4240      	negs	r0, r0
    31ba:	b501      	push	{r0, lr}
    31bc:	2000      	movs	r0, #0
    31be:	f000 f805 	bl	31cc <__aeabi_idiv0>
    31c2:	bd02      	pop	{r1, pc}

000031c4 <__aeabi_idivmod>:
    31c4:	2900      	cmp	r1, #0
    31c6:	d0f8      	beq.n	31ba <__divsi3+0x1c2>
    31c8:	e716      	b.n	2ff8 <__divsi3>
    31ca:	4770      	bx	lr

000031cc <__aeabi_idiv0>:
    31cc:	4770      	bx	lr
    31ce:	46c0      	nop			; (mov r8, r8)

000031d0 <__libc_init_array>:
    31d0:	b570      	push	{r4, r5, r6, lr}
    31d2:	2600      	movs	r6, #0
    31d4:	4d0c      	ldr	r5, [pc, #48]	; (3208 <__libc_init_array+0x38>)
    31d6:	4c0d      	ldr	r4, [pc, #52]	; (320c <__libc_init_array+0x3c>)
    31d8:	1b64      	subs	r4, r4, r5
    31da:	10a4      	asrs	r4, r4, #2
    31dc:	42a6      	cmp	r6, r4
    31de:	d109      	bne.n	31f4 <__libc_init_array+0x24>
    31e0:	2600      	movs	r6, #0
    31e2:	f000 f965 	bl	34b0 <_init>
    31e6:	4d0a      	ldr	r5, [pc, #40]	; (3210 <__libc_init_array+0x40>)
    31e8:	4c0a      	ldr	r4, [pc, #40]	; (3214 <__libc_init_array+0x44>)
    31ea:	1b64      	subs	r4, r4, r5
    31ec:	10a4      	asrs	r4, r4, #2
    31ee:	42a6      	cmp	r6, r4
    31f0:	d105      	bne.n	31fe <__libc_init_array+0x2e>
    31f2:	bd70      	pop	{r4, r5, r6, pc}
    31f4:	00b3      	lsls	r3, r6, #2
    31f6:	58eb      	ldr	r3, [r5, r3]
    31f8:	4798      	blx	r3
    31fa:	3601      	adds	r6, #1
    31fc:	e7ee      	b.n	31dc <__libc_init_array+0xc>
    31fe:	00b3      	lsls	r3, r6, #2
    3200:	58eb      	ldr	r3, [r5, r3]
    3202:	4798      	blx	r3
    3204:	3601      	adds	r6, #1
    3206:	e7f2      	b.n	31ee <__libc_init_array+0x1e>
    3208:	000034bc 	.word	0x000034bc
    320c:	000034bc 	.word	0x000034bc
    3210:	000034bc 	.word	0x000034bc
    3214:	000034c0 	.word	0x000034c0

00003218 <malloc>:
    3218:	b510      	push	{r4, lr}
    321a:	4b03      	ldr	r3, [pc, #12]	; (3228 <malloc+0x10>)
    321c:	0001      	movs	r1, r0
    321e:	6818      	ldr	r0, [r3, #0]
    3220:	f000 f816 	bl	3250 <_malloc_r>
    3224:	bd10      	pop	{r4, pc}
    3226:	46c0      	nop			; (mov r8, r8)
    3228:	200000e0 	.word	0x200000e0

0000322c <memcpy>:
    322c:	2300      	movs	r3, #0
    322e:	b510      	push	{r4, lr}
    3230:	429a      	cmp	r2, r3
    3232:	d100      	bne.n	3236 <memcpy+0xa>
    3234:	bd10      	pop	{r4, pc}
    3236:	5ccc      	ldrb	r4, [r1, r3]
    3238:	54c4      	strb	r4, [r0, r3]
    323a:	3301      	adds	r3, #1
    323c:	e7f8      	b.n	3230 <memcpy+0x4>

0000323e <memset>:
    323e:	0003      	movs	r3, r0
    3240:	1882      	adds	r2, r0, r2
    3242:	4293      	cmp	r3, r2
    3244:	d100      	bne.n	3248 <memset+0xa>
    3246:	4770      	bx	lr
    3248:	7019      	strb	r1, [r3, #0]
    324a:	3301      	adds	r3, #1
    324c:	e7f9      	b.n	3242 <memset+0x4>
	...

00003250 <_malloc_r>:
    3250:	2303      	movs	r3, #3
    3252:	b570      	push	{r4, r5, r6, lr}
    3254:	1ccd      	adds	r5, r1, #3
    3256:	439d      	bics	r5, r3
    3258:	3508      	adds	r5, #8
    325a:	0006      	movs	r6, r0
    325c:	2d0c      	cmp	r5, #12
    325e:	d21e      	bcs.n	329e <_malloc_r+0x4e>
    3260:	250c      	movs	r5, #12
    3262:	42a9      	cmp	r1, r5
    3264:	d81d      	bhi.n	32a2 <_malloc_r+0x52>
    3266:	0030      	movs	r0, r6
    3268:	f000 f862 	bl	3330 <__malloc_lock>
    326c:	4a25      	ldr	r2, [pc, #148]	; (3304 <_malloc_r+0xb4>)
    326e:	6814      	ldr	r4, [r2, #0]
    3270:	0021      	movs	r1, r4
    3272:	2900      	cmp	r1, #0
    3274:	d119      	bne.n	32aa <_malloc_r+0x5a>
    3276:	4c24      	ldr	r4, [pc, #144]	; (3308 <_malloc_r+0xb8>)
    3278:	6823      	ldr	r3, [r4, #0]
    327a:	2b00      	cmp	r3, #0
    327c:	d103      	bne.n	3286 <_malloc_r+0x36>
    327e:	0030      	movs	r0, r6
    3280:	f000 f844 	bl	330c <_sbrk_r>
    3284:	6020      	str	r0, [r4, #0]
    3286:	0029      	movs	r1, r5
    3288:	0030      	movs	r0, r6
    328a:	f000 f83f 	bl	330c <_sbrk_r>
    328e:	1c43      	adds	r3, r0, #1
    3290:	d12c      	bne.n	32ec <_malloc_r+0x9c>
    3292:	230c      	movs	r3, #12
    3294:	0030      	movs	r0, r6
    3296:	6033      	str	r3, [r6, #0]
    3298:	f000 f84b 	bl	3332 <__malloc_unlock>
    329c:	e003      	b.n	32a6 <_malloc_r+0x56>
    329e:	2d00      	cmp	r5, #0
    32a0:	dadf      	bge.n	3262 <_malloc_r+0x12>
    32a2:	230c      	movs	r3, #12
    32a4:	6033      	str	r3, [r6, #0]
    32a6:	2000      	movs	r0, #0
    32a8:	bd70      	pop	{r4, r5, r6, pc}
    32aa:	680b      	ldr	r3, [r1, #0]
    32ac:	1b5b      	subs	r3, r3, r5
    32ae:	d41a      	bmi.n	32e6 <_malloc_r+0x96>
    32b0:	2b0b      	cmp	r3, #11
    32b2:	d903      	bls.n	32bc <_malloc_r+0x6c>
    32b4:	600b      	str	r3, [r1, #0]
    32b6:	18cc      	adds	r4, r1, r3
    32b8:	6025      	str	r5, [r4, #0]
    32ba:	e003      	b.n	32c4 <_malloc_r+0x74>
    32bc:	428c      	cmp	r4, r1
    32be:	d10e      	bne.n	32de <_malloc_r+0x8e>
    32c0:	6863      	ldr	r3, [r4, #4]
    32c2:	6013      	str	r3, [r2, #0]
    32c4:	0030      	movs	r0, r6
    32c6:	f000 f834 	bl	3332 <__malloc_unlock>
    32ca:	0020      	movs	r0, r4
    32cc:	2207      	movs	r2, #7
    32ce:	300b      	adds	r0, #11
    32d0:	1d23      	adds	r3, r4, #4
    32d2:	4390      	bics	r0, r2
    32d4:	1ac3      	subs	r3, r0, r3
    32d6:	d0e7      	beq.n	32a8 <_malloc_r+0x58>
    32d8:	425a      	negs	r2, r3
    32da:	50e2      	str	r2, [r4, r3]
    32dc:	e7e4      	b.n	32a8 <_malloc_r+0x58>
    32de:	684b      	ldr	r3, [r1, #4]
    32e0:	6063      	str	r3, [r4, #4]
    32e2:	000c      	movs	r4, r1
    32e4:	e7ee      	b.n	32c4 <_malloc_r+0x74>
    32e6:	000c      	movs	r4, r1
    32e8:	6849      	ldr	r1, [r1, #4]
    32ea:	e7c2      	b.n	3272 <_malloc_r+0x22>
    32ec:	2303      	movs	r3, #3
    32ee:	1cc4      	adds	r4, r0, #3
    32f0:	439c      	bics	r4, r3
    32f2:	42a0      	cmp	r0, r4
    32f4:	d0e0      	beq.n	32b8 <_malloc_r+0x68>
    32f6:	1a21      	subs	r1, r4, r0
    32f8:	0030      	movs	r0, r6
    32fa:	f000 f807 	bl	330c <_sbrk_r>
    32fe:	1c43      	adds	r3, r0, #1
    3300:	d1da      	bne.n	32b8 <_malloc_r+0x68>
    3302:	e7c6      	b.n	3292 <_malloc_r+0x42>
    3304:	200002b0 	.word	0x200002b0
    3308:	200002b4 	.word	0x200002b4

0000330c <_sbrk_r>:
    330c:	2300      	movs	r3, #0
    330e:	b570      	push	{r4, r5, r6, lr}
    3310:	4c06      	ldr	r4, [pc, #24]	; (332c <_sbrk_r+0x20>)
    3312:	0005      	movs	r5, r0
    3314:	0008      	movs	r0, r1
    3316:	6023      	str	r3, [r4, #0]
    3318:	f7fe febc 	bl	2094 <_sbrk>
    331c:	1c43      	adds	r3, r0, #1
    331e:	d103      	bne.n	3328 <_sbrk_r+0x1c>
    3320:	6823      	ldr	r3, [r4, #0]
    3322:	2b00      	cmp	r3, #0
    3324:	d000      	beq.n	3328 <_sbrk_r+0x1c>
    3326:	602b      	str	r3, [r5, #0]
    3328:	bd70      	pop	{r4, r5, r6, pc}
    332a:	46c0      	nop			; (mov r8, r8)
    332c:	20000504 	.word	0x20000504

00003330 <__malloc_lock>:
    3330:	4770      	bx	lr

00003332 <__malloc_unlock>:
    3332:	4770      	bx	lr
    3334:	0000036a 	.word	0x0000036a
    3338:	000005b6 	.word	0x000005b6
    333c:	000005b6 	.word	0x000005b6
    3340:	000005b6 	.word	0x000005b6
    3344:	000005b6 	.word	0x000005b6
    3348:	000005b6 	.word	0x000005b6
    334c:	000005b6 	.word	0x000005b6
    3350:	000005b6 	.word	0x000005b6
    3354:	000005b6 	.word	0x000005b6
    3358:	000005b6 	.word	0x000005b6
    335c:	000005b6 	.word	0x000005b6
    3360:	000005b6 	.word	0x000005b6
    3364:	000005b6 	.word	0x000005b6
    3368:	000005b6 	.word	0x000005b6
    336c:	000005b6 	.word	0x000005b6
    3370:	000005b6 	.word	0x000005b6
    3374:	00000352 	.word	0x00000352
    3378:	000005b6 	.word	0x000005b6
    337c:	000005b6 	.word	0x000005b6
    3380:	000005b6 	.word	0x000005b6
    3384:	000005b6 	.word	0x000005b6
    3388:	000005b6 	.word	0x000005b6
    338c:	000005b6 	.word	0x000005b6
    3390:	000005b6 	.word	0x000005b6
    3394:	000005b6 	.word	0x000005b6
    3398:	000005b6 	.word	0x000005b6
    339c:	000005b6 	.word	0x000005b6
    33a0:	000005b6 	.word	0x000005b6
    33a4:	000005b6 	.word	0x000005b6
    33a8:	000005b6 	.word	0x000005b6
    33ac:	000005b6 	.word	0x000005b6
    33b0:	000005b6 	.word	0x000005b6
    33b4:	00000362 	.word	0x00000362
    33b8:	000005b6 	.word	0x000005b6
    33bc:	000005b6 	.word	0x000005b6
    33c0:	000005b6 	.word	0x000005b6
    33c4:	000005b6 	.word	0x000005b6
    33c8:	000005b6 	.word	0x000005b6
    33cc:	000005b6 	.word	0x000005b6
    33d0:	000005b6 	.word	0x000005b6
    33d4:	000005b6 	.word	0x000005b6
    33d8:	000005b6 	.word	0x000005b6
    33dc:	000005b6 	.word	0x000005b6
    33e0:	000005b6 	.word	0x000005b6
    33e4:	000005b6 	.word	0x000005b6
    33e8:	000005b6 	.word	0x000005b6
    33ec:	000005b6 	.word	0x000005b6
    33f0:	000005b6 	.word	0x000005b6
    33f4:	0000035a 	.word	0x0000035a
    33f8:	00000372 	.word	0x00000372
    33fc:	0000033a 	.word	0x0000033a
    3400:	0000034a 	.word	0x0000034a
    3404:	00000342 	.word	0x00000342
    3408:	00000002 	.word	0x00000002
    340c:	00000003 	.word	0x00000003
    3410:	00000004 	.word	0x00000004
    3414:	00000005 	.word	0x00000005
    3418:	00000006 	.word	0x00000006
    341c:	00000007 	.word	0x00000007
    3420:	0000000e 	.word	0x0000000e
    3424:	0000000f 	.word	0x0000000f
    3428:	0000000a 	.word	0x0000000a
    342c:	0000000b 	.word	0x0000000b
    3430:	0000ffff 	.word	0x0000ffff
    3434:	0000ffff 	.word	0x0000ffff
    3438:	0000ffff 	.word	0x0000ffff
    343c:	0000ffff 	.word	0x0000ffff
    3440:	0000ffff 	.word	0x0000ffff
    3444:	0000ffff 	.word	0x0000ffff
    3448:	0000ffff 	.word	0x0000ffff
    344c:	0000ffff 	.word	0x0000ffff
    3450:	0000ffff 	.word	0x0000ffff
    3454:	0000ffff 	.word	0x0000ffff
    3458:	42000800 	.word	0x42000800
    345c:	42000c00 	.word	0x42000c00
    3460:	42001000 	.word	0x42001000
    3464:	00001856 	.word	0x00001856
    3468:	00001852 	.word	0x00001852
    346c:	00001852 	.word	0x00001852
    3470:	000018b4 	.word	0x000018b4
    3474:	000018b4 	.word	0x000018b4
    3478:	0000186a 	.word	0x0000186a
    347c:	0000185c 	.word	0x0000185c
    3480:	00001870 	.word	0x00001870
    3484:	000018a2 	.word	0x000018a2
    3488:	00001a38 	.word	0x00001a38
    348c:	00001a18 	.word	0x00001a18
    3490:	00001a18 	.word	0x00001a18
    3494:	00001aa4 	.word	0x00001aa4
    3498:	00001a2a 	.word	0x00001a2a
    349c:	00001a46 	.word	0x00001a46
    34a0:	00001a1c 	.word	0x00001a1c
    34a4:	00001a54 	.word	0x00001a54
    34a8:	00001a94 	.word	0x00001a94

000034ac <tc_interrupt_vectors.12390>:
    34ac:	00000e0d                                ....

000034b0 <_init>:
    34b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    34b2:	46c0      	nop			; (mov r8, r8)
    34b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    34b6:	bc08      	pop	{r3}
    34b8:	469e      	mov	lr, r3
    34ba:	4770      	bx	lr

000034bc <__init_array_start>:
    34bc:	000000b5 	.word	0x000000b5

000034c0 <_fini>:
    34c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    34c2:	46c0      	nop			; (mov r8, r8)
    34c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    34c6:	bc08      	pop	{r3}
    34c8:	469e      	mov	lr, r3
    34ca:	4770      	bx	lr

000034cc <__fini_array_start>:
    34cc:	0000008d 	.word	0x0000008d
